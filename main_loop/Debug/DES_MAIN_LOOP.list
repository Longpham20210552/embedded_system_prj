
DES_MAIN_LOOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000854c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008660  08008660  00009660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab4  08008ab4  0000a278  2**0
                  CONTENTS
  4 .ARM          00000008  08008ab4  08008ab4  00009ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008abc  08008abc  0000a278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac0  08008ac0  00009ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  08008ac4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000278  08008d3c  0000a278  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08008d3c  0000a558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010093  00000000  00000000  0000a2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002511  00000000  00000000  0001a334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d81  00000000  00000000  0001d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191b1  00000000  00000000  0001e701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f40  00000000  00000000  000378b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f12c  00000000  00000000  0004a7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d991e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d7c  00000000  00000000  000d9964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000df6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	08008644 	.word	0x08008644

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	08008644 	.word	0x08008644

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <microDelay>:
uint8_t TCD;
uint8_t RHD;
uint8_t RHI;
// Định nghĩa hàm microDelay
void microDelay (uint16_t delay)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0); // Đặt lại bộ đếm của timer
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <microDelay+0x2c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24

  while (__HAL_TIM_GET_COUNTER(&htim1) < delay); // Chờ cho đến khi bộ đếm đạt giá trị delay
 8000ff6:	bf00      	nop
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <microDelay+0x2c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3f9      	bcc.n	8000ff8 <microDelay+0x14>
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	20000374 	.word	0x20000374

08001014 <DHT11_Start>:

// Định nghĩa hàm DHT11_Start
uint8_t DHT11_Start (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]

  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 800102a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800102e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	482c      	ldr	r0, [pc, #176]	@ (80010f4 <DHT11_Start+0xe0>)
 8001042:	f001 fad1 	bl	80025e8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	4829      	ldr	r0, [pc, #164]	@ (80010f4 <DHT11_Start+0xe0>)
 800104e:	f001 fc66 	bl	800291e <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001052:	2014      	movs	r0, #20
 8001054:	f001 f9c0 	bl	80023d8 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800105e:	4825      	ldr	r0, [pc, #148]	@ (80010f4 <DHT11_Start+0xe0>)
 8001060:	f001 fc5d 	bl	800291e <HAL_GPIO_WritePin>
  microDelay (40);   // wait for 40us
 8001064:	2028      	movs	r0, #40	@ 0x28
 8001066:	f7ff ffbd 	bl	8000fe4 <microDelay>

  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800106e:	2301      	movs	r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	481f      	ldr	r0, [pc, #124]	@ (80010f4 <DHT11_Start+0xe0>)
 8001078:	f001 fab6 	bl	80025e8 <HAL_GPIO_Init>

  microDelay (40); // wait for 40us
 800107c:	2028      	movs	r0, #40	@ 0x28
 800107e:	f7ff ffb1 	bl	8000fe4 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001082:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001086:	481b      	ldr	r0, [pc, #108]	@ (80010f4 <DHT11_Start+0xe0>)
 8001088:	f001 fc32 	bl	80028f0 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10c      	bne.n	80010ac <DHT11_Start+0x98>
  {
    microDelay (80); // wait 80us if time very lag --> cannot start
 8001092:	2050      	movs	r0, #80	@ 0x50
 8001094:	f7ff ffa6 	bl	8000fe4 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109c:	4815      	ldr	r0, [pc, #84]	@ (80010f4 <DHT11_Start+0xe0>)
 800109e:	f001 fc27 	bl	80028f0 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <DHT11_Start+0x98>
    {
      Response = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	75fb      	strb	r3, [r7, #23]
    }
  }

  pMillis = HAL_GetTick();
 80010ac:	f001 f98a 	bl	80023c4 <HAL_GetTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a11      	ldr	r2, [pc, #68]	@ (80010f8 <DHT11_Start+0xe4>)
 80010b4:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 80010b6:	f001 f985 	bl	80023c4 <HAL_GetTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <DHT11_Start+0xe8>)
 80010be:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010c0:	e004      	b.n	80010cc <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 80010c2:	f001 f97f 	bl	80023c4 <HAL_GetTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <DHT11_Start+0xe8>)
 80010ca:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d0:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <DHT11_Start+0xe0>)
 80010d2:	f001 fc0d 	bl	80028f0 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <DHT11_Start+0xd6>
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <DHT11_Start+0xe4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1c9a      	adds	r2, r3, #2
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <DHT11_Start+0xe8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d8eb      	bhi.n	80010c2 <DHT11_Start+0xae>
  }
  return Response;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	2000029c 	.word	0x2000029c
 80010fc:	200002a0 	.word	0x200002a0

08001100 <DHT11_Read>:

// Định nghĩa hàm DHT11_Read
uint8_t DHT11_Read (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	e066      	b.n	80011da <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 800110c:	f001 f95a 	bl	80023c4 <HAL_GetTick>
 8001110:	4603      	mov	r3, r0
 8001112:	4a36      	ldr	r2, [pc, #216]	@ (80011ec <DHT11_Read+0xec>)
 8001114:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001116:	f001 f955 	bl	80023c4 <HAL_GetTick>
 800111a:	4603      	mov	r3, r0
 800111c:	4a34      	ldr	r2, [pc, #208]	@ (80011f0 <DHT11_Read+0xf0>)
 800111e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001120:	e004      	b.n	800112c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001122:	f001 f94f 	bl	80023c4 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a31      	ldr	r2, [pc, #196]	@ (80011f0 <DHT11_Read+0xf0>)
 800112a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800112c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001130:	4830      	ldr	r0, [pc, #192]	@ (80011f4 <DHT11_Read+0xf4>)
 8001132:	f001 fbdd 	bl	80028f0 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d106      	bne.n	800114a <DHT11_Read+0x4a>
 800113c:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <DHT11_Read+0xec>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1c9a      	adds	r2, r3, #2
 8001142:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <DHT11_Read+0xf0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d8eb      	bhi.n	8001122 <DHT11_Read+0x22>
    }
    microDelay (37);   // wait for 27-70 us
 800114a:	2025      	movs	r0, #37	@ 0x25
 800114c:	f7ff ff4a 	bl	8000fe4 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001150:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001154:	4827      	ldr	r0, [pc, #156]	@ (80011f4 <DHT11_Read+0xf4>)
 8001156:	f001 fbcb 	bl	80028f0 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10e      	bne.n	800117e <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2201      	movs	r2, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	b25b      	sxtb	r3, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	b25a      	sxtb	r2, r3
 8001172:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001176:	4013      	ands	r3, r2
 8001178:	b25b      	sxtb	r3, r3
 800117a:	71bb      	strb	r3, [r7, #6]
 800117c:	e00b      	b.n	8001196 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f1c3 0307 	rsb	r3, r3, #7
 8001184:	2201      	movs	r2, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	b25a      	sxtb	r2, r3
 800118c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001190:	4313      	orrs	r3, r2
 8001192:	b25b      	sxtb	r3, r3
 8001194:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001196:	f001 f915 	bl	80023c4 <HAL_GetTick>
 800119a:	4603      	mov	r3, r0
 800119c:	4a13      	ldr	r2, [pc, #76]	@ (80011ec <DHT11_Read+0xec>)
 800119e:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80011a0:	f001 f910 	bl	80023c4 <HAL_GetTick>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <DHT11_Read+0xf0>)
 80011a8:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011aa:	e004      	b.n	80011b6 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80011ac:	f001 f90a 	bl	80023c4 <HAL_GetTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <DHT11_Read+0xf0>)
 80011b4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011ba:	480e      	ldr	r0, [pc, #56]	@ (80011f4 <DHT11_Read+0xf4>)
 80011bc:	f001 fb98 	bl	80028f0 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <DHT11_Read+0xd4>
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <DHT11_Read+0xec>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1c9a      	adds	r2, r3, #2
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <DHT11_Read+0xf0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8eb      	bhi.n	80011ac <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	3301      	adds	r3, #1
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	d995      	bls.n	800110c <DHT11_Read+0xc>
    }
  }
  return b;
 80011e0:	79bb      	ldrb	r3, [r7, #6]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000029c 	.word	0x2000029c
 80011f0:	200002a0 	.word	0x200002a0
 80011f4:	40010c00 	.word	0x40010c00

080011f8 <DHT11>:

float DHT11 (void)
{
 80011f8:	b598      	push	{r3, r4, r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	if(DHT11_Start())
 80011fc:	f7ff ff0a 	bl	8001014 <DHT11_Start>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8084 	beq.w	8001310 <DHT11+0x118>
	{
	RHI = DHT11_Read(); // Relative humidity integral
 8001208:	f7ff ff7a 	bl	8001100 <DHT11_Read>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b40      	ldr	r3, [pc, #256]	@ (8001314 <DHT11+0x11c>)
 8001212:	701a      	strb	r2, [r3, #0]
	RHD = DHT11_Read(); // Relative humidity decimal
 8001214:	f7ff ff74 	bl	8001100 <DHT11_Read>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b3e      	ldr	r3, [pc, #248]	@ (8001318 <DHT11+0x120>)
 800121e:	701a      	strb	r2, [r3, #0]
	TCI = DHT11_Read(); // Celsius integral
 8001220:	f7ff ff6e 	bl	8001100 <DHT11_Read>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b3c      	ldr	r3, [pc, #240]	@ (800131c <DHT11+0x124>)
 800122a:	701a      	strb	r2, [r3, #0]
	TCD = DHT11_Read(); // Celsius decimal
 800122c:	f7ff ff68 	bl	8001100 <DHT11_Read>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <DHT11+0x128>)
 8001236:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read(); // Check sum
 8001238:	f7ff ff62 	bl	8001100 <DHT11_Read>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b38      	ldr	r3, [pc, #224]	@ (8001324 <DHT11+0x12c>)
 8001242:	701a      	strb	r2, [r3, #0]
	if (RHI + RHD + TCI + TCD == SUM)
 8001244:	4b33      	ldr	r3, [pc, #204]	@ (8001314 <DHT11+0x11c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b33      	ldr	r3, [pc, #204]	@ (8001318 <DHT11+0x120>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a32      	ldr	r2, [pc, #200]	@ (800131c <DHT11+0x124>)
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	4413      	add	r3, r2
 8001256:	4a32      	ldr	r2, [pc, #200]	@ (8001320 <DHT11+0x128>)
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a31      	ldr	r2, [pc, #196]	@ (8001324 <DHT11+0x12c>)
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	4293      	cmp	r3, r2
 8001262:	d152      	bne.n	800130a <DHT11+0x112>
	{
	// Can use RHI and TCI for any purposes if whole number only needed
	tCelsius = (float)TCI + (float)(TCD/10.0);
 8001264:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <DHT11+0x124>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fd13 	bl	8000c94 <__aeabi_ui2f>
 800126e:	4604      	mov	r4, r0
 8001270:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <DHT11+0x128>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8c5 	bl	8000404 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <DHT11+0x130>)
 8001280:	f7ff fa54 	bl	800072c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fbfc 	bl	8000a88 <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	4619      	mov	r1, r3
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff fc4d 	bl	8000b34 <__addsf3>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b23      	ldr	r3, [pc, #140]	@ (800132c <DHT11+0x134>)
 80012a0:	601a      	str	r2, [r3, #0]
	tFahrenheit = tCelsius * 9/5 + 32;
 80012a2:	4b22      	ldr	r3, [pc, #136]	@ (800132c <DHT11+0x134>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4922      	ldr	r1, [pc, #136]	@ (8001330 <DHT11+0x138>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd4b 	bl	8000d44 <__aeabi_fmul>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4920      	ldr	r1, [pc, #128]	@ (8001334 <DHT11+0x13c>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fdfa 	bl	8000eac <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fc38 	bl	8000b34 <__addsf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <DHT11+0x140>)
 80012ca:	601a      	str	r2, [r3, #0]
	RH = (float)RHI + (float)(RHD/10.0);
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <DHT11+0x11c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fcdf 	bl	8000c94 <__aeabi_ui2f>
 80012d6:	4604      	mov	r4, r0
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <DHT11+0x120>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f891 	bl	8000404 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <DHT11+0x130>)
 80012e8:	f7ff fa20 	bl	800072c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fbc8 	bl	8000a88 <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4619      	mov	r1, r3
 80012fc:	4620      	mov	r0, r4
 80012fe:	f7ff fc19 	bl	8000b34 <__addsf3>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <DHT11+0x144>)
 8001308:	601a      	str	r2, [r3, #0]
	// Can use tCelsius, tFahrenheit and RH for any purposes
	}
	return RH;
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <DHT11+0x144>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	e7ff      	b.n	8001310 <DHT11+0x118>
	}
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd98      	pop	{r3, r4, r7, pc}
 8001314:	20000294 	.word	0x20000294
 8001318:	20000295 	.word	0x20000295
 800131c:	20000296 	.word	0x20000296
 8001320:	20000297 	.word	0x20000297
 8001324:	20000298 	.word	0x20000298
 8001328:	40240000 	.word	0x40240000
 800132c:	200002a4 	.word	0x200002a4
 8001330:	41100000 	.word	0x41100000
 8001334:	40a00000 	.word	0x40a00000
 8001338:	200002a8 	.word	0x200002a8
 800133c:	200002ac 	.word	0x200002ac

08001340 <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001348:	4a04      	ldr	r2, [pc, #16]	@ (800135c <DS1307_Init+0x1c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f806 	bl	8001360 <DS1307_SetClockHalt>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200002b0 	.word	0x200002b0

08001360 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <DS1307_SetClockHalt+0x14>
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	e000      	b.n	8001376 <DS1307_SetClockHalt+0x16>
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f831 	bl	80013e0 <DS1307_GetRegByte>
 800137e:	4603      	mov	r3, r0
 8001380:	b25b      	sxtb	r3, r3
 8001382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001386:	b25a      	sxtb	r2, r3
 8001388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138c:	4313      	orrs	r3, r2
 800138e:	b25b      	sxtb	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	2000      	movs	r0, #0
 8001396:	f000 f805 	bl	80013a4 <DS1307_SetRegByte>
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	460a      	mov	r2, r1
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	733b      	strb	r3, [r7, #12]
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <DS1307_SetRegByte+0x38>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	f107 020c 	add.w	r2, r7, #12
 80013c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2302      	movs	r3, #2
 80013cc:	21d0      	movs	r1, #208	@ 0xd0
 80013ce:	f001 fc03 	bl	8002bd8 <HAL_I2C_Master_Transmit>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002b0 	.word	0x200002b0

080013e0 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <DS1307_GetRegByte+0x40>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	1dfa      	adds	r2, r7, #7
 80013f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	21d0      	movs	r1, #208	@ 0xd0
 80013fa:	f001 fbed 	bl	8002bd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <DS1307_GetRegByte+0x40>)
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	f107 020f 	add.w	r2, r7, #15
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	21d0      	movs	r1, #208	@ 0xd0
 8001410:	f001 fce0 	bl	8002dd4 <HAL_I2C_Master_Receive>
	return val;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002b0 	.word	0x200002b0

08001424 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001428:	2002      	movs	r0, #2
 800142a:	f7ff ffd9 	bl	80013e0 <DS1307_GetRegByte>
 800142e:	4603      	mov	r3, r0
 8001430:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f81e 	bl	8001478 <DS1307_DecodeBCD>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}

08001442 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff ffca 	bl	80013e0 <DS1307_GetRegByte>
 800144c:	4603      	mov	r3, r0
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f812 	bl	8001478 <DS1307_DecodeBCD>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}

0800145a <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff ffbe 	bl	80013e0 <DS1307_GetRegByte>
 8001464:	4603      	mov	r3, r0
 8001466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f803 	bl	8001478 <DS1307_DecodeBCD>
 8001472:	4603      	mov	r3, r0
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}

08001478 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b2db      	uxtb	r3, r3
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80014b2:	4a38      	ldr	r2, [pc, #224]	@ (8001594 <HD44780_Init+0xec>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80014b8:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <HD44780_Init+0xf0>)
 80014ba:	2208      	movs	r2, #8
 80014bc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80014be:	4b37      	ldr	r3, [pc, #220]	@ (800159c <HD44780_Init+0xf4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80014c4:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <HD44780_Init+0xec>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d907      	bls.n	80014dc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80014cc:	4b33      	ldr	r3, [pc, #204]	@ (800159c <HD44780_Init+0xf4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <HD44780_Init+0xf4>)
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e006      	b.n	80014ea <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <HD44780_Init+0xf4>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <HD44780_Init+0xf4>)
 80014e8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80014ea:	f000 f985 	bl	80017f8 <DelayInit>
  HAL_Delay(50);
 80014ee:	2032      	movs	r0, #50	@ 0x32
 80014f0:	f000 ff72 	bl	80023d8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HD44780_Init+0xf0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f943 	bl	8001784 <ExpanderWrite>
  HAL_Delay(1000);
 80014fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001502:	f000 ff69 	bl	80023d8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001506:	2030      	movs	r0, #48	@ 0x30
 8001508:	f000 f92b 	bl	8001762 <Write4Bits>
  DelayUS(4500);
 800150c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001510:	f000 f99a 	bl	8001848 <DelayUS>

  Write4Bits(0x03 << 4);
 8001514:	2030      	movs	r0, #48	@ 0x30
 8001516:	f000 f924 	bl	8001762 <Write4Bits>
  DelayUS(4500);
 800151a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800151e:	f000 f993 	bl	8001848 <DelayUS>

  Write4Bits(0x03 << 4);
 8001522:	2030      	movs	r0, #48	@ 0x30
 8001524:	f000 f91d 	bl	8001762 <Write4Bits>
  DelayUS(4500);
 8001528:	f241 1094 	movw	r0, #4500	@ 0x1194
 800152c:	f000 f98c 	bl	8001848 <DelayUS>

  Write4Bits(0x02 << 4);
 8001530:	2020      	movs	r0, #32
 8001532:	f000 f916 	bl	8001762 <Write4Bits>
  DelayUS(100);
 8001536:	2064      	movs	r0, #100	@ 0x64
 8001538:	f000 f986 	bl	8001848 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HD44780_Init+0xf4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f8ce 	bl	80016e8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HD44780_Init+0xf8>)
 800154e:	2204      	movs	r2, #4
 8001550:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001552:	f000 f875 	bl	8001640 <HD44780_Display>
  HD44780_Clear();
 8001556:	f000 f82b 	bl	80015b0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HD44780_Init+0xfc>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HD44780_Init+0xfc>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f8bc 	bl	80016e8 <SendCommand>
  DelayUS(4500);
 8001570:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001574:	f000 f968 	bl	8001848 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001578:	490b      	ldr	r1, [pc, #44]	@ (80015a8 <HD44780_Init+0x100>)
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f876 	bl	800166c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001580:	490a      	ldr	r1, [pc, #40]	@ (80015ac <HD44780_Init+0x104>)
 8001582:	2001      	movs	r0, #1
 8001584:	f000 f872 	bl	800166c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001588:	f000 f81d 	bl	80015c6 <HD44780_Home>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200002b7 	.word	0x200002b7
 8001598:	200002b8 	.word	0x200002b8
 800159c:	200002b4 	.word	0x200002b4
 80015a0:	200002b5 	.word	0x200002b5
 80015a4:	200002b6 	.word	0x200002b6
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000008 	.word	0x20000008

080015b0 <HD44780_Clear>:

void HD44780_Clear()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f000 f897 	bl	80016e8 <SendCommand>
  DelayUS(2000);
 80015ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015be:	f000 f943 	bl	8001848 <DelayUS>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HD44780_Home>:

void HD44780_Home()
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80015ca:	2002      	movs	r0, #2
 80015cc:	f000 f88c 	bl	80016e8 <SendCommand>
  DelayUS(2000);
 80015d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015d4:	f000 f938 	bl	8001848 <DelayUS>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	460a      	mov	r2, r1
 80015e6:	71fb      	strb	r3, [r7, #7]
 80015e8:	4613      	mov	r3, r2
 80015ea:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HD44780_SetCursor+0x5c>)
 80015ee:	f107 0408 	add.w	r4, r7, #8
 80015f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80015f8:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HD44780_SetCursor+0x60>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	79ba      	ldrb	r2, [r7, #6]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d303      	bcc.n	800160a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <HD44780_SetCursor+0x60>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800160a:	79bb      	ldrb	r3, [r7, #6]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	3318      	adds	r3, #24
 8001610:	443b      	add	r3, r7
 8001612:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4413      	add	r3, r2
 800161c:	b2db      	uxtb	r3, r3
 800161e:	b25b      	sxtb	r3, r3
 8001620:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001624:	b25b      	sxtb	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f85d 	bl	80016e8 <SendCommand>
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	bf00      	nop
 8001638:	08008660 	.word	0x08008660
 800163c:	200002b7 	.word	0x200002b7

08001640 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HD44780_Display+0x28>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HD44780_Display+0x28>)
 8001650:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HD44780_Display+0x28>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f843 	bl	80016e8 <SendCommand>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002b5 	.word	0x200002b5

0800166c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	b25b      	sxtb	r3, r3
 8001686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f82a 	bl	80016e8 <SendCommand>
  for (int i=0; i<8; i++)
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e009      	b.n	80016ae <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f82e 	bl	8001704 <SendChar>
  for (int i=0; i<8; i++)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b07      	cmp	r3, #7
 80016b2:	ddf2      	ble.n	800169a <HD44780_CreateSpecialChar+0x2e>
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80016c6:	e006      	b.n	80016d6 <HD44780_PrintStr+0x18>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f817 	bl	8001704 <SendChar>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f4      	bne.n	80016c8 <HD44780_PrintStr+0xa>
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f812 	bl	8001720 <Send>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2101      	movs	r1, #1
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f804 	bl	8001720 <Send>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	460a      	mov	r2, r1
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	4613      	mov	r3, r2
 800172e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f023 030f 	bic.w	r3, r3, #15
 8001736:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	4313      	orrs	r3, r2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f80b 	bl	8001762 <Write4Bits>
  Write4Bits((lownib)|mode);
 800174c:	7bba      	ldrb	r2, [r7, #14]
 800174e:	79bb      	ldrb	r3, [r7, #6]
 8001750:	4313      	orrs	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f804 	bl	8001762 <Write4Bits>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f808 	bl	8001784 <ExpanderWrite>
  PulseEnable(value);
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f820 	bl	80017bc <PulseEnable>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af02      	add	r7, sp, #8
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <ExpanderWrite+0x30>)
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4313      	orrs	r3, r2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800179a:	f107 020f 	add.w	r2, r7, #15
 800179e:	230a      	movs	r3, #10
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	214e      	movs	r1, #78	@ 0x4e
 80017a6:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <ExpanderWrite+0x34>)
 80017a8:	f001 fa16 	bl	8002bd8 <HAL_I2C_Master_Transmit>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200002b8 	.word	0x200002b8
 80017b8:	20000320 	.word	0x20000320

080017bc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffd8 	bl	8001784 <ExpanderWrite>
  DelayUS(20);
 80017d4:	2014      	movs	r0, #20
 80017d6:	f000 f837 	bl	8001848 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffce 	bl	8001784 <ExpanderWrite>
  DelayUS(20);
 80017e8:	2014      	movs	r0, #20
 80017ea:	f000 f82d 	bl	8001848 <DelayUS>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <DelayInit>:

static void DelayInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <DelayInit+0x48>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <DelayInit+0x48>)
 8001802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001806:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <DelayInit+0x48>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4a0c      	ldr	r2, [pc, #48]	@ (8001840 <DelayInit+0x48>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001812:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <DelayInit+0x4c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <DelayInit+0x4c>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <DelayInit+0x4c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <DelayInit+0x4c>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <DelayInit+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001832:	bf00      	nop
  __ASM volatile ("NOP");
 8001834:	bf00      	nop
  __ASM volatile ("NOP");
 8001836:	bf00      	nop
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	e000edf0 	.word	0xe000edf0
 8001844:	e0001000 	.word	0xe0001000

08001848 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001850:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <DelayUS+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <DelayUS+0x44>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9a      	lsrs	r2, r3, #18
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <DelayUS+0x48>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <DelayUS+0x48>)
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f6      	bhi.n	800186a <DelayUS+0x22>
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	200000a4 	.word	0x200000a4
 800188c:	431bde83 	.word	0x431bde83
 8001890:	e0001000 	.word	0xe0001000

08001894 <I2C_DS1307>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_DS1307(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	  hour = DS1307_GetHour(); 		// Lấy gi�?
 8001898:	f7ff fdc4 	bl	8001424 <DS1307_GetHour>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <I2C_DS1307+0x2c>)
 80018a2:	701a      	strb	r2, [r3, #0]
	  min = DS1307_GetMinute();	  	// Lấy phút
 80018a4:	f7ff fdcd 	bl	8001442 <DS1307_GetMinute>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <I2C_DS1307+0x30>)
 80018ae:	701a      	strb	r2, [r3, #0]
	  sec = DS1307_GetSecond();
 80018b0:	f7ff fdd3 	bl	800145a <DS1307_GetSecond>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <I2C_DS1307+0x34>)
 80018ba:	701a      	strb	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200002b9 	.word	0x200002b9
 80018c4:	200002ba 	.word	0x200002ba
 80018c8:	200002bb 	.word	0x200002bb

080018cc <One_write_DHT11>:
void One_write_DHT11(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	t = DHT11();
 80018d0:	f7ff fc92 	bl	80011f8 <DHT11>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a02      	ldr	r2, [pc, #8]	@ (80018e0 <One_write_DHT11+0x14>)
 80018d8:	6013      	str	r3, [r2, #0]
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002c0 	.word	0x200002c0

080018e4 <I2C_LCD>:
void I2C_LCD(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af02      	add	r7, sp, #8
	  HD44780_Clear();
 80018ea:	f7ff fe61 	bl	80015b0 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 80018ee:	2100      	movs	r1, #0
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fe73 	bl	80015dc <HD44780_SetCursor>
	  sprintf(Lcd_send1, "%.1f%%", t);
 80018f6:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <I2C_LCD+0x64>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fd94 	bl	8000428 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4911      	ldr	r1, [pc, #68]	@ (800194c <I2C_LCD+0x68>)
 8001906:	4812      	ldr	r0, [pc, #72]	@ (8001950 <I2C_LCD+0x6c>)
 8001908:	f004 f8c8 	bl	8005a9c <siprintf>
	  HD44780_PrintStr(Lcd_send1);
 800190c:	4810      	ldr	r0, [pc, #64]	@ (8001950 <I2C_LCD+0x6c>)
 800190e:	f7ff fed6 	bl	80016be <HD44780_PrintStr>


	  HD44780_SetCursor(7,0);
 8001912:	2100      	movs	r1, #0
 8001914:	2007      	movs	r0, #7
 8001916:	f7ff fe61 	bl	80015dc <HD44780_SetCursor>
	  sprintf(LCD_send2, "%02d:%02d:%02d   ", hour, min,sec);
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <I2C_LCD+0x70>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <I2C_LCD+0x74>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <I2C_LCD+0x78>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	460b      	mov	r3, r1
 800192e:	490c      	ldr	r1, [pc, #48]	@ (8001960 <I2C_LCD+0x7c>)
 8001930:	480c      	ldr	r0, [pc, #48]	@ (8001964 <I2C_LCD+0x80>)
 8001932:	f004 f8b3 	bl	8005a9c <siprintf>
	  HD44780_PrintStr(LCD_send2);
 8001936:	480b      	ldr	r0, [pc, #44]	@ (8001964 <I2C_LCD+0x80>)
 8001938:	f7ff fec1 	bl	80016be <HD44780_PrintStr>

	  HAL_Delay(100);
 800193c:	2064      	movs	r0, #100	@ 0x64
 800193e:	f000 fd4b 	bl	80023d8 <HAL_Delay>

//	  if(rx_len!=0)
//	  {
//	  }
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200002c0 	.word	0x200002c0
 800194c:	08008670 	.word	0x08008670
 8001950:	200002c4 	.word	0x200002c4
 8001954:	200002b9 	.word	0x200002b9
 8001958:	200002ba 	.word	0x200002ba
 800195c:	200002bb 	.word	0x200002bb
 8001960:	08008678 	.word	0x08008678
 8001964:	200002d8 	.word	0x200002d8

08001968 <UART_TX>:
void UART_TX(void)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af06      	add	r7, sp, #24
	int ret = snprintf((char*)tx_buff, sizeof(tx_buff), "HUM : %.2f\r\nTIME : %02u:%02u:%02u\r\n", t, hour, min, sec);
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <UART_TX+0x80>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fd58 	bl	8000428 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	491b      	ldr	r1, [pc, #108]	@ (80019ec <UART_TX+0x84>)
 800197e:	7809      	ldrb	r1, [r1, #0]
 8001980:	4608      	mov	r0, r1
 8001982:	491b      	ldr	r1, [pc, #108]	@ (80019f0 <UART_TX+0x88>)
 8001984:	7809      	ldrb	r1, [r1, #0]
 8001986:	460c      	mov	r4, r1
 8001988:	491a      	ldr	r1, [pc, #104]	@ (80019f4 <UART_TX+0x8c>)
 800198a:	7809      	ldrb	r1, [r1, #0]
 800198c:	9104      	str	r1, [sp, #16]
 800198e:	9403      	str	r4, [sp, #12]
 8001990:	9002      	str	r0, [sp, #8]
 8001992:	e9cd 2300 	strd	r2, r3, [sp]
 8001996:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <UART_TX+0x90>)
 8001998:	2164      	movs	r1, #100	@ 0x64
 800199a:	4818      	ldr	r0, [pc, #96]	@ (80019fc <UART_TX+0x94>)
 800199c:	f004 f84a 	bl	8005a34 <sniprintf>
 80019a0:	6078      	str	r0, [r7, #4]
	    if (ret < 0 || ret >= sizeof(tx_buff)) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db02      	blt.n	80019ae <UART_TX+0x46>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b63      	cmp	r3, #99	@ 0x63
 80019ac:	d90d      	bls.n	80019ca <UART_TX+0x62>
	        // Xử lý lỗi (chuỗi quá dài)
	        // Ví dụ: in thông báo lỗi ra debug hoặc bỏ qua
	        // Bạn cần xử lý lỗi này để tránh crash chương trình
	        const char* error_msg = "Error: Buffer too small\r\n";
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <UART_TX+0x98>)
 80019b0:	603b      	str	r3, [r7, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80019b2:	6838      	ldr	r0, [r7, #0]
 80019b4:	f7fe fbcc 	bl	8000150 <strlen>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	4810      	ldr	r0, [pc, #64]	@ (8001a04 <UART_TX+0x9c>)
 80019c4:	f003 f8ac 	bl	8004b20 <HAL_UART_Transmit>
	        return; // Dừng hàm nếu có lỗi
 80019c8:	e00a      	b.n	80019e0 <UART_TX+0x78>
	    }
	    HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), HAL_MAX_DELAY);
 80019ca:	480c      	ldr	r0, [pc, #48]	@ (80019fc <UART_TX+0x94>)
 80019cc:	f7fe fbc0 	bl	8000150 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	4908      	ldr	r1, [pc, #32]	@ (80019fc <UART_TX+0x94>)
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <UART_TX+0x9c>)
 80019dc:	f003 f8a0 	bl	8004b20 <HAL_UART_Transmit>
}
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200002c0 	.word	0x200002c0
 80019ec:	200002b9 	.word	0x200002b9
 80019f0:	200002ba 	.word	0x200002ba
 80019f4:	200002bb 	.word	0x200002bb
 80019f8:	0800868c 	.word	0x0800868c
 80019fc:	20000010 	.word	0x20000010
 8001a00:	080086b0 	.word	0x080086b0
 8001a04:	200003bc 	.word	0x200003bc

08001a08 <UART_RX>:
void UART_RX(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af02      	add	r7, sp, #8
	memset(Rx_data, 0, sizeof(Rx_data));
 8001a0e:	2232      	movs	r2, #50	@ 0x32
 8001a10:	2100      	movs	r1, #0
 8001a12:	4834      	ldr	r0, [pc, #208]	@ (8001ae4 <UART_RX+0xdc>)
 8001a14:	f004 f8d1 	bl	8005bba <memset>
//	memset(Rx_data_reel, 0, sizeof(Rx_data));
//	memset(printf_to_com, 0, sizeof(Rx_data));
	HAL_UART_Receive(&huart1, Rx_data, sizeof(Rx_data), 1000);
 8001a18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1c:	2232      	movs	r2, #50	@ 0x32
 8001a1e:	4931      	ldr	r1, [pc, #196]	@ (8001ae4 <UART_RX+0xdc>)
 8001a20:	4831      	ldr	r0, [pc, #196]	@ (8001ae8 <UART_RX+0xe0>)
 8001a22:	f003 f908 	bl	8004c36 <HAL_UART_Receive>
	rx_len=0;
 8001a26:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <UART_RX+0xe4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	801a      	strh	r2, [r3, #0]
	if(strlen(Rx_data) > 0)
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <UART_RX+0xdc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d053      	beq.n	8001adc <UART_RX+0xd4>
	{
	    if (Rx_data[0] == 'S' && Rx_data[1] == 'T')
 8001a34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <UART_RX+0xdc>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b53      	cmp	r3, #83	@ 0x53
 8001a3a:	d119      	bne.n	8001a70 <UART_RX+0x68>
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <UART_RX+0xdc>)
 8001a3e:	785b      	ldrb	r3, [r3, #1]
 8001a40:	2b54      	cmp	r3, #84	@ 0x54
 8001a42:	d115      	bne.n	8001a70 <UART_RX+0x68>
	    {
	    	char *p = &Rx_data[3];
 8001a44:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <UART_RX+0xe8>)
 8001a46:	607b      	str	r3, [r7, #4]
	    	sscanf(p,"%d%d%d", &set_hour, &set_min, &set_sec);
 8001a48:	4b2a      	ldr	r3, [pc, #168]	@ (8001af4 <UART_RX+0xec>)
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <UART_RX+0xf0>)
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001afc <UART_RX+0xf4>)
 8001a50:	492b      	ldr	r1, [pc, #172]	@ (8001b00 <UART_RX+0xf8>)
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f004 f842 	bl	8005adc <siscanf>
			//HD44780_SetCursor(0,1);
			//sprintf(LCD_send2, "Time:%02d:%02d:%02d   ", set_hour, set_min,set_sec);
			//HD44780_PrintStr(LCD_send2);
			//HAL_Delay(1000);
	    	setDS1307Time(set_hour, set_min, set_sec);
 8001a58:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <UART_RX+0xf4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <UART_RX+0xf0>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <UART_RX+0xec>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f000 f875 	bl	8001b58 <setDS1307Time>
	    {
 8001a6e:	e035      	b.n	8001adc <UART_RX+0xd4>

	    }
	    else if (Rx_data[0] == 'S' && Rx_data[1] == 'P')
 8001a70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <UART_RX+0xdc>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b53      	cmp	r3, #83	@ 0x53
 8001a76:	d118      	bne.n	8001aaa <UART_RX+0xa2>
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <UART_RX+0xdc>)
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	2b50      	cmp	r3, #80	@ 0x50
 8001a7e:	d114      	bne.n	8001aaa <UART_RX+0xa2>
	    {

	    	char *p = &Rx_data[2];
 8001a80:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <UART_RX+0xfc>)
 8001a82:	603b      	str	r3, [r7, #0]
	    	HD44780_SetCursor(0,1);
 8001a84:	2101      	movs	r1, #1
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff fda8 	bl	80015dc <HD44780_SetCursor>
	    	HD44780_PrintStr("              ");
 8001a8c:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <UART_RX+0x100>)
 8001a8e:	f7ff fe16 	bl	80016be <HD44780_PrintStr>
	    	HD44780_SetCursor(0,1);
 8001a92:	2101      	movs	r1, #1
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fda1 	bl	80015dc <HD44780_SetCursor>
	    	HD44780_PrintStr(p);
 8001a9a:	6838      	ldr	r0, [r7, #0]
 8001a9c:	f7ff fe0f 	bl	80016be <HD44780_PrintStr>
	    	HAL_Delay(3000);
 8001aa0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001aa4:	f000 fc98 	bl	80023d8 <HAL_Delay>
	    {
 8001aa8:	e018      	b.n	8001adc <UART_RX+0xd4>
	    }
	    else if (Rx_data[0] == 'G')
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <UART_RX+0xdc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b47      	cmp	r3, #71	@ 0x47
 8001ab0:	d102      	bne.n	8001ab8 <UART_RX+0xb0>
	    {
	    	UART_TX();
 8001ab2:	f7ff ff59 	bl	8001968 <UART_TX>
	    	HAL_Delay(3000);
	    }

	}

}
 8001ab6:	e011      	b.n	8001adc <UART_RX+0xd4>
	    else if(strlen(Rx_data)>1)
 8001ab8:	480a      	ldr	r0, [pc, #40]	@ (8001ae4 <UART_RX+0xdc>)
 8001aba:	f7fe fb49 	bl	8000150 <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d90b      	bls.n	8001adc <UART_RX+0xd4>
	    	HD44780_SetCursor(0,1);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff fd88 	bl	80015dc <HD44780_SetCursor>
	    	HD44780_PrintStr("Non_true_form");
 8001acc:	480f      	ldr	r0, [pc, #60]	@ (8001b0c <UART_RX+0x104>)
 8001ace:	f7ff fdf6 	bl	80016be <HD44780_PrintStr>
	    	HAL_Delay(3000);
 8001ad2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ad6:	f000 fc7f 	bl	80023d8 <HAL_Delay>
}
 8001ada:	e7ff      	b.n	8001adc <UART_RX+0xd4>
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200002ec 	.word	0x200002ec
 8001ae8:	200003bc 	.word	0x200003bc
 8001aec:	2000031e 	.word	0x2000031e
 8001af0:	200002ef 	.word	0x200002ef
 8001af4:	200002be 	.word	0x200002be
 8001af8:	200002bd 	.word	0x200002bd
 8001afc:	200002bc 	.word	0x200002bc
 8001b00:	080086cc 	.word	0x080086cc
 8001b04:	200002ee 	.word	0x200002ee
 8001b08:	080086d4 	.word	0x080086d4
 8001b0c:	080086e4 	.word	0x080086e4

08001b10 <decToBcd>:

uint8_t decToBcd(uint8_t val) {
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  return ((val / 10) << 4) | (val % 10);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <decToBcd+0x44>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	08db      	lsrs	r3, r3, #3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	b258      	sxtb	r0, r3
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <decToBcd+0x44>)
 8001b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b32:	08d9      	lsrs	r1, r3, #3
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	4303      	orrs	r3, r0
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	cccccccd 	.word	0xcccccccd

08001b58 <setDS1307Time>:

uint8_t bcdToDec(uint8_t val) {
  return ((val >> 4) * 10) + (val & 0x0F);
}

void setDS1307Time(uint8_t set_hour, uint8_t set_min, uint8_t set_sec) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	460b      	mov	r3, r1
 8001b64:	71bb      	strb	r3, [r7, #6]
 8001b66:	4613      	mov	r3, r2
 8001b68:	717b      	strb	r3, [r7, #5]
  uint8_t data[3];

  data[0] = decToBcd(set_sec); // Giây
 8001b6a:	797b      	ldrb	r3, [r7, #5]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ffcf 	bl	8001b10 <decToBcd>
 8001b72:	4603      	mov	r3, r0
 8001b74:	733b      	strb	r3, [r7, #12]
  data[1] = decToBcd(set_min); // Phút
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ffc9 	bl	8001b10 <decToBcd>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	737b      	strb	r3, [r7, #13]
  data[2] = decToBcd(set_hour); // Giờ
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ffc3 	bl	8001b10 <decToBcd>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	73bb      	strb	r3, [r7, #14]

  // Ghi dữ liệu vào DS1307
  HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x00, 1, data, 3, 1000); // Địa chỉ DS1307 là 0xD0
 8001b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	2303      	movs	r3, #3
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	21d0      	movs	r1, #208	@ 0xd0
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <setDS1307Time+0x5c>)
 8001ba6:	f001 fb81 	bl	80032ac <HAL_I2C_Mem_Write>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000320 	.word	0x20000320

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bbe:	f000 fba9 	bl	8002314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc2:	f000 f851 	bl	8001c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc6:	f000 f93d 	bl	8001e44 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001bca:	f000 f8c1 	bl	8001d50 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001bce:	f000 f90f 	bl	8001df0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001bd2:	f000 f88f 	bl	8001cf4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001bd6:	4821      	ldr	r0, [pc, #132]	@ (8001c5c <main+0xa4>)
 8001bd8:	f002 fcde 	bl	8004598 <HAL_TIM_Base_Start>
  HD44780_Init(2);
 8001bdc:	2002      	movs	r0, #2
 8001bde:	f7ff fc63 	bl	80014a8 <HD44780_Init>
  DS1307_Init(&hi2c1);
 8001be2:	481f      	ldr	r0, [pc, #124]	@ (8001c60 <main+0xa8>)
 8001be4:	f7ff fbac 	bl	8001340 <DS1307_Init>

  uint32_t current_time = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
    {
//	  const char* test_msg = "Hello World!\r\n";
//	  HAL_UART_Transmit(&huart1, (uint8_t*)test_msg, strlen(test_msg), HAL_MAX_DELAY);
	  current_time = HAL_GetTick();  // Lấy thời gian hiện tại (ms)
 8001bec:	f000 fbea 	bl	80023c4 <HAL_GetTick>
 8001bf0:	6038      	str	r0, [r7, #0]

	         // Duyệt qua bảng lịch
	         for (uint8_t i = 0; i < NUM_TASKS; i++) {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	e02b      	b.n	8001c50 <main+0x98>
	             if (current_time >= task_list[i].next_run) {
 8001bf8:	79fa      	ldrb	r2, [r7, #7]
 8001bfa:	491a      	ldr	r1, [pc, #104]	@ (8001c64 <main+0xac>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3308      	adds	r3, #8
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d31c      	bcc.n	8001c4a <main+0x92>
	                 // Gọi hàm task
	                 task_list[i].task_function();
 8001c10:	79fa      	ldrb	r2, [r7, #7]
 8001c12:	4914      	ldr	r1, [pc, #80]	@ (8001c64 <main+0xac>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4798      	blx	r3

	                 // Cập nhật thời gian thực thi tiếp theo
	                 task_list[i].next_run = current_time + task_list[i].period;
 8001c22:	79fa      	ldrb	r2, [r7, #7]
 8001c24:	490f      	ldr	r1, [pc, #60]	@ (8001c64 <main+0xac>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3304      	adds	r3, #4
 8001c32:	6819      	ldr	r1, [r3, #0]
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4419      	add	r1, r3
 8001c3a:	480a      	ldr	r0, [pc, #40]	@ (8001c64 <main+0xac>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4403      	add	r3, r0
 8001c46:	3308      	adds	r3, #8
 8001c48:	6019      	str	r1, [r3, #0]
	         for (uint8_t i = 0; i < NUM_TASKS; i++) {
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	2204      	movs	r2, #4
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d3cf      	bcc.n	8001bf8 <main+0x40>
	  current_time = HAL_GetTick();  // Lấy thời gian hiện tại (ms)
 8001c58:	e7c8      	b.n	8001bec <main+0x34>
 8001c5a:	bf00      	nop
 8001c5c:	20000374 	.word	0x20000374
 8001c60:	20000320 	.word	0x20000320
 8001c64:	20000074 	.word	0x20000074

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b090      	sub	sp, #64	@ 0x40
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	2228      	movs	r2, #40	@ 0x28
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 ff9f 	bl	8005bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ca6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cac:	f107 0318 	add.w	r3, r7, #24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 f811 	bl	8003cd8 <HAL_RCC_OscConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001cbc:	f000 f930 	bl	8001f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2102      	movs	r1, #2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fa7e 	bl	80041dc <HAL_RCC_ClockConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ce6:	f000 f91b 	bl	8001f20 <Error_Handler>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3740      	adds	r7, #64	@ 0x40
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001cfa:	4a13      	ldr	r2, [pc, #76]	@ (8001d48 <MX_I2C1_Init+0x54>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d00:	4a12      	ldr	r2, [pc, #72]	@ (8001d4c <MX_I2C1_Init+0x58>)
 8001d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d30:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <MX_I2C1_Init+0x50>)
 8001d32:	f000 fe0d 	bl	8002950 <HAL_I2C_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d3c:	f000 f8f0 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000320 	.word	0x20000320
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	000186a0 	.word	0x000186a0

08001d50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <MX_TIM1_Init+0x9c>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d74:	2247      	movs	r2, #71	@ 0x47
 8001d76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d98:	4813      	ldr	r0, [pc, #76]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001d9a:	f002 fbad 	bl	80044f8 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001da4:	f000 f8bc 	bl	8001f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	4619      	mov	r1, r3
 8001db4:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001db6:	f002 fc39 	bl	800462c <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001dc0:	f000 f8ae 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_TIM1_Init+0x98>)
 8001dd2:	f002 fdf7 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ddc:	f000 f8a0 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000374 	.word	0x20000374
 8001dec:	40012c00 	.word	0x40012c00

08001df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <MX_USART1_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e28:	f002 fe2a 	bl	8004a80 <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f000 f875 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200003bc 	.word	0x200003bc
 8001e40:	40013800 	.word	0x40013800

08001e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	f107 0310 	add.w	r3, r7, #16
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e58:	4b2e      	ldr	r3, [pc, #184]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e70:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <MX_GPIO_Init+0xd0>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ebe:	4816      	ldr	r0, [pc, #88]	@ (8001f18 <MX_GPIO_Init+0xd4>)
 8001ec0:	f000 fd2d 	bl	800291e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eca:	4814      	ldr	r0, [pc, #80]	@ (8001f1c <MX_GPIO_Init+0xd8>)
 8001ecc:	f000 fd27 	bl	800291e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ed0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480b      	ldr	r0, [pc, #44]	@ (8001f18 <MX_GPIO_Init+0xd4>)
 8001eea:	f000 fb7d 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	4619      	mov	r1, r3
 8001f06:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <MX_GPIO_Init+0xd8>)
 8001f08:	f000 fb6e 	bl	80025e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	40010c00 	.word	0x40010c00

08001f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <Error_Handler+0x8>

08001f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <HAL_MspInit+0x5c>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <HAL_MspInit+0x5c>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6193      	str	r3, [r2, #24]
 8001f3e:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_MspInit+0x5c>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <HAL_MspInit+0x5c>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f88 <HAL_MspInit+0x5c>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <HAL_MspInit+0x5c>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_MspInit+0x60>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <HAL_MspInit+0x60>)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000

08001f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a15      	ldr	r2, [pc, #84]	@ (8002000 <HAL_I2C_MspInit+0x70>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d123      	bne.n	8001ff8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <HAL_I2C_MspInit+0x74>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a13      	ldr	r2, [pc, #76]	@ (8002004 <HAL_I2C_MspInit+0x74>)
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_I2C_MspInit+0x74>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc8:	23c0      	movs	r3, #192	@ 0xc0
 8001fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fcc:	2312      	movs	r3, #18
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480b      	ldr	r0, [pc, #44]	@ (8002008 <HAL_I2C_MspInit+0x78>)
 8001fdc:	f000 fb04 	bl	80025e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_I2C_MspInit+0x74>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <HAL_I2C_MspInit+0x74>)
 8001fe6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fea:	61d3      	str	r3, [r2, #28]
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_I2C_MspInit+0x74>)
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40005400 	.word	0x40005400
 8002004:	40021000 	.word	0x40021000
 8002008:	40010c00 	.word	0x40010c00

0800200c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <HAL_TIM_Base_MspInit+0x34>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10b      	bne.n	8002036 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_TIM_Base_MspInit+0x38>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a08      	ldr	r2, [pc, #32]	@ (8002044 <HAL_TIM_Base_MspInit+0x38>)
 8002024:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002028:	6193      	str	r3, [r2, #24]
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_TIM_Base_MspInit+0x38>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_UART_MspInit+0x8c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d131      	bne.n	80020cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_UART_MspInit+0x90>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a1a      	ldr	r2, [pc, #104]	@ (80020d8 <HAL_UART_MspInit+0x90>)
 800206e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_UART_MspInit+0x90>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_UART_MspInit+0x90>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4a14      	ldr	r2, [pc, #80]	@ (80020d8 <HAL_UART_MspInit+0x90>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6193      	str	r3, [r2, #24]
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_UART_MspInit+0x90>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	4619      	mov	r1, r3
 80020ac:	480b      	ldr	r0, [pc, #44]	@ (80020dc <HAL_UART_MspInit+0x94>)
 80020ae:	f000 fa9b 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	@ (80020dc <HAL_UART_MspInit+0x94>)
 80020c8:	f000 fa8e 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80020cc:	bf00      	nop
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010800 	.word	0x40010800

080020e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <NMI_Handler+0x4>

080020e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <MemManage_Handler+0x4>

080020f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <UsageFault_Handler+0x4>

08002108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 f936 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <_kill>:

int _kill(int pid, int sig)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002150:	f003 fd86 	bl	8005c60 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	2216      	movs	r2, #22
 8002158:	601a      	str	r2, [r3, #0]
  return -1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_exit>:

void _exit (int status)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800216e:	f04f 31ff 	mov.w	r1, #4294967295
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffe7 	bl	8002146 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <_exit+0x12>

0800217c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e00a      	b.n	80021a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800218e:	f3af 8000 	nop.w
 8002192:	4601      	mov	r1, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	60ba      	str	r2, [r7, #8]
 800219a:	b2ca      	uxtb	r2, r1
 800219c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf0      	blt.n	800218e <_read+0x12>
  }

  return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e009      	b.n	80021dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dbf1      	blt.n	80021c8 <_write+0x12>
  }
  return len;
 80021e4:	687b      	ldr	r3, [r7, #4]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_close>:

int _close(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002214:	605a      	str	r2, [r3, #4]
  return 0;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <_isatty>:

int _isatty(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
	...

08002250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002264:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002280:	f003 fcee 	bl	8005c60 <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002290:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002296:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	@ (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20005000 	.word	0x20005000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	20000404 	.word	0x20000404
 80022b8:	20000558 	.word	0x20000558

080022bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c8:	f7ff fff8 	bl	80022bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022cc:	480b      	ldr	r0, [pc, #44]	@ (80022fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022ce:	490c      	ldr	r1, [pc, #48]	@ (8002300 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002304 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d4:	e002      	b.n	80022dc <LoopCopyDataInit>

080022d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022da:	3304      	adds	r3, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e0:	d3f9      	bcc.n	80022d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e2:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022e4:	4c09      	ldr	r4, [pc, #36]	@ (800230c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e8:	e001      	b.n	80022ee <LoopFillZerobss>

080022ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ec:	3204      	adds	r2, #4

080022ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f0:	d3fb      	bcc.n	80022ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f2:	f003 fcbb 	bl	8005c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022f6:	f7ff fc5f 	bl	8001bb8 <main>
  bx lr
 80022fa:	4770      	bx	lr
  ldr r0, =_sdata
 80022fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002300:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002304:	08008ac4 	.word	0x08008ac4
  ldr r2, =_sbss
 8002308:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800230c:	20000558 	.word	0x20000558

08002310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002310:	e7fe      	b.n	8002310 <ADC1_2_IRQHandler>
	...

08002314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <HAL_Init+0x28>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	@ (800233c <HAL_Init+0x28>)
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f92b 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fdfc 	bl	8001f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f935 	bl	80025ce <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 f90b 	bl	8002596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	@ (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200000a4 	.word	0x200000a4
 8002398:	200000ac 	.word	0x200000ac
 800239c:	200000a8 	.word	0x200000a8

080023a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_IncTick+0x1c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_IncTick+0x20>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a03      	ldr	r2, [pc, #12]	@ (80023c0 <HAL_IncTick+0x20>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	200000ac 	.word	0x200000ac
 80023c0:	20000408 	.word	0x20000408

080023c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b02      	ldr	r3, [pc, #8]	@ (80023d4 <HAL_GetTick+0x10>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000408 	.word	0x20000408

080023d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_GetTick>
 80023e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d005      	beq.n	80023fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f2:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_Delay+0x44>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fe:	bf00      	nop
 8002400:	f7ff ffe0 	bl	80023c4 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d8f7      	bhi.n	8002400 <HAL_Delay+0x28>
  {
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200000ac 	.word	0x200000ac

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800244c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	60d3      	str	r3, [r2, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	@ (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	@ 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff90 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	@ (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff49 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff5e 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff90 	bl	80024d8 <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff5f 	bl	8002484 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffb0 	bl	800253c <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b08b      	sub	sp, #44	@ 0x2c
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025f6:	2300      	movs	r3, #0
 80025f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fa:	e169      	b.n	80028d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025fc:	2201      	movs	r2, #1
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8158 	bne.w	80028ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a9a      	ldr	r2, [pc, #616]	@ (8002888 <HAL_GPIO_Init+0x2a0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d05e      	beq.n	80026e2 <HAL_GPIO_Init+0xfa>
 8002624:	4a98      	ldr	r2, [pc, #608]	@ (8002888 <HAL_GPIO_Init+0x2a0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d875      	bhi.n	8002716 <HAL_GPIO_Init+0x12e>
 800262a:	4a98      	ldr	r2, [pc, #608]	@ (800288c <HAL_GPIO_Init+0x2a4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d058      	beq.n	80026e2 <HAL_GPIO_Init+0xfa>
 8002630:	4a96      	ldr	r2, [pc, #600]	@ (800288c <HAL_GPIO_Init+0x2a4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d86f      	bhi.n	8002716 <HAL_GPIO_Init+0x12e>
 8002636:	4a96      	ldr	r2, [pc, #600]	@ (8002890 <HAL_GPIO_Init+0x2a8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d052      	beq.n	80026e2 <HAL_GPIO_Init+0xfa>
 800263c:	4a94      	ldr	r2, [pc, #592]	@ (8002890 <HAL_GPIO_Init+0x2a8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d869      	bhi.n	8002716 <HAL_GPIO_Init+0x12e>
 8002642:	4a94      	ldr	r2, [pc, #592]	@ (8002894 <HAL_GPIO_Init+0x2ac>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d04c      	beq.n	80026e2 <HAL_GPIO_Init+0xfa>
 8002648:	4a92      	ldr	r2, [pc, #584]	@ (8002894 <HAL_GPIO_Init+0x2ac>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d863      	bhi.n	8002716 <HAL_GPIO_Init+0x12e>
 800264e:	4a92      	ldr	r2, [pc, #584]	@ (8002898 <HAL_GPIO_Init+0x2b0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d046      	beq.n	80026e2 <HAL_GPIO_Init+0xfa>
 8002654:	4a90      	ldr	r2, [pc, #576]	@ (8002898 <HAL_GPIO_Init+0x2b0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d85d      	bhi.n	8002716 <HAL_GPIO_Init+0x12e>
 800265a:	2b12      	cmp	r3, #18
 800265c:	d82a      	bhi.n	80026b4 <HAL_GPIO_Init+0xcc>
 800265e:	2b12      	cmp	r3, #18
 8002660:	d859      	bhi.n	8002716 <HAL_GPIO_Init+0x12e>
 8002662:	a201      	add	r2, pc, #4	@ (adr r2, 8002668 <HAL_GPIO_Init+0x80>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	080026e3 	.word	0x080026e3
 800266c:	080026bd 	.word	0x080026bd
 8002670:	080026cf 	.word	0x080026cf
 8002674:	08002711 	.word	0x08002711
 8002678:	08002717 	.word	0x08002717
 800267c:	08002717 	.word	0x08002717
 8002680:	08002717 	.word	0x08002717
 8002684:	08002717 	.word	0x08002717
 8002688:	08002717 	.word	0x08002717
 800268c:	08002717 	.word	0x08002717
 8002690:	08002717 	.word	0x08002717
 8002694:	08002717 	.word	0x08002717
 8002698:	08002717 	.word	0x08002717
 800269c:	08002717 	.word	0x08002717
 80026a0:	08002717 	.word	0x08002717
 80026a4:	08002717 	.word	0x08002717
 80026a8:	08002717 	.word	0x08002717
 80026ac:	080026c5 	.word	0x080026c5
 80026b0:	080026d9 	.word	0x080026d9
 80026b4:	4a79      	ldr	r2, [pc, #484]	@ (800289c <HAL_GPIO_Init+0x2b4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ba:	e02c      	b.n	8002716 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	623b      	str	r3, [r7, #32]
          break;
 80026c2:	e029      	b.n	8002718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	3304      	adds	r3, #4
 80026ca:	623b      	str	r3, [r7, #32]
          break;
 80026cc:	e024      	b.n	8002718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	3308      	adds	r3, #8
 80026d4:	623b      	str	r3, [r7, #32]
          break;
 80026d6:	e01f      	b.n	8002718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	330c      	adds	r3, #12
 80026de:	623b      	str	r3, [r7, #32]
          break;
 80026e0:	e01a      	b.n	8002718 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ea:	2304      	movs	r3, #4
 80026ec:	623b      	str	r3, [r7, #32]
          break;
 80026ee:	e013      	b.n	8002718 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f8:	2308      	movs	r3, #8
 80026fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	611a      	str	r2, [r3, #16]
          break;
 8002702:	e009      	b.n	8002718 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002704:	2308      	movs	r3, #8
 8002706:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	615a      	str	r2, [r3, #20]
          break;
 800270e:	e003      	b.n	8002718 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002710:	2300      	movs	r3, #0
 8002712:	623b      	str	r3, [r7, #32]
          break;
 8002714:	e000      	b.n	8002718 <HAL_GPIO_Init+0x130>
          break;
 8002716:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2bff      	cmp	r3, #255	@ 0xff
 800271c:	d801      	bhi.n	8002722 <HAL_GPIO_Init+0x13a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	e001      	b.n	8002726 <HAL_GPIO_Init+0x13e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2bff      	cmp	r3, #255	@ 0xff
 800272c:	d802      	bhi.n	8002734 <HAL_GPIO_Init+0x14c>
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	e002      	b.n	800273a <HAL_GPIO_Init+0x152>
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	3b08      	subs	r3, #8
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	210f      	movs	r1, #15
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	401a      	ands	r2, r3
 800274c:	6a39      	ldr	r1, [r7, #32]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	431a      	orrs	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80b1 	beq.w	80028ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002768:	4b4d      	ldr	r3, [pc, #308]	@ (80028a0 <HAL_GPIO_Init+0x2b8>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	4a4c      	ldr	r2, [pc, #304]	@ (80028a0 <HAL_GPIO_Init+0x2b8>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6193      	str	r3, [r2, #24]
 8002774:	4b4a      	ldr	r3, [pc, #296]	@ (80028a0 <HAL_GPIO_Init+0x2b8>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002780:	4a48      	ldr	r2, [pc, #288]	@ (80028a4 <HAL_GPIO_Init+0x2bc>)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a40      	ldr	r2, [pc, #256]	@ (80028a8 <HAL_GPIO_Init+0x2c0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_GPIO_Init+0x1ec>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a3f      	ldr	r2, [pc, #252]	@ (80028ac <HAL_GPIO_Init+0x2c4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00d      	beq.n	80027d0 <HAL_GPIO_Init+0x1e8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a3e      	ldr	r2, [pc, #248]	@ (80028b0 <HAL_GPIO_Init+0x2c8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d007      	beq.n	80027cc <HAL_GPIO_Init+0x1e4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a3d      	ldr	r2, [pc, #244]	@ (80028b4 <HAL_GPIO_Init+0x2cc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_GPIO_Init+0x1e0>
 80027c4:	2303      	movs	r3, #3
 80027c6:	e006      	b.n	80027d6 <HAL_GPIO_Init+0x1ee>
 80027c8:	2304      	movs	r3, #4
 80027ca:	e004      	b.n	80027d6 <HAL_GPIO_Init+0x1ee>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e002      	b.n	80027d6 <HAL_GPIO_Init+0x1ee>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_GPIO_Init+0x1ee>
 80027d4:	2300      	movs	r3, #0
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	f002 0203 	and.w	r2, r2, #3
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	4093      	lsls	r3, r2
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027e6:	492f      	ldr	r1, [pc, #188]	@ (80028a4 <HAL_GPIO_Init+0x2bc>)
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002800:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	492c      	ldr	r1, [pc, #176]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800280e:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	43db      	mvns	r3, r3
 8002816:	4928      	ldr	r1, [pc, #160]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002818:	4013      	ands	r3, r2
 800281a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002828:	4b23      	ldr	r3, [pc, #140]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	4922      	ldr	r1, [pc, #136]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	60cb      	str	r3, [r1, #12]
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002836:	4b20      	ldr	r3, [pc, #128]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	43db      	mvns	r3, r3
 800283e:	491e      	ldr	r1, [pc, #120]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002840:	4013      	ands	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002850:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4918      	ldr	r1, [pc, #96]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800285e:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	43db      	mvns	r3, r3
 8002866:	4914      	ldr	r1, [pc, #80]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002868:	4013      	ands	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d021      	beq.n	80028bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002878:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	490e      	ldr	r1, [pc, #56]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e021      	b.n	80028ca <HAL_GPIO_Init+0x2e2>
 8002886:	bf00      	nop
 8002888:	10320000 	.word	0x10320000
 800288c:	10310000 	.word	0x10310000
 8002890:	10220000 	.word	0x10220000
 8002894:	10210000 	.word	0x10210000
 8002898:	10120000 	.word	0x10120000
 800289c:	10110000 	.word	0x10110000
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40010800 	.word	0x40010800
 80028ac:	40010c00 	.word	0x40010c00
 80028b0:	40011000 	.word	0x40011000
 80028b4:	40011400 	.word	0x40011400
 80028b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_GPIO_Init+0x304>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	4909      	ldr	r1, [pc, #36]	@ (80028ec <HAL_GPIO_Init+0x304>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	3301      	adds	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f47f ae8e 	bne.w	80025fc <HAL_GPIO_Init+0x14>
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	372c      	adds	r7, #44	@ 0x2c
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e001      	b.n	8002912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	807b      	strh	r3, [r7, #2]
 800292a:	4613      	mov	r3, r2
 800292c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800292e:	787b      	ldrb	r3, [r7, #1]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800293a:	e003      	b.n	8002944 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800293c:	887b      	ldrh	r3, [r7, #2]
 800293e:	041a      	lsls	r2, r3, #16
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
	...

08002950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e12b      	b.n	8002bba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fb0a 	bl	8001f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	@ 0x24
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029b4:	f001 fd5a 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 80029b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a81      	ldr	r2, [pc, #516]	@ (8002bc4 <HAL_I2C_Init+0x274>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d807      	bhi.n	80029d4 <HAL_I2C_Init+0x84>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a80      	ldr	r2, [pc, #512]	@ (8002bc8 <HAL_I2C_Init+0x278>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	bf94      	ite	ls
 80029cc:	2301      	movls	r3, #1
 80029ce:	2300      	movhi	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e006      	b.n	80029e2 <HAL_I2C_Init+0x92>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a7d      	ldr	r2, [pc, #500]	@ (8002bcc <HAL_I2C_Init+0x27c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	bf94      	ite	ls
 80029dc:	2301      	movls	r3, #1
 80029de:	2300      	movhi	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0e7      	b.n	8002bba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a78      	ldr	r2, [pc, #480]	@ (8002bd0 <HAL_I2C_Init+0x280>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9b      	lsrs	r3, r3, #18
 80029f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a6a      	ldr	r2, [pc, #424]	@ (8002bc4 <HAL_I2C_Init+0x274>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d802      	bhi.n	8002a24 <HAL_I2C_Init+0xd4>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3301      	adds	r3, #1
 8002a22:	e009      	b.n	8002a38 <HAL_I2C_Init+0xe8>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	4a69      	ldr	r2, [pc, #420]	@ (8002bd4 <HAL_I2C_Init+0x284>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	3301      	adds	r3, #1
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	495c      	ldr	r1, [pc, #368]	@ (8002bc4 <HAL_I2C_Init+0x274>)
 8002a54:	428b      	cmp	r3, r1
 8002a56:	d819      	bhi.n	8002a8c <HAL_I2C_Init+0x13c>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e59      	subs	r1, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a66:	1c59      	adds	r1, r3, #1
 8002a68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_I2C_Init+0x138>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1e59      	subs	r1, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a86:	e051      	b.n	8002b2c <HAL_I2C_Init+0x1dc>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	e04f      	b.n	8002b2c <HAL_I2C_Init+0x1dc>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d111      	bne.n	8002ab8 <HAL_I2C_Init+0x168>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e012      	b.n	8002ade <HAL_I2C_Init+0x18e>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e58      	subs	r0, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	0099      	lsls	r1, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Init+0x196>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e022      	b.n	8002b2c <HAL_I2C_Init+0x1dc>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10e      	bne.n	8002b0c <HAL_I2C_Init+0x1bc>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1e58      	subs	r0, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6859      	ldr	r1, [r3, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	440b      	add	r3, r1
 8002afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b0a:	e00f      	b.n	8002b2c <HAL_I2C_Init+0x1dc>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e58      	subs	r0, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	0099      	lsls	r1, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6809      	ldr	r1, [r1, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6911      	ldr	r1, [r2, #16]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68d2      	ldr	r2, [r2, #12]
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	000186a0 	.word	0x000186a0
 8002bc8:	001e847f 	.word	0x001e847f
 8002bcc:	003d08ff 	.word	0x003d08ff
 8002bd0:	431bde83 	.word	0x431bde83
 8002bd4:	10624dd3 	.word	0x10624dd3

08002bd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	461a      	mov	r2, r3
 8002be4:	460b      	mov	r3, r1
 8002be6:	817b      	strh	r3, [r7, #10]
 8002be8:	4613      	mov	r3, r2
 8002bea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff fbea 	bl	80023c4 <HAL_GetTick>
 8002bf0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	f040 80e0 	bne.w	8002dc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2319      	movs	r3, #25
 8002c06:	2201      	movs	r2, #1
 8002c08:	4970      	ldr	r1, [pc, #448]	@ (8002dcc <HAL_I2C_Master_Transmit+0x1f4>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fe2e 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
 8002c18:	e0d3      	b.n	8002dc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_I2C_Master_Transmit+0x50>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0cc      	b.n	8002dc2 <HAL_I2C_Master_Transmit+0x1ea>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d007      	beq.n	8002c4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2221      	movs	r2, #33	@ 0x21
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	893a      	ldrh	r2, [r7, #8]
 8002c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a50      	ldr	r2, [pc, #320]	@ (8002dd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c90:	8979      	ldrh	r1, [r7, #10]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fc02 	bl	80034a0 <I2C_MasterRequestWrite>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e08d      	b.n	8002dc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cbc:	e066      	b.n	8002d8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	6a39      	ldr	r1, [r7, #32]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 feec 	bl	8003aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d107      	bne.n	8002ce6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e06b      	b.n	8002dc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d11b      	bne.n	8002d60 <HAL_I2C_Master_Transmit+0x188>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d017      	beq.n	8002d60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	6a39      	ldr	r1, [r7, #32]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fee3 	bl	8003b30 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d107      	bne.n	8002d88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e01a      	b.n	8002dc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d194      	bne.n	8002cbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e000      	b.n	8002dc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	00100002 	.word	0x00100002
 8002dd0:	ffff0000 	.word	0xffff0000

08002dd4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08c      	sub	sp, #48	@ 0x30
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	461a      	mov	r2, r3
 8002de0:	460b      	mov	r3, r1
 8002de2:	817b      	strh	r3, [r7, #10]
 8002de4:	4613      	mov	r3, r2
 8002de6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff faea 	bl	80023c4 <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	f040 824b 	bne.w	8003296 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2319      	movs	r3, #25
 8002e06:	2201      	movs	r2, #1
 8002e08:	497f      	ldr	r1, [pc, #508]	@ (8003008 <HAL_I2C_Master_Receive+0x234>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fd2e 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
 8002e18:	e23e      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_I2C_Master_Receive+0x54>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e237      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d007      	beq.n	8002e4e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2222      	movs	r2, #34	@ 0x22
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2210      	movs	r2, #16
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	893a      	ldrh	r2, [r7, #8]
 8002e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a5f      	ldr	r2, [pc, #380]	@ (800300c <HAL_I2C_Master_Receive+0x238>)
 8002e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e90:	8979      	ldrh	r1, [r7, #10]
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fb84 	bl	80035a4 <I2C_MasterRequestRead>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e1f8      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d113      	bne.n	8002ed6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e1cc      	b.n	8003270 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d11e      	bne.n	8002f1c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eee:	b672      	cpsid	i
}
 8002ef0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f18:	b662      	cpsie	i
}
 8002f1a:	e035      	b.n	8002f88 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d11e      	bne.n	8002f62 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f34:	b672      	cpsid	i
}
 8002f36:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f5e:	b662      	cpsie	i
}
 8002f60:	e012      	b.n	8002f88 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f88:	e172      	b.n	8003270 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	f200 811f 	bhi.w	80031d2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d123      	bne.n	8002fe4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fe0d 	bl	8003bc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e173      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fe2:	e145      	b.n	8003270 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d152      	bne.n	8003092 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	4906      	ldr	r1, [pc, #24]	@ (8003010 <HAL_I2C_Master_Receive+0x23c>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fc38 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e148      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
 8003006:	bf00      	nop
 8003008:	00100002 	.word	0x00100002
 800300c:	ffff0000 	.word	0xffff0000
 8003010:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003014:	b672      	cpsid	i
}
 8003016:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800305a:	b662      	cpsie	i
}
 800305c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003090:	e0ee      	b.n	8003270 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003098:	2200      	movs	r2, #0
 800309a:	4981      	ldr	r1, [pc, #516]	@ (80032a0 <HAL_I2C_Master_Receive+0x4cc>)
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fbe5 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0f5      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030bc:	b672      	cpsid	i
}
 80030be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030f2:	4b6c      	ldr	r3, [pc, #432]	@ (80032a4 <HAL_I2C_Master_Receive+0x4d0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	08db      	lsrs	r3, r3, #3
 80030f8:	4a6b      	ldr	r2, [pc, #428]	@ (80032a8 <HAL_I2C_Master_Receive+0x4d4>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0a1a      	lsrs	r2, r3, #8
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00da      	lsls	r2, r3, #3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	3b01      	subs	r3, #1
 8003110:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d118      	bne.n	800314a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800313a:	b662      	cpsie	i
}
 800313c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0a6      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b04      	cmp	r3, #4
 8003156:	d1d9      	bne.n	800310c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800319a:	b662      	cpsie	i
}
 800319c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031d0:	e04e      	b.n	8003270 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fcf2 	bl	8003bc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e058      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b04      	cmp	r3, #4
 8003224:	d124      	bne.n	8003270 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	2b03      	cmp	r3, #3
 800322c:	d107      	bne.n	800323e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	f47f ae88 	bne.w	8002f8a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e000      	b.n	8003298 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003296:	2302      	movs	r3, #2
  }
}
 8003298:	4618      	mov	r0, r3
 800329a:	3728      	adds	r7, #40	@ 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	00010004 	.word	0x00010004
 80032a4:	200000a4 	.word	0x200000a4
 80032a8:	14f8b589 	.word	0x14f8b589

080032ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	817b      	strh	r3, [r7, #10]
 80032be:	460b      	mov	r3, r1
 80032c0:	813b      	strh	r3, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032c6:	f7ff f87d 	bl	80023c4 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	f040 80d9 	bne.w	800348c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2319      	movs	r3, #25
 80032e0:	2201      	movs	r2, #1
 80032e2:	496d      	ldr	r1, [pc, #436]	@ (8003498 <HAL_I2C_Mem_Write+0x1ec>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fac1 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0cc      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_Mem_Write+0x56>
 80032fe:	2302      	movs	r3, #2
 8003300:	e0c5      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d007      	beq.n	8003328 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2221      	movs	r2, #33	@ 0x21
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2240      	movs	r2, #64	@ 0x40
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a3a      	ldr	r2, [r7, #32]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a4d      	ldr	r2, [pc, #308]	@ (800349c <HAL_I2C_Mem_Write+0x1f0>)
 8003368:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800336a:	88f8      	ldrh	r0, [r7, #6]
 800336c:	893a      	ldrh	r2, [r7, #8]
 800336e:	8979      	ldrh	r1, [r7, #10]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4603      	mov	r3, r0
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f9e0 	bl	8003740 <I2C_RequestMemoryWrite>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d052      	beq.n	800342c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e081      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fb86 	bl	8003aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d11b      	bne.n	800342c <HAL_I2C_Mem_Write+0x180>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d017      	beq.n	800342c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1aa      	bne.n	800338a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fb79 	bl	8003b30 <I2C_WaitOnBTFFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	2b04      	cmp	r3, #4
 800344a:	d107      	bne.n	800345c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e016      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	00100002 	.word	0x00100002
 800349c:	ffff0000 	.word	0xffff0000

080034a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d006      	beq.n	80034ca <I2C_MasterRequestWrite+0x2a>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d003      	beq.n	80034ca <I2C_MasterRequestWrite+0x2a>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034c8:	d108      	bne.n	80034dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e00b      	b.n	80034f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e0:	2b12      	cmp	r3, #18
 80034e2:	d107      	bne.n	80034f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f9b3 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800351a:	d103      	bne.n	8003524 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e035      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003530:	d108      	bne.n	8003544 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	e01b      	b.n	800357c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	11db      	asrs	r3, r3, #7
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f063 030f 	orn	r3, r3, #15
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	490e      	ldr	r1, [pc, #56]	@ (800359c <I2C_MasterRequestWrite+0xfc>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f9fc 	bl	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e010      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4907      	ldr	r1, [pc, #28]	@ (80035a0 <I2C_MasterRequestWrite+0x100>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f9ec 	bl	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010008 	.word	0x00010008
 80035a0:	00010002 	.word	0x00010002

080035a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	460b      	mov	r3, r1
 80035b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d006      	beq.n	80035de <I2C_MasterRequestRead+0x3a>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d003      	beq.n	80035de <I2C_MasterRequestRead+0x3a>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035dc:	d108      	bne.n	80035f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e00b      	b.n	8003608 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	2b11      	cmp	r3, #17
 80035f6:	d107      	bne.n	8003608 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f929 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800362e:	d103      	bne.n	8003638 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e079      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003644:	d108      	bne.n	8003658 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003646:	897b      	ldrh	r3, [r7, #10]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]
 8003656:	e05f      	b.n	8003718 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003658:	897b      	ldrh	r3, [r7, #10]
 800365a:	11db      	asrs	r3, r3, #7
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 0306 	and.w	r3, r3, #6
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f063 030f 	orn	r3, r3, #15
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4930      	ldr	r1, [pc, #192]	@ (8003738 <I2C_MasterRequestRead+0x194>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f972 	bl	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e054      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4929      	ldr	r1, [pc, #164]	@ (800373c <I2C_MasterRequestRead+0x198>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f962 	bl	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e044      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f8c7 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036f2:	d103      	bne.n	80036fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e017      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003700:	897b      	ldrh	r3, [r7, #10]
 8003702:	11db      	asrs	r3, r3, #7
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0306 	and.w	r3, r3, #6
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f063 030e 	orn	r3, r3, #14
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4907      	ldr	r1, [pc, #28]	@ (800373c <I2C_MasterRequestRead+0x198>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f91e 	bl	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	00010008 	.word	0x00010008
 800373c:	00010002 	.word	0x00010002

08003740 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	817b      	strh	r3, [r7, #10]
 8003752:	460b      	mov	r3, r1
 8003754:	813b      	strh	r3, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	2200      	movs	r2, #0
 8003772:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f878 	bl	800386c <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003790:	d103      	bne.n	800379a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003798:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e05f      	b.n	800385e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800379e:	897b      	ldrh	r3, [r7, #10]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	492d      	ldr	r1, [pc, #180]	@ (8003868 <I2C_RequestMemoryWrite+0x128>)
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f8d3 	bl	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e04c      	b.n	800385e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037dc:	6a39      	ldr	r1, [r7, #32]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f95e 	bl	8003aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d107      	bne.n	8003802 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e02b      	b.n	800385e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d105      	bne.n	8003818 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800380c:	893b      	ldrh	r3, [r7, #8]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	611a      	str	r2, [r3, #16]
 8003816:	e021      	b.n	800385c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003818:	893b      	ldrh	r3, [r7, #8]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	b29b      	uxth	r3, r3
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003828:	6a39      	ldr	r1, [r7, #32]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f938 	bl	8003aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	2b04      	cmp	r3, #4
 800383c:	d107      	bne.n	800384e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e005      	b.n	800385e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003852:	893b      	ldrh	r3, [r7, #8]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	00010002 	.word	0x00010002

0800386c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387c:	e048      	b.n	8003910 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d044      	beq.n	8003910 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe fd9d 	bl	80023c4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d139      	bne.n	8003910 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10d      	bne.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	e00c      	b.n	80038dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	43da      	mvns	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d116      	bne.n	8003910 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e023      	b.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	0c1b      	lsrs	r3, r3, #16
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10d      	bne.n	8003936 <I2C_WaitOnFlagUntilTimeout+0xca>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	43da      	mvns	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	e00c      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d093      	beq.n	800387e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800396e:	e071      	b.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397e:	d123      	bne.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800398e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003998:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	f043 0204 	orr.w	r2, r3, #4
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e067      	b.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d041      	beq.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fe fcf8 	bl	80023c4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d136      	bne.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10c      	bne.n	8003a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	43da      	mvns	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e00b      	b.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e021      	b.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d10c      	bne.n	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	43da      	mvns	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e00b      	b.n	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f af6d 	bne.w	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aac:	e034      	b.n	8003b18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f8e3 	bl	8003c7a <I2C_IsAcknowledgeFailed>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e034      	b.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d028      	beq.n	8003b18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac6:	f7fe fc7d 	bl	80023c4 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d302      	bcc.n	8003adc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d11d      	bne.n	8003b18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d016      	beq.n	8003b18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e007      	b.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b22:	2b80      	cmp	r3, #128	@ 0x80
 8003b24:	d1c3      	bne.n	8003aae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b3c:	e034      	b.n	8003ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f89b 	bl	8003c7a <I2C_IsAcknowledgeFailed>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e034      	b.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d028      	beq.n	8003ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe fc35 	bl	80023c4 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11d      	bne.n	8003ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d016      	beq.n	8003ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e007      	b.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d1c3      	bne.n	8003b3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bcc:	e049      	b.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d119      	bne.n	8003c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0210 	mvn.w	r2, #16
 8003be4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e030      	b.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c10:	f7fe fbd8 	bl	80023c4 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d302      	bcc.n	8003c26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11d      	bne.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b40      	cmp	r3, #64	@ 0x40
 8003c32:	d016      	beq.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e007      	b.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b40      	cmp	r3, #64	@ 0x40
 8003c6e:	d1ae      	bne.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c90:	d11b      	bne.n	8003cca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f043 0204 	orr.w	r2, r3, #4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e272      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8087 	beq.w	8003e06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf8:	4b92      	ldr	r3, [pc, #584]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d00c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d04:	4b8f      	ldr	r3, [pc, #572]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d112      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5e>
 8003d10:	4b8c      	ldr	r3, [pc, #560]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1c:	d10b      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1e:	4b89      	ldr	r3, [pc, #548]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d06c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x12c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d168      	bne.n	8003e04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e24c      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x76>
 8003d40:	4b80      	ldr	r3, [pc, #512]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7f      	ldr	r2, [pc, #508]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e02e      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x98>
 8003d56:	4b7b      	ldr	r3, [pc, #492]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7a      	ldr	r2, [pc, #488]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b78      	ldr	r3, [pc, #480]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a77      	ldr	r2, [pc, #476]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0xbc>
 8003d7a:	4b72      	ldr	r3, [pc, #456]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a71      	ldr	r2, [pc, #452]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b6f      	ldr	r3, [pc, #444]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d94:	4b6b      	ldr	r3, [pc, #428]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a6a      	ldr	r2, [pc, #424]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b68      	ldr	r3, [pc, #416]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a67      	ldr	r2, [pc, #412]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003daa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe fb06 	bl	80023c4 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe fb02 	bl	80023c4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	@ 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e200      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b5d      	ldr	r3, [pc, #372]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe4>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe faf2 	bl	80023c4 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe faee 	bl	80023c4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1ec      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	4b53      	ldr	r3, [pc, #332]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x10c>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d063      	beq.n	8003eda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e12:	4b4c      	ldr	r3, [pc, #304]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e1e:	4b49      	ldr	r3, [pc, #292]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d11c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x18c>
 8003e2a:	4b46      	ldr	r3, [pc, #280]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	4b43      	ldr	r3, [pc, #268]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x176>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1c0      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4939      	ldr	r1, [pc, #228]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	e03a      	b.n	8003eda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b36      	ldr	r3, [pc, #216]	@ (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe faa7 	bl	80023c4 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fe faa3 	bl	80023c4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e1a1      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e98:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4927      	ldr	r1, [pc, #156]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
 8003eac:	e015      	b.n	8003eda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eae:	4b26      	ldr	r3, [pc, #152]	@ (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fa86 	bl	80023c4 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fe fa82 	bl	80023c4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e180      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	4b1d      	ldr	r3, [pc, #116]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03a      	beq.n	8003f5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d019      	beq.n	8003f22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eee:	4b17      	ldr	r3, [pc, #92]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fa66 	bl	80023c4 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fe fa62 	bl	80023c4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e160      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f000 face 	bl	80044bc <RCC_Delay>
 8003f20:	e01c      	b.n	8003f5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f22:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fe fa4c 	bl	80023c4 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2e:	e00f      	b.n	8003f50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fe fa48 	bl	80023c4 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d908      	bls.n	8003f50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e146      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	42420000 	.word	0x42420000
 8003f4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	4b92      	ldr	r3, [pc, #584]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e9      	bne.n	8003f30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a6 	beq.w	80040b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6e:	4b8b      	ldr	r3, [pc, #556]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	4b88      	ldr	r3, [pc, #544]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4a87      	ldr	r2, [pc, #540]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	61d3      	str	r3, [r2, #28]
 8003f86:	4b85      	ldr	r3, [pc, #532]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4b82      	ldr	r3, [pc, #520]	@ (80041a0 <HAL_RCC_OscConfig+0x4c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d118      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80041a0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80041a0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fe fa09 	bl	80023c4 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb6:	f7fe fa05 	bl	80023c4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b64      	cmp	r3, #100	@ 0x64
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e103      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	4b75      	ldr	r3, [pc, #468]	@ (80041a0 <HAL_RCC_OscConfig+0x4c8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x312>
 8003fdc:	4b6f      	ldr	r3, [pc, #444]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6213      	str	r3, [r2, #32]
 8003fe8:	e02d      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x334>
 8003ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a69      	ldr	r2, [pc, #420]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	6213      	str	r3, [r2, #32]
 8003ffe:	4b67      	ldr	r3, [pc, #412]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4a66      	ldr	r2, [pc, #408]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	6213      	str	r3, [r2, #32]
 800400a:	e01c      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x356>
 8004014:	4b61      	ldr	r3, [pc, #388]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4a60      	ldr	r2, [pc, #384]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	6213      	str	r3, [r2, #32]
 8004020:	4b5e      	ldr	r3, [pc, #376]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4a5d      	ldr	r2, [pc, #372]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6213      	str	r3, [r2, #32]
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 800402e:	4b5b      	ldr	r3, [pc, #364]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4a5a      	ldr	r2, [pc, #360]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	6213      	str	r3, [r2, #32]
 800403a:	4b58      	ldr	r3, [pc, #352]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4a57      	ldr	r2, [pc, #348]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d015      	beq.n	800407a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404e:	f7fe f9b9 	bl	80023c4 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	e00a      	b.n	800406c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fe f9b5 	bl	80023c4 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0b1      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	4b4b      	ldr	r3, [pc, #300]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ee      	beq.n	8004056 <HAL_RCC_OscConfig+0x37e>
 8004078:	e014      	b.n	80040a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407a:	f7fe f9a3 	bl	80023c4 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004080:	e00a      	b.n	8004098 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fe f99f 	bl	80023c4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004090:	4293      	cmp	r3, r2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e09b      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004098:	4b40      	ldr	r3, [pc, #256]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ee      	bne.n	8004082 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b3c      	ldr	r3, [pc, #240]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a3b      	ldr	r2, [pc, #236]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8087 	beq.w	80041ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c0:	4b36      	ldr	r3, [pc, #216]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d061      	beq.n	8004190 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d146      	bne.n	8004162 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d4:	4b33      	ldr	r3, [pc, #204]	@ (80041a4 <HAL_RCC_OscConfig+0x4cc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fe f973 	bl	80023c4 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e2:	f7fe f96f 	bl	80023c4 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e06d      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f4:	4b29      	ldr	r3, [pc, #164]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004108:	d108      	bne.n	800411c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800410a:	4b24      	ldr	r3, [pc, #144]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4921      	ldr	r1, [pc, #132]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800411c:	4b1f      	ldr	r3, [pc, #124]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a19      	ldr	r1, [r3, #32]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	430b      	orrs	r3, r1
 800412e:	491b      	ldr	r1, [pc, #108]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004134:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_RCC_OscConfig+0x4cc>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fe f943 	bl	80023c4 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004142:	f7fe f93f 	bl	80023c4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e03d      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004154:	4b11      	ldr	r3, [pc, #68]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x46a>
 8004160:	e035      	b.n	80041ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <HAL_RCC_OscConfig+0x4cc>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fe f92c 	bl	80023c4 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fe f928 	bl	80023c4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e026      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x498>
 800418e:	e01e      	b.n	80041ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e019      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
 800419c:	40021000 	.word	0x40021000
 80041a0:	40007000 	.word	0x40007000
 80041a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_RCC_OscConfig+0x500>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0d0      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b6a      	ldr	r3, [pc, #424]	@ (800439c <HAL_RCC_ClockConfig+0x1c0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d910      	bls.n	8004220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b67      	ldr	r3, [pc, #412]	@ (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 0207 	bic.w	r2, r3, #7
 8004206:	4965      	ldr	r1, [pc, #404]	@ (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b63      	ldr	r3, [pc, #396]	@ (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004238:	4b59      	ldr	r3, [pc, #356]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a58      	ldr	r2, [pc, #352]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004242:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004250:	4b53      	ldr	r3, [pc, #332]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a52      	ldr	r2, [pc, #328]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800425a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b50      	ldr	r3, [pc, #320]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	494d      	ldr	r1, [pc, #308]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d040      	beq.n	80042fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b47      	ldr	r3, [pc, #284]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d115      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	4b41      	ldr	r3, [pc, #260]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e073      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	4b3d      	ldr	r3, [pc, #244]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06b      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4936      	ldr	r1, [pc, #216]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fe f87a 	bl	80023c4 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d4:	f7fe f876 	bl	80023c4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e053      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	4b2d      	ldr	r3, [pc, #180]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 020c 	and.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d1eb      	bne.n	80042d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042fc:	4b27      	ldr	r3, [pc, #156]	@ (800439c <HAL_RCC_ClockConfig+0x1c0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d210      	bcs.n	800432c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b24      	ldr	r3, [pc, #144]	@ (800439c <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 0207 	bic.w	r2, r3, #7
 8004312:	4922      	ldr	r1, [pc, #136]	@ (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b20      	ldr	r3, [pc, #128]	@ (800439c <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e032      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004338:	4b19      	ldr	r3, [pc, #100]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4916      	ldr	r1, [pc, #88]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004356:	4b12      	ldr	r3, [pc, #72]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	490e      	ldr	r1, [pc, #56]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800436a:	f000 f821 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800436e:	4602      	mov	r2, r0
 8004370:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	490a      	ldr	r1, [pc, #40]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	5ccb      	ldrb	r3, [r1, r3]
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	4a09      	ldr	r2, [pc, #36]	@ (80043a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_RCC_ClockConfig+0x1d0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd ffd8 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40022000 	.word	0x40022000
 80043a0:	40021000 	.word	0x40021000
 80043a4:	08008700 	.word	0x08008700
 80043a8:	200000a4 	.word	0x200000a4
 80043ac:	200000a8 	.word	0x200000a8

080043b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x94>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x30>
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x36>
 80043de:	e027      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043e0:	4b19      	ldr	r3, [pc, #100]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x98>)
 80043e2:	613b      	str	r3, [r7, #16]
      break;
 80043e4:	e027      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	0c9b      	lsrs	r3, r3, #18
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	4a17      	ldr	r2, [pc, #92]	@ (800444c <HAL_RCC_GetSysClockFreq+0x9c>)
 80043f0:	5cd3      	ldrb	r3, [r2, r3]
 80043f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043fe:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x94>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	0c5b      	lsrs	r3, r3, #17
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	4a11      	ldr	r2, [pc, #68]	@ (8004450 <HAL_RCC_GetSysClockFreq+0xa0>)
 800440a:	5cd3      	ldrb	r3, [r2, r3]
 800440c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a0d      	ldr	r2, [pc, #52]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x98>)
 8004412:	fb03 f202 	mul.w	r2, r3, r2
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e004      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a0c      	ldr	r2, [pc, #48]	@ (8004454 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004424:	fb02 f303 	mul.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	613b      	str	r3, [r7, #16]
      break;
 800442e:	e002      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004430:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x98>)
 8004432:	613b      	str	r3, [r7, #16]
      break;
 8004434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004436:	693b      	ldr	r3, [r7, #16]
}
 8004438:	4618      	mov	r0, r3
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000
 8004448:	007a1200 	.word	0x007a1200
 800444c:	08008718 	.word	0x08008718
 8004450:	08008728 	.word	0x08008728
 8004454:	003d0900 	.word	0x003d0900

08004458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800445c:	4b02      	ldr	r3, [pc, #8]	@ (8004468 <HAL_RCC_GetHCLKFreq+0x10>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	200000a4 	.word	0x200000a4

0800446c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004470:	f7ff fff2 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4903      	ldr	r1, [pc, #12]	@ (8004490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	08008710 	.word	0x08008710

08004494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004498:	f7ff ffde 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	0adb      	lsrs	r3, r3, #11
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	4903      	ldr	r1, [pc, #12]	@ (80044b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044aa:	5ccb      	ldrb	r3, [r1, r3]
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	08008710 	.word	0x08008710

080044bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044c4:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <RCC_Delay+0x34>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0a      	ldr	r2, [pc, #40]	@ (80044f4 <RCC_Delay+0x38>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	0a5b      	lsrs	r3, r3, #9
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044d8:	bf00      	nop
  }
  while (Delay --);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1e5a      	subs	r2, r3, #1
 80044de:	60fa      	str	r2, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f9      	bne.n	80044d8 <RCC_Delay+0x1c>
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	200000a4 	.word	0x200000a4
 80044f4:	10624dd3 	.word	0x10624dd3

080044f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e041      	b.n	800458e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fd74 	bl	800200c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f000 f940 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d001      	beq.n	80045b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e032      	b.n	8004616 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a18      	ldr	r2, [pc, #96]	@ (8004620 <HAL_TIM_Base_Start+0x88>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_TIM_Base_Start+0x48>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ca:	d009      	beq.n	80045e0 <HAL_TIM_Base_Start+0x48>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a14      	ldr	r2, [pc, #80]	@ (8004624 <HAL_TIM_Base_Start+0x8c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_TIM_Base_Start+0x48>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a13      	ldr	r2, [pc, #76]	@ (8004628 <HAL_TIM_Base_Start+0x90>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d111      	bne.n	8004604 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d010      	beq.n	8004614 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004602:	e007      	b.n	8004614 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800

0800462c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIM_ConfigClockSource+0x1c>
 8004644:	2302      	movs	r3, #2
 8004646:	e0b4      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x186>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800466e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004680:	d03e      	beq.n	8004700 <HAL_TIM_ConfigClockSource+0xd4>
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004686:	f200 8087 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468e:	f000 8086 	beq.w	800479e <HAL_TIM_ConfigClockSource+0x172>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004696:	d87f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b70      	cmp	r3, #112	@ 0x70
 800469a:	d01a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0xa6>
 800469c:	2b70      	cmp	r3, #112	@ 0x70
 800469e:	d87b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b60      	cmp	r3, #96	@ 0x60
 80046a2:	d050      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x11a>
 80046a4:	2b60      	cmp	r3, #96	@ 0x60
 80046a6:	d877      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b50      	cmp	r3, #80	@ 0x50
 80046aa:	d03c      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xfa>
 80046ac:	2b50      	cmp	r3, #80	@ 0x50
 80046ae:	d873      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b40      	cmp	r3, #64	@ 0x40
 80046b2:	d058      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x13a>
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	d86f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b30      	cmp	r3, #48	@ 0x30
 80046ba:	d064      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b30      	cmp	r3, #48	@ 0x30
 80046be:	d86b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d060      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d867      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d05c      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d05a      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	e062      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e2:	f000 f950 	bl	8004986 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	609a      	str	r2, [r3, #8]
      break;
 80046fe:	e04f      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004710:	f000 f939 	bl	8004986 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e03c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	461a      	mov	r2, r3
 8004734:	f000 f8b0 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2150      	movs	r1, #80	@ 0x50
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f907 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004744:	e02c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004752:	461a      	mov	r2, r3
 8004754:	f000 f8ce 	bl	80048f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2160      	movs	r1, #96	@ 0x60
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f8f7 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004764:	e01c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	461a      	mov	r2, r3
 8004774:	f000 f890 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2140      	movs	r1, #64	@ 0x40
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f8e7 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004784:	e00c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f000 f8de 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004796:	e003      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e000      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800479e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a2f      	ldr	r2, [pc, #188]	@ (800488c <TIM_Base_SetConfig+0xd0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00b      	beq.n	80047ec <TIM_Base_SetConfig+0x30>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047da:	d007      	beq.n	80047ec <TIM_Base_SetConfig+0x30>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a2c      	ldr	r2, [pc, #176]	@ (8004890 <TIM_Base_SetConfig+0xd4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_Base_SetConfig+0x30>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004894 <TIM_Base_SetConfig+0xd8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d108      	bne.n	80047fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a22      	ldr	r2, [pc, #136]	@ (800488c <TIM_Base_SetConfig+0xd0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00b      	beq.n	800481e <TIM_Base_SetConfig+0x62>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480c:	d007      	beq.n	800481e <TIM_Base_SetConfig+0x62>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1f      	ldr	r2, [pc, #124]	@ (8004890 <TIM_Base_SetConfig+0xd4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_Base_SetConfig+0x62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1e      	ldr	r2, [pc, #120]	@ (8004894 <TIM_Base_SetConfig+0xd8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d108      	bne.n	8004830 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a0d      	ldr	r2, [pc, #52]	@ (800488c <TIM_Base_SetConfig+0xd0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d103      	bne.n	8004864 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	611a      	str	r2, [r3, #16]
  }
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800

08004898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f023 0210 	bic.w	r2, r3, #16
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800491e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	031b      	lsls	r3, r3, #12
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004930:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	f043 0307 	orr.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004986:	b480      	push	{r7}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d8:	2302      	movs	r3, #2
 80049da:	e046      	b.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	@ (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a28:	d009      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a12      	ldr	r2, [pc, #72]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a10      	ldr	r2, [pc, #64]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10c      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800

08004a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e042      	b.n	8004b18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd face 	bl	8002048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	@ 0x24
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa09 	bl	8004edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	@ 0x28
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d175      	bne.n	8004c2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_UART_Transmit+0x2c>
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e06e      	b.n	8004c2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2221      	movs	r2, #33	@ 0x21
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd fc31 	bl	80023c4 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b78:	d108      	bne.n	8004b8c <HAL_UART_Transmit+0x6c>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e003      	b.n	8004b94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b94:	e02e      	b.n	8004bf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2180      	movs	r1, #128	@ 0x80
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f8df 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e03a      	b.n	8004c2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e007      	b.n	8004be6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cb      	bne.n	8004b96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2140      	movs	r1, #64	@ 0x40
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f8ab 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e006      	b.n	8004c2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e000      	b.n	8004c2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b08a      	sub	sp, #40	@ 0x28
 8004c3a:	af02      	add	r7, sp, #8
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	f040 8081 	bne.w	8004d5a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_UART_Receive+0x2e>
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e079      	b.n	8004d5c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2222      	movs	r2, #34	@ 0x22
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c7c:	f7fd fba2 	bl	80023c4 <HAL_GetTick>
 8004c80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c96:	d108      	bne.n	8004caa <HAL_UART_Receive+0x74>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	e003      	b.n	8004cb2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004cb2:	e047      	b.n	8004d44 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2120      	movs	r1, #32
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f850 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e042      	b.n	8004d5c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10c      	bne.n	8004cf6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	e01f      	b.n	8004d36 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfe:	d007      	beq.n	8004d10 <HAL_UART_Receive+0xda>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <HAL_UART_Receive+0xe8>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d106      	bne.n	8004d1e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	e008      	b.n	8004d30 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	3301      	adds	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1b2      	bne.n	8004cb4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d74:	e03b      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d037      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7e:	f7fd fb21 	bl	80023c4 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	6a3a      	ldr	r2, [r7, #32]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d302      	bcc.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e03a      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d023      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x8a>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b80      	cmp	r3, #128	@ 0x80
 8004daa:	d020      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b40      	cmp	r3, #64	@ 0x40
 8004db0:	d01d      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d116      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f81d 	bl	8004e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2208      	movs	r2, #8
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e00f      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d0b4      	beq.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b095      	sub	sp, #84	@ 0x54
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d119      	bne.n	8004ec2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0310 	bic.w	r3, r3, #16
 8004ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eae:	61ba      	str	r2, [r7, #24]
 8004eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	613b      	str	r3, [r7, #16]
   return(result);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ed0:	bf00      	nop
 8004ed2:	3754      	adds	r7, #84	@ 0x54
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr
	...

08004edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f16:	f023 030c 	bic.w	r3, r3, #12
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff0 <UART_SetConfig+0x114>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d103      	bne.n	8004f4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7ff faa6 	bl	8004494 <HAL_RCC_GetPCLK2Freq>
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	e002      	b.n	8004f52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7ff fa8e 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8004f50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009a      	lsls	r2, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	4a22      	ldr	r2, [pc, #136]	@ (8004ff4 <UART_SetConfig+0x118>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	0119      	lsls	r1, r3, #4
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009a      	lsls	r2, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f88:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <UART_SetConfig+0x118>)
 8004f8a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2064      	movs	r0, #100	@ 0x64
 8004f92:	fb00 f303 	mul.w	r3, r0, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	3332      	adds	r3, #50	@ 0x32
 8004f9c:	4a15      	ldr	r2, [pc, #84]	@ (8004ff4 <UART_SetConfig+0x118>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fa8:	4419      	add	r1, r3
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009a      	lsls	r2, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <UART_SetConfig+0x118>)
 8004fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	2064      	movs	r0, #100	@ 0x64
 8004fca:	fb00 f303 	mul.w	r3, r0, r3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	3332      	adds	r3, #50	@ 0x32
 8004fd4:	4a07      	ldr	r2, [pc, #28]	@ (8004ff4 <UART_SetConfig+0x118>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40013800 	.word	0x40013800
 8004ff4:	51eb851f 	.word	0x51eb851f

08004ff8 <__cvt>:
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffe:	461d      	mov	r5, r3
 8005000:	bfbb      	ittet	lt
 8005002:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005006:	461d      	movlt	r5, r3
 8005008:	2300      	movge	r3, #0
 800500a:	232d      	movlt	r3, #45	@ 0x2d
 800500c:	b088      	sub	sp, #32
 800500e:	4614      	mov	r4, r2
 8005010:	bfb8      	it	lt
 8005012:	4614      	movlt	r4, r2
 8005014:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005016:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005018:	7013      	strb	r3, [r2, #0]
 800501a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800501c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005020:	f023 0820 	bic.w	r8, r3, #32
 8005024:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005028:	d005      	beq.n	8005036 <__cvt+0x3e>
 800502a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800502e:	d100      	bne.n	8005032 <__cvt+0x3a>
 8005030:	3601      	adds	r6, #1
 8005032:	2302      	movs	r3, #2
 8005034:	e000      	b.n	8005038 <__cvt+0x40>
 8005036:	2303      	movs	r3, #3
 8005038:	aa07      	add	r2, sp, #28
 800503a:	9204      	str	r2, [sp, #16]
 800503c:	aa06      	add	r2, sp, #24
 800503e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005042:	e9cd 3600 	strd	r3, r6, [sp]
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	f000 fecd 	bl	8005de8 <_dtoa_r>
 800504e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005052:	4607      	mov	r7, r0
 8005054:	d119      	bne.n	800508a <__cvt+0x92>
 8005056:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005058:	07db      	lsls	r3, r3, #31
 800505a:	d50e      	bpl.n	800507a <__cvt+0x82>
 800505c:	eb00 0906 	add.w	r9, r0, r6
 8005060:	2200      	movs	r2, #0
 8005062:	2300      	movs	r3, #0
 8005064:	4620      	mov	r0, r4
 8005066:	4629      	mov	r1, r5
 8005068:	f7fb fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800506c:	b108      	cbz	r0, 8005072 <__cvt+0x7a>
 800506e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005072:	2230      	movs	r2, #48	@ 0x30
 8005074:	9b07      	ldr	r3, [sp, #28]
 8005076:	454b      	cmp	r3, r9
 8005078:	d31e      	bcc.n	80050b8 <__cvt+0xc0>
 800507a:	4638      	mov	r0, r7
 800507c:	9b07      	ldr	r3, [sp, #28]
 800507e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005080:	1bdb      	subs	r3, r3, r7
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	b008      	add	sp, #32
 8005086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800508e:	eb00 0906 	add.w	r9, r0, r6
 8005092:	d1e5      	bne.n	8005060 <__cvt+0x68>
 8005094:	7803      	ldrb	r3, [r0, #0]
 8005096:	2b30      	cmp	r3, #48	@ 0x30
 8005098:	d10a      	bne.n	80050b0 <__cvt+0xb8>
 800509a:	2200      	movs	r2, #0
 800509c:	2300      	movs	r3, #0
 800509e:	4620      	mov	r0, r4
 80050a0:	4629      	mov	r1, r5
 80050a2:	f7fb fc81 	bl	80009a8 <__aeabi_dcmpeq>
 80050a6:	b918      	cbnz	r0, 80050b0 <__cvt+0xb8>
 80050a8:	f1c6 0601 	rsb	r6, r6, #1
 80050ac:	f8ca 6000 	str.w	r6, [sl]
 80050b0:	f8da 3000 	ldr.w	r3, [sl]
 80050b4:	4499      	add	r9, r3
 80050b6:	e7d3      	b.n	8005060 <__cvt+0x68>
 80050b8:	1c59      	adds	r1, r3, #1
 80050ba:	9107      	str	r1, [sp, #28]
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e7d9      	b.n	8005074 <__cvt+0x7c>

080050c0 <__exponent>:
 80050c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c2:	2900      	cmp	r1, #0
 80050c4:	bfb6      	itet	lt
 80050c6:	232d      	movlt	r3, #45	@ 0x2d
 80050c8:	232b      	movge	r3, #43	@ 0x2b
 80050ca:	4249      	neglt	r1, r1
 80050cc:	2909      	cmp	r1, #9
 80050ce:	7002      	strb	r2, [r0, #0]
 80050d0:	7043      	strb	r3, [r0, #1]
 80050d2:	dd29      	ble.n	8005128 <__exponent+0x68>
 80050d4:	f10d 0307 	add.w	r3, sp, #7
 80050d8:	461d      	mov	r5, r3
 80050da:	270a      	movs	r7, #10
 80050dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80050e0:	461a      	mov	r2, r3
 80050e2:	fb07 1416 	mls	r4, r7, r6, r1
 80050e6:	3430      	adds	r4, #48	@ 0x30
 80050e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050ec:	460c      	mov	r4, r1
 80050ee:	2c63      	cmp	r4, #99	@ 0x63
 80050f0:	4631      	mov	r1, r6
 80050f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80050f6:	dcf1      	bgt.n	80050dc <__exponent+0x1c>
 80050f8:	3130      	adds	r1, #48	@ 0x30
 80050fa:	1e94      	subs	r4, r2, #2
 80050fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005100:	4623      	mov	r3, r4
 8005102:	1c41      	adds	r1, r0, #1
 8005104:	42ab      	cmp	r3, r5
 8005106:	d30a      	bcc.n	800511e <__exponent+0x5e>
 8005108:	f10d 0309 	add.w	r3, sp, #9
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	42ac      	cmp	r4, r5
 8005110:	bf88      	it	hi
 8005112:	2300      	movhi	r3, #0
 8005114:	3302      	adds	r3, #2
 8005116:	4403      	add	r3, r0
 8005118:	1a18      	subs	r0, r3, r0
 800511a:	b003      	add	sp, #12
 800511c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005122:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005126:	e7ed      	b.n	8005104 <__exponent+0x44>
 8005128:	2330      	movs	r3, #48	@ 0x30
 800512a:	3130      	adds	r1, #48	@ 0x30
 800512c:	7083      	strb	r3, [r0, #2]
 800512e:	70c1      	strb	r1, [r0, #3]
 8005130:	1d03      	adds	r3, r0, #4
 8005132:	e7f1      	b.n	8005118 <__exponent+0x58>

08005134 <_printf_float>:
 8005134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005138:	b091      	sub	sp, #68	@ 0x44
 800513a:	460c      	mov	r4, r1
 800513c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005140:	4616      	mov	r6, r2
 8005142:	461f      	mov	r7, r3
 8005144:	4605      	mov	r5, r0
 8005146:	f000 fd41 	bl	8005bcc <_localeconv_r>
 800514a:	6803      	ldr	r3, [r0, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	9308      	str	r3, [sp, #32]
 8005150:	f7fa fffe 	bl	8000150 <strlen>
 8005154:	2300      	movs	r3, #0
 8005156:	930e      	str	r3, [sp, #56]	@ 0x38
 8005158:	f8d8 3000 	ldr.w	r3, [r8]
 800515c:	9009      	str	r0, [sp, #36]	@ 0x24
 800515e:	3307      	adds	r3, #7
 8005160:	f023 0307 	bic.w	r3, r3, #7
 8005164:	f103 0208 	add.w	r2, r3, #8
 8005168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800516c:	f8d4 b000 	ldr.w	fp, [r4]
 8005170:	f8c8 2000 	str.w	r2, [r8]
 8005174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005178:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800517c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800517e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005182:	f04f 32ff 	mov.w	r2, #4294967295
 8005186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800518a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800518e:	4b9c      	ldr	r3, [pc, #624]	@ (8005400 <_printf_float+0x2cc>)
 8005190:	f7fb fc3c 	bl	8000a0c <__aeabi_dcmpun>
 8005194:	bb70      	cbnz	r0, 80051f4 <_printf_float+0xc0>
 8005196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800519a:	f04f 32ff 	mov.w	r2, #4294967295
 800519e:	4b98      	ldr	r3, [pc, #608]	@ (8005400 <_printf_float+0x2cc>)
 80051a0:	f7fb fc16 	bl	80009d0 <__aeabi_dcmple>
 80051a4:	bb30      	cbnz	r0, 80051f4 <_printf_float+0xc0>
 80051a6:	2200      	movs	r2, #0
 80051a8:	2300      	movs	r3, #0
 80051aa:	4640      	mov	r0, r8
 80051ac:	4649      	mov	r1, r9
 80051ae:	f7fb fc05 	bl	80009bc <__aeabi_dcmplt>
 80051b2:	b110      	cbz	r0, 80051ba <_printf_float+0x86>
 80051b4:	232d      	movs	r3, #45	@ 0x2d
 80051b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ba:	4a92      	ldr	r2, [pc, #584]	@ (8005404 <_printf_float+0x2d0>)
 80051bc:	4b92      	ldr	r3, [pc, #584]	@ (8005408 <_printf_float+0x2d4>)
 80051be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051c2:	bf94      	ite	ls
 80051c4:	4690      	movls	r8, r2
 80051c6:	4698      	movhi	r8, r3
 80051c8:	2303      	movs	r3, #3
 80051ca:	f04f 0900 	mov.w	r9, #0
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	f02b 0304 	bic.w	r3, fp, #4
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	4633      	mov	r3, r6
 80051d8:	4621      	mov	r1, r4
 80051da:	4628      	mov	r0, r5
 80051dc:	9700      	str	r7, [sp, #0]
 80051de:	aa0f      	add	r2, sp, #60	@ 0x3c
 80051e0:	f000 f9d4 	bl	800558c <_printf_common>
 80051e4:	3001      	adds	r0, #1
 80051e6:	f040 8090 	bne.w	800530a <_printf_float+0x1d6>
 80051ea:	f04f 30ff 	mov.w	r0, #4294967295
 80051ee:	b011      	add	sp, #68	@ 0x44
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	4640      	mov	r0, r8
 80051fa:	4649      	mov	r1, r9
 80051fc:	f7fb fc06 	bl	8000a0c <__aeabi_dcmpun>
 8005200:	b148      	cbz	r0, 8005216 <_printf_float+0xe2>
 8005202:	464b      	mov	r3, r9
 8005204:	2b00      	cmp	r3, #0
 8005206:	bfb8      	it	lt
 8005208:	232d      	movlt	r3, #45	@ 0x2d
 800520a:	4a80      	ldr	r2, [pc, #512]	@ (800540c <_printf_float+0x2d8>)
 800520c:	bfb8      	it	lt
 800520e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005212:	4b7f      	ldr	r3, [pc, #508]	@ (8005410 <_printf_float+0x2dc>)
 8005214:	e7d3      	b.n	80051be <_printf_float+0x8a>
 8005216:	6863      	ldr	r3, [r4, #4]
 8005218:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	d13f      	bne.n	80052a0 <_printf_float+0x16c>
 8005220:	2306      	movs	r3, #6
 8005222:	6063      	str	r3, [r4, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	9206      	str	r2, [sp, #24]
 800522e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005230:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005234:	aa0d      	add	r2, sp, #52	@ 0x34
 8005236:	9203      	str	r2, [sp, #12]
 8005238:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800523c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005240:	6863      	ldr	r3, [r4, #4]
 8005242:	4642      	mov	r2, r8
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	4628      	mov	r0, r5
 8005248:	464b      	mov	r3, r9
 800524a:	910a      	str	r1, [sp, #40]	@ 0x28
 800524c:	f7ff fed4 	bl	8004ff8 <__cvt>
 8005250:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005252:	4680      	mov	r8, r0
 8005254:	2947      	cmp	r1, #71	@ 0x47
 8005256:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005258:	d128      	bne.n	80052ac <_printf_float+0x178>
 800525a:	1cc8      	adds	r0, r1, #3
 800525c:	db02      	blt.n	8005264 <_printf_float+0x130>
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	4299      	cmp	r1, r3
 8005262:	dd40      	ble.n	80052e6 <_printf_float+0x1b2>
 8005264:	f1aa 0a02 	sub.w	sl, sl, #2
 8005268:	fa5f fa8a 	uxtb.w	sl, sl
 800526c:	4652      	mov	r2, sl
 800526e:	3901      	subs	r1, #1
 8005270:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005274:	910d      	str	r1, [sp, #52]	@ 0x34
 8005276:	f7ff ff23 	bl	80050c0 <__exponent>
 800527a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800527c:	4681      	mov	r9, r0
 800527e:	1813      	adds	r3, r2, r0
 8005280:	2a01      	cmp	r2, #1
 8005282:	6123      	str	r3, [r4, #16]
 8005284:	dc02      	bgt.n	800528c <_printf_float+0x158>
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	07d2      	lsls	r2, r2, #31
 800528a:	d501      	bpl.n	8005290 <_printf_float+0x15c>
 800528c:	3301      	adds	r3, #1
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005294:	2b00      	cmp	r3, #0
 8005296:	d09e      	beq.n	80051d6 <_printf_float+0xa2>
 8005298:	232d      	movs	r3, #45	@ 0x2d
 800529a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800529e:	e79a      	b.n	80051d6 <_printf_float+0xa2>
 80052a0:	2947      	cmp	r1, #71	@ 0x47
 80052a2:	d1bf      	bne.n	8005224 <_printf_float+0xf0>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1bd      	bne.n	8005224 <_printf_float+0xf0>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e7ba      	b.n	8005222 <_printf_float+0xee>
 80052ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052b0:	d9dc      	bls.n	800526c <_printf_float+0x138>
 80052b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052b6:	d118      	bne.n	80052ea <_printf_float+0x1b6>
 80052b8:	2900      	cmp	r1, #0
 80052ba:	6863      	ldr	r3, [r4, #4]
 80052bc:	dd0b      	ble.n	80052d6 <_printf_float+0x1a2>
 80052be:	6121      	str	r1, [r4, #16]
 80052c0:	b913      	cbnz	r3, 80052c8 <_printf_float+0x194>
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	07d0      	lsls	r0, r2, #31
 80052c6:	d502      	bpl.n	80052ce <_printf_float+0x19a>
 80052c8:	3301      	adds	r3, #1
 80052ca:	440b      	add	r3, r1
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	f04f 0900 	mov.w	r9, #0
 80052d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052d4:	e7dc      	b.n	8005290 <_printf_float+0x15c>
 80052d6:	b913      	cbnz	r3, 80052de <_printf_float+0x1aa>
 80052d8:	6822      	ldr	r2, [r4, #0]
 80052da:	07d2      	lsls	r2, r2, #31
 80052dc:	d501      	bpl.n	80052e2 <_printf_float+0x1ae>
 80052de:	3302      	adds	r3, #2
 80052e0:	e7f4      	b.n	80052cc <_printf_float+0x198>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e7f2      	b.n	80052cc <_printf_float+0x198>
 80052e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052ec:	4299      	cmp	r1, r3
 80052ee:	db05      	blt.n	80052fc <_printf_float+0x1c8>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	6121      	str	r1, [r4, #16]
 80052f4:	07d8      	lsls	r0, r3, #31
 80052f6:	d5ea      	bpl.n	80052ce <_printf_float+0x19a>
 80052f8:	1c4b      	adds	r3, r1, #1
 80052fa:	e7e7      	b.n	80052cc <_printf_float+0x198>
 80052fc:	2900      	cmp	r1, #0
 80052fe:	bfcc      	ite	gt
 8005300:	2201      	movgt	r2, #1
 8005302:	f1c1 0202 	rsble	r2, r1, #2
 8005306:	4413      	add	r3, r2
 8005308:	e7e0      	b.n	80052cc <_printf_float+0x198>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	055a      	lsls	r2, r3, #21
 800530e:	d407      	bmi.n	8005320 <_printf_float+0x1ec>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	4642      	mov	r2, r8
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	d12b      	bne.n	8005376 <_printf_float+0x242>
 800531e:	e764      	b.n	80051ea <_printf_float+0xb6>
 8005320:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005324:	f240 80dc 	bls.w	80054e0 <_printf_float+0x3ac>
 8005328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800532c:	2200      	movs	r2, #0
 800532e:	2300      	movs	r3, #0
 8005330:	f7fb fb3a 	bl	80009a8 <__aeabi_dcmpeq>
 8005334:	2800      	cmp	r0, #0
 8005336:	d033      	beq.n	80053a0 <_printf_float+0x26c>
 8005338:	2301      	movs	r3, #1
 800533a:	4631      	mov	r1, r6
 800533c:	4628      	mov	r0, r5
 800533e:	4a35      	ldr	r2, [pc, #212]	@ (8005414 <_printf_float+0x2e0>)
 8005340:	47b8      	blx	r7
 8005342:	3001      	adds	r0, #1
 8005344:	f43f af51 	beq.w	80051ea <_printf_float+0xb6>
 8005348:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800534c:	4543      	cmp	r3, r8
 800534e:	db02      	blt.n	8005356 <_printf_float+0x222>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	07d8      	lsls	r0, r3, #31
 8005354:	d50f      	bpl.n	8005376 <_printf_float+0x242>
 8005356:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	f43f af42 	beq.w	80051ea <_printf_float+0xb6>
 8005366:	f04f 0900 	mov.w	r9, #0
 800536a:	f108 38ff 	add.w	r8, r8, #4294967295
 800536e:	f104 0a1a 	add.w	sl, r4, #26
 8005372:	45c8      	cmp	r8, r9
 8005374:	dc09      	bgt.n	800538a <_printf_float+0x256>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	079b      	lsls	r3, r3, #30
 800537a:	f100 8102 	bmi.w	8005582 <_printf_float+0x44e>
 800537e:	68e0      	ldr	r0, [r4, #12]
 8005380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005382:	4298      	cmp	r0, r3
 8005384:	bfb8      	it	lt
 8005386:	4618      	movlt	r0, r3
 8005388:	e731      	b.n	80051ee <_printf_float+0xba>
 800538a:	2301      	movs	r3, #1
 800538c:	4652      	mov	r2, sl
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	f43f af28 	beq.w	80051ea <_printf_float+0xb6>
 800539a:	f109 0901 	add.w	r9, r9, #1
 800539e:	e7e8      	b.n	8005372 <_printf_float+0x23e>
 80053a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dc38      	bgt.n	8005418 <_printf_float+0x2e4>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4631      	mov	r1, r6
 80053aa:	4628      	mov	r0, r5
 80053ac:	4a19      	ldr	r2, [pc, #100]	@ (8005414 <_printf_float+0x2e0>)
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	f43f af1a 	beq.w	80051ea <_printf_float+0xb6>
 80053b6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80053ba:	ea59 0303 	orrs.w	r3, r9, r3
 80053be:	d102      	bne.n	80053c6 <_printf_float+0x292>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	07d9      	lsls	r1, r3, #31
 80053c4:	d5d7      	bpl.n	8005376 <_printf_float+0x242>
 80053c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f af0a 	beq.w	80051ea <_printf_float+0xb6>
 80053d6:	f04f 0a00 	mov.w	sl, #0
 80053da:	f104 0b1a 	add.w	fp, r4, #26
 80053de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053e0:	425b      	negs	r3, r3
 80053e2:	4553      	cmp	r3, sl
 80053e4:	dc01      	bgt.n	80053ea <_printf_float+0x2b6>
 80053e6:	464b      	mov	r3, r9
 80053e8:	e793      	b.n	8005312 <_printf_float+0x1de>
 80053ea:	2301      	movs	r3, #1
 80053ec:	465a      	mov	r2, fp
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f aef8 	beq.w	80051ea <_printf_float+0xb6>
 80053fa:	f10a 0a01 	add.w	sl, sl, #1
 80053fe:	e7ee      	b.n	80053de <_printf_float+0x2aa>
 8005400:	7fefffff 	.word	0x7fefffff
 8005404:	0800872a 	.word	0x0800872a
 8005408:	0800872e 	.word	0x0800872e
 800540c:	08008732 	.word	0x08008732
 8005410:	08008736 	.word	0x08008736
 8005414:	08008967 	.word	0x08008967
 8005418:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800541a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800541e:	4553      	cmp	r3, sl
 8005420:	bfa8      	it	ge
 8005422:	4653      	movge	r3, sl
 8005424:	2b00      	cmp	r3, #0
 8005426:	4699      	mov	r9, r3
 8005428:	dc36      	bgt.n	8005498 <_printf_float+0x364>
 800542a:	f04f 0b00 	mov.w	fp, #0
 800542e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005432:	f104 021a 	add.w	r2, r4, #26
 8005436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005438:	930a      	str	r3, [sp, #40]	@ 0x28
 800543a:	eba3 0309 	sub.w	r3, r3, r9
 800543e:	455b      	cmp	r3, fp
 8005440:	dc31      	bgt.n	80054a6 <_printf_float+0x372>
 8005442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005444:	459a      	cmp	sl, r3
 8005446:	dc3a      	bgt.n	80054be <_printf_float+0x38a>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	07da      	lsls	r2, r3, #31
 800544c:	d437      	bmi.n	80054be <_printf_float+0x38a>
 800544e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005450:	ebaa 0903 	sub.w	r9, sl, r3
 8005454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005456:	ebaa 0303 	sub.w	r3, sl, r3
 800545a:	4599      	cmp	r9, r3
 800545c:	bfa8      	it	ge
 800545e:	4699      	movge	r9, r3
 8005460:	f1b9 0f00 	cmp.w	r9, #0
 8005464:	dc33      	bgt.n	80054ce <_printf_float+0x39a>
 8005466:	f04f 0800 	mov.w	r8, #0
 800546a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800546e:	f104 0b1a 	add.w	fp, r4, #26
 8005472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005474:	ebaa 0303 	sub.w	r3, sl, r3
 8005478:	eba3 0309 	sub.w	r3, r3, r9
 800547c:	4543      	cmp	r3, r8
 800547e:	f77f af7a 	ble.w	8005376 <_printf_float+0x242>
 8005482:	2301      	movs	r3, #1
 8005484:	465a      	mov	r2, fp
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	47b8      	blx	r7
 800548c:	3001      	adds	r0, #1
 800548e:	f43f aeac 	beq.w	80051ea <_printf_float+0xb6>
 8005492:	f108 0801 	add.w	r8, r8, #1
 8005496:	e7ec      	b.n	8005472 <_printf_float+0x33e>
 8005498:	4642      	mov	r2, r8
 800549a:	4631      	mov	r1, r6
 800549c:	4628      	mov	r0, r5
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	d1c2      	bne.n	800542a <_printf_float+0x2f6>
 80054a4:	e6a1      	b.n	80051ea <_printf_float+0xb6>
 80054a6:	2301      	movs	r3, #1
 80054a8:	4631      	mov	r1, r6
 80054aa:	4628      	mov	r0, r5
 80054ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	f43f ae9a 	beq.w	80051ea <_printf_float+0xb6>
 80054b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054b8:	f10b 0b01 	add.w	fp, fp, #1
 80054bc:	e7bb      	b.n	8005436 <_printf_float+0x302>
 80054be:	4631      	mov	r1, r6
 80054c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b8      	blx	r7
 80054c8:	3001      	adds	r0, #1
 80054ca:	d1c0      	bne.n	800544e <_printf_float+0x31a>
 80054cc:	e68d      	b.n	80051ea <_printf_float+0xb6>
 80054ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054d0:	464b      	mov	r3, r9
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	4442      	add	r2, r8
 80054d8:	47b8      	blx	r7
 80054da:	3001      	adds	r0, #1
 80054dc:	d1c3      	bne.n	8005466 <_printf_float+0x332>
 80054de:	e684      	b.n	80051ea <_printf_float+0xb6>
 80054e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80054e4:	f1ba 0f01 	cmp.w	sl, #1
 80054e8:	dc01      	bgt.n	80054ee <_printf_float+0x3ba>
 80054ea:	07db      	lsls	r3, r3, #31
 80054ec:	d536      	bpl.n	800555c <_printf_float+0x428>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4642      	mov	r2, r8
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f ae76 	beq.w	80051ea <_printf_float+0xb6>
 80054fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	f43f ae6e 	beq.w	80051ea <_printf_float+0xb6>
 800550e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005512:	2200      	movs	r2, #0
 8005514:	2300      	movs	r3, #0
 8005516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800551a:	f7fb fa45 	bl	80009a8 <__aeabi_dcmpeq>
 800551e:	b9c0      	cbnz	r0, 8005552 <_printf_float+0x41e>
 8005520:	4653      	mov	r3, sl
 8005522:	f108 0201 	add.w	r2, r8, #1
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	d10c      	bne.n	800554a <_printf_float+0x416>
 8005530:	e65b      	b.n	80051ea <_printf_float+0xb6>
 8005532:	2301      	movs	r3, #1
 8005534:	465a      	mov	r2, fp
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	47b8      	blx	r7
 800553c:	3001      	adds	r0, #1
 800553e:	f43f ae54 	beq.w	80051ea <_printf_float+0xb6>
 8005542:	f108 0801 	add.w	r8, r8, #1
 8005546:	45d0      	cmp	r8, sl
 8005548:	dbf3      	blt.n	8005532 <_printf_float+0x3fe>
 800554a:	464b      	mov	r3, r9
 800554c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005550:	e6e0      	b.n	8005314 <_printf_float+0x1e0>
 8005552:	f04f 0800 	mov.w	r8, #0
 8005556:	f104 0b1a 	add.w	fp, r4, #26
 800555a:	e7f4      	b.n	8005546 <_printf_float+0x412>
 800555c:	2301      	movs	r3, #1
 800555e:	4642      	mov	r2, r8
 8005560:	e7e1      	b.n	8005526 <_printf_float+0x3f2>
 8005562:	2301      	movs	r3, #1
 8005564:	464a      	mov	r2, r9
 8005566:	4631      	mov	r1, r6
 8005568:	4628      	mov	r0, r5
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	f43f ae3c 	beq.w	80051ea <_printf_float+0xb6>
 8005572:	f108 0801 	add.w	r8, r8, #1
 8005576:	68e3      	ldr	r3, [r4, #12]
 8005578:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800557a:	1a5b      	subs	r3, r3, r1
 800557c:	4543      	cmp	r3, r8
 800557e:	dcf0      	bgt.n	8005562 <_printf_float+0x42e>
 8005580:	e6fd      	b.n	800537e <_printf_float+0x24a>
 8005582:	f04f 0800 	mov.w	r8, #0
 8005586:	f104 0919 	add.w	r9, r4, #25
 800558a:	e7f4      	b.n	8005576 <_printf_float+0x442>

0800558c <_printf_common>:
 800558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	4616      	mov	r6, r2
 8005592:	4698      	mov	r8, r3
 8005594:	688a      	ldr	r2, [r1, #8]
 8005596:	690b      	ldr	r3, [r1, #16]
 8005598:	4607      	mov	r7, r0
 800559a:	4293      	cmp	r3, r2
 800559c:	bfb8      	it	lt
 800559e:	4613      	movlt	r3, r2
 80055a0:	6033      	str	r3, [r6, #0]
 80055a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055a6:	460c      	mov	r4, r1
 80055a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ac:	b10a      	cbz	r2, 80055b2 <_printf_common+0x26>
 80055ae:	3301      	adds	r3, #1
 80055b0:	6033      	str	r3, [r6, #0]
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	0699      	lsls	r1, r3, #26
 80055b6:	bf42      	ittt	mi
 80055b8:	6833      	ldrmi	r3, [r6, #0]
 80055ba:	3302      	addmi	r3, #2
 80055bc:	6033      	strmi	r3, [r6, #0]
 80055be:	6825      	ldr	r5, [r4, #0]
 80055c0:	f015 0506 	ands.w	r5, r5, #6
 80055c4:	d106      	bne.n	80055d4 <_printf_common+0x48>
 80055c6:	f104 0a19 	add.w	sl, r4, #25
 80055ca:	68e3      	ldr	r3, [r4, #12]
 80055cc:	6832      	ldr	r2, [r6, #0]
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	42ab      	cmp	r3, r5
 80055d2:	dc2b      	bgt.n	800562c <_printf_common+0xa0>
 80055d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	3b00      	subs	r3, #0
 80055dc:	bf18      	it	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	0692      	lsls	r2, r2, #26
 80055e2:	d430      	bmi.n	8005646 <_printf_common+0xba>
 80055e4:	4641      	mov	r1, r8
 80055e6:	4638      	mov	r0, r7
 80055e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055ec:	47c8      	blx	r9
 80055ee:	3001      	adds	r0, #1
 80055f0:	d023      	beq.n	800563a <_printf_common+0xae>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	6922      	ldr	r2, [r4, #16]
 80055f6:	f003 0306 	and.w	r3, r3, #6
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	bf14      	ite	ne
 80055fe:	2500      	movne	r5, #0
 8005600:	6833      	ldreq	r3, [r6, #0]
 8005602:	f04f 0600 	mov.w	r6, #0
 8005606:	bf08      	it	eq
 8005608:	68e5      	ldreq	r5, [r4, #12]
 800560a:	f104 041a 	add.w	r4, r4, #26
 800560e:	bf08      	it	eq
 8005610:	1aed      	subeq	r5, r5, r3
 8005612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005616:	bf08      	it	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	4293      	cmp	r3, r2
 800561e:	bfc4      	itt	gt
 8005620:	1a9b      	subgt	r3, r3, r2
 8005622:	18ed      	addgt	r5, r5, r3
 8005624:	42b5      	cmp	r5, r6
 8005626:	d11a      	bne.n	800565e <_printf_common+0xd2>
 8005628:	2000      	movs	r0, #0
 800562a:	e008      	b.n	800563e <_printf_common+0xb2>
 800562c:	2301      	movs	r3, #1
 800562e:	4652      	mov	r2, sl
 8005630:	4641      	mov	r1, r8
 8005632:	4638      	mov	r0, r7
 8005634:	47c8      	blx	r9
 8005636:	3001      	adds	r0, #1
 8005638:	d103      	bne.n	8005642 <_printf_common+0xb6>
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005642:	3501      	adds	r5, #1
 8005644:	e7c1      	b.n	80055ca <_printf_common+0x3e>
 8005646:	2030      	movs	r0, #48	@ 0x30
 8005648:	18e1      	adds	r1, r4, r3
 800564a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005654:	4422      	add	r2, r4
 8005656:	3302      	adds	r3, #2
 8005658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800565c:	e7c2      	b.n	80055e4 <_printf_common+0x58>
 800565e:	2301      	movs	r3, #1
 8005660:	4622      	mov	r2, r4
 8005662:	4641      	mov	r1, r8
 8005664:	4638      	mov	r0, r7
 8005666:	47c8      	blx	r9
 8005668:	3001      	adds	r0, #1
 800566a:	d0e6      	beq.n	800563a <_printf_common+0xae>
 800566c:	3601      	adds	r6, #1
 800566e:	e7d9      	b.n	8005624 <_printf_common+0x98>

08005670 <_printf_i>:
 8005670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	7e0f      	ldrb	r7, [r1, #24]
 8005676:	4691      	mov	r9, r2
 8005678:	2f78      	cmp	r7, #120	@ 0x78
 800567a:	4680      	mov	r8, r0
 800567c:	460c      	mov	r4, r1
 800567e:	469a      	mov	sl, r3
 8005680:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005686:	d807      	bhi.n	8005698 <_printf_i+0x28>
 8005688:	2f62      	cmp	r7, #98	@ 0x62
 800568a:	d80a      	bhi.n	80056a2 <_printf_i+0x32>
 800568c:	2f00      	cmp	r7, #0
 800568e:	f000 80d3 	beq.w	8005838 <_printf_i+0x1c8>
 8005692:	2f58      	cmp	r7, #88	@ 0x58
 8005694:	f000 80ba 	beq.w	800580c <_printf_i+0x19c>
 8005698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800569c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056a0:	e03a      	b.n	8005718 <_printf_i+0xa8>
 80056a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056a6:	2b15      	cmp	r3, #21
 80056a8:	d8f6      	bhi.n	8005698 <_printf_i+0x28>
 80056aa:	a101      	add	r1, pc, #4	@ (adr r1, 80056b0 <_printf_i+0x40>)
 80056ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b0:	08005709 	.word	0x08005709
 80056b4:	0800571d 	.word	0x0800571d
 80056b8:	08005699 	.word	0x08005699
 80056bc:	08005699 	.word	0x08005699
 80056c0:	08005699 	.word	0x08005699
 80056c4:	08005699 	.word	0x08005699
 80056c8:	0800571d 	.word	0x0800571d
 80056cc:	08005699 	.word	0x08005699
 80056d0:	08005699 	.word	0x08005699
 80056d4:	08005699 	.word	0x08005699
 80056d8:	08005699 	.word	0x08005699
 80056dc:	0800581f 	.word	0x0800581f
 80056e0:	08005747 	.word	0x08005747
 80056e4:	080057d9 	.word	0x080057d9
 80056e8:	08005699 	.word	0x08005699
 80056ec:	08005699 	.word	0x08005699
 80056f0:	08005841 	.word	0x08005841
 80056f4:	08005699 	.word	0x08005699
 80056f8:	08005747 	.word	0x08005747
 80056fc:	08005699 	.word	0x08005699
 8005700:	08005699 	.word	0x08005699
 8005704:	080057e1 	.word	0x080057e1
 8005708:	6833      	ldr	r3, [r6, #0]
 800570a:	1d1a      	adds	r2, r3, #4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6032      	str	r2, [r6, #0]
 8005710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005718:	2301      	movs	r3, #1
 800571a:	e09e      	b.n	800585a <_printf_i+0x1ea>
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	6820      	ldr	r0, [r4, #0]
 8005720:	1d19      	adds	r1, r3, #4
 8005722:	6031      	str	r1, [r6, #0]
 8005724:	0606      	lsls	r6, r0, #24
 8005726:	d501      	bpl.n	800572c <_printf_i+0xbc>
 8005728:	681d      	ldr	r5, [r3, #0]
 800572a:	e003      	b.n	8005734 <_printf_i+0xc4>
 800572c:	0645      	lsls	r5, r0, #25
 800572e:	d5fb      	bpl.n	8005728 <_printf_i+0xb8>
 8005730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005734:	2d00      	cmp	r5, #0
 8005736:	da03      	bge.n	8005740 <_printf_i+0xd0>
 8005738:	232d      	movs	r3, #45	@ 0x2d
 800573a:	426d      	negs	r5, r5
 800573c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005740:	230a      	movs	r3, #10
 8005742:	4859      	ldr	r0, [pc, #356]	@ (80058a8 <_printf_i+0x238>)
 8005744:	e011      	b.n	800576a <_printf_i+0xfa>
 8005746:	6821      	ldr	r1, [r4, #0]
 8005748:	6833      	ldr	r3, [r6, #0]
 800574a:	0608      	lsls	r0, r1, #24
 800574c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005750:	d402      	bmi.n	8005758 <_printf_i+0xe8>
 8005752:	0649      	lsls	r1, r1, #25
 8005754:	bf48      	it	mi
 8005756:	b2ad      	uxthmi	r5, r5
 8005758:	2f6f      	cmp	r7, #111	@ 0x6f
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	bf14      	ite	ne
 800575e:	230a      	movne	r3, #10
 8005760:	2308      	moveq	r3, #8
 8005762:	4851      	ldr	r0, [pc, #324]	@ (80058a8 <_printf_i+0x238>)
 8005764:	2100      	movs	r1, #0
 8005766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800576a:	6866      	ldr	r6, [r4, #4]
 800576c:	2e00      	cmp	r6, #0
 800576e:	bfa8      	it	ge
 8005770:	6821      	ldrge	r1, [r4, #0]
 8005772:	60a6      	str	r6, [r4, #8]
 8005774:	bfa4      	itt	ge
 8005776:	f021 0104 	bicge.w	r1, r1, #4
 800577a:	6021      	strge	r1, [r4, #0]
 800577c:	b90d      	cbnz	r5, 8005782 <_printf_i+0x112>
 800577e:	2e00      	cmp	r6, #0
 8005780:	d04b      	beq.n	800581a <_printf_i+0x1aa>
 8005782:	4616      	mov	r6, r2
 8005784:	fbb5 f1f3 	udiv	r1, r5, r3
 8005788:	fb03 5711 	mls	r7, r3, r1, r5
 800578c:	5dc7      	ldrb	r7, [r0, r7]
 800578e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005792:	462f      	mov	r7, r5
 8005794:	42bb      	cmp	r3, r7
 8005796:	460d      	mov	r5, r1
 8005798:	d9f4      	bls.n	8005784 <_printf_i+0x114>
 800579a:	2b08      	cmp	r3, #8
 800579c:	d10b      	bne.n	80057b6 <_printf_i+0x146>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	07df      	lsls	r7, r3, #31
 80057a2:	d508      	bpl.n	80057b6 <_printf_i+0x146>
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	6861      	ldr	r1, [r4, #4]
 80057a8:	4299      	cmp	r1, r3
 80057aa:	bfde      	ittt	le
 80057ac:	2330      	movle	r3, #48	@ 0x30
 80057ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057b6:	1b92      	subs	r2, r2, r6
 80057b8:	6122      	str	r2, [r4, #16]
 80057ba:	464b      	mov	r3, r9
 80057bc:	4621      	mov	r1, r4
 80057be:	4640      	mov	r0, r8
 80057c0:	f8cd a000 	str.w	sl, [sp]
 80057c4:	aa03      	add	r2, sp, #12
 80057c6:	f7ff fee1 	bl	800558c <_printf_common>
 80057ca:	3001      	adds	r0, #1
 80057cc:	d14a      	bne.n	8005864 <_printf_i+0x1f4>
 80057ce:	f04f 30ff 	mov.w	r0, #4294967295
 80057d2:	b004      	add	sp, #16
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	f043 0320 	orr.w	r3, r3, #32
 80057de:	6023      	str	r3, [r4, #0]
 80057e0:	2778      	movs	r7, #120	@ 0x78
 80057e2:	4832      	ldr	r0, [pc, #200]	@ (80058ac <_printf_i+0x23c>)
 80057e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	6831      	ldr	r1, [r6, #0]
 80057ec:	061f      	lsls	r7, r3, #24
 80057ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80057f2:	d402      	bmi.n	80057fa <_printf_i+0x18a>
 80057f4:	065f      	lsls	r7, r3, #25
 80057f6:	bf48      	it	mi
 80057f8:	b2ad      	uxthmi	r5, r5
 80057fa:	6031      	str	r1, [r6, #0]
 80057fc:	07d9      	lsls	r1, r3, #31
 80057fe:	bf44      	itt	mi
 8005800:	f043 0320 	orrmi.w	r3, r3, #32
 8005804:	6023      	strmi	r3, [r4, #0]
 8005806:	b11d      	cbz	r5, 8005810 <_printf_i+0x1a0>
 8005808:	2310      	movs	r3, #16
 800580a:	e7ab      	b.n	8005764 <_printf_i+0xf4>
 800580c:	4826      	ldr	r0, [pc, #152]	@ (80058a8 <_printf_i+0x238>)
 800580e:	e7e9      	b.n	80057e4 <_printf_i+0x174>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	f023 0320 	bic.w	r3, r3, #32
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	e7f6      	b.n	8005808 <_printf_i+0x198>
 800581a:	4616      	mov	r6, r2
 800581c:	e7bd      	b.n	800579a <_printf_i+0x12a>
 800581e:	6833      	ldr	r3, [r6, #0]
 8005820:	6825      	ldr	r5, [r4, #0]
 8005822:	1d18      	adds	r0, r3, #4
 8005824:	6961      	ldr	r1, [r4, #20]
 8005826:	6030      	str	r0, [r6, #0]
 8005828:	062e      	lsls	r6, r5, #24
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	d501      	bpl.n	8005832 <_printf_i+0x1c2>
 800582e:	6019      	str	r1, [r3, #0]
 8005830:	e002      	b.n	8005838 <_printf_i+0x1c8>
 8005832:	0668      	lsls	r0, r5, #25
 8005834:	d5fb      	bpl.n	800582e <_printf_i+0x1be>
 8005836:	8019      	strh	r1, [r3, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	4616      	mov	r6, r2
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	e7bc      	b.n	80057ba <_printf_i+0x14a>
 8005840:	6833      	ldr	r3, [r6, #0]
 8005842:	2100      	movs	r1, #0
 8005844:	1d1a      	adds	r2, r3, #4
 8005846:	6032      	str	r2, [r6, #0]
 8005848:	681e      	ldr	r6, [r3, #0]
 800584a:	6862      	ldr	r2, [r4, #4]
 800584c:	4630      	mov	r0, r6
 800584e:	f000 fa34 	bl	8005cba <memchr>
 8005852:	b108      	cbz	r0, 8005858 <_printf_i+0x1e8>
 8005854:	1b80      	subs	r0, r0, r6
 8005856:	6060      	str	r0, [r4, #4]
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	2300      	movs	r3, #0
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005862:	e7aa      	b.n	80057ba <_printf_i+0x14a>
 8005864:	4632      	mov	r2, r6
 8005866:	4649      	mov	r1, r9
 8005868:	4640      	mov	r0, r8
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	47d0      	blx	sl
 800586e:	3001      	adds	r0, #1
 8005870:	d0ad      	beq.n	80057ce <_printf_i+0x15e>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	079b      	lsls	r3, r3, #30
 8005876:	d413      	bmi.n	80058a0 <_printf_i+0x230>
 8005878:	68e0      	ldr	r0, [r4, #12]
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	4298      	cmp	r0, r3
 800587e:	bfb8      	it	lt
 8005880:	4618      	movlt	r0, r3
 8005882:	e7a6      	b.n	80057d2 <_printf_i+0x162>
 8005884:	2301      	movs	r3, #1
 8005886:	4632      	mov	r2, r6
 8005888:	4649      	mov	r1, r9
 800588a:	4640      	mov	r0, r8
 800588c:	47d0      	blx	sl
 800588e:	3001      	adds	r0, #1
 8005890:	d09d      	beq.n	80057ce <_printf_i+0x15e>
 8005892:	3501      	adds	r5, #1
 8005894:	68e3      	ldr	r3, [r4, #12]
 8005896:	9903      	ldr	r1, [sp, #12]
 8005898:	1a5b      	subs	r3, r3, r1
 800589a:	42ab      	cmp	r3, r5
 800589c:	dcf2      	bgt.n	8005884 <_printf_i+0x214>
 800589e:	e7eb      	b.n	8005878 <_printf_i+0x208>
 80058a0:	2500      	movs	r5, #0
 80058a2:	f104 0619 	add.w	r6, r4, #25
 80058a6:	e7f5      	b.n	8005894 <_printf_i+0x224>
 80058a8:	0800873a 	.word	0x0800873a
 80058ac:	0800874b 	.word	0x0800874b

080058b0 <std>:
 80058b0:	2300      	movs	r3, #0
 80058b2:	b510      	push	{r4, lr}
 80058b4:	4604      	mov	r4, r0
 80058b6:	e9c0 3300 	strd	r3, r3, [r0]
 80058ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058be:	6083      	str	r3, [r0, #8]
 80058c0:	8181      	strh	r1, [r0, #12]
 80058c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80058c4:	81c2      	strh	r2, [r0, #14]
 80058c6:	6183      	str	r3, [r0, #24]
 80058c8:	4619      	mov	r1, r3
 80058ca:	2208      	movs	r2, #8
 80058cc:	305c      	adds	r0, #92	@ 0x5c
 80058ce:	f000 f974 	bl	8005bba <memset>
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <std+0x58>)
 80058d4:	6224      	str	r4, [r4, #32]
 80058d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80058d8:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <std+0x5c>)
 80058da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <std+0x60>)
 80058de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <std+0x64>)
 80058e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80058e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <std+0x68>)
 80058e6:	429c      	cmp	r4, r3
 80058e8:	d006      	beq.n	80058f8 <std+0x48>
 80058ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058ee:	4294      	cmp	r4, r2
 80058f0:	d002      	beq.n	80058f8 <std+0x48>
 80058f2:	33d0      	adds	r3, #208	@ 0xd0
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d105      	bne.n	8005904 <std+0x54>
 80058f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005900:	f000 b9d8 	b.w	8005cb4 <__retarget_lock_init_recursive>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	08005b31 	.word	0x08005b31
 800590c:	08005b57 	.word	0x08005b57
 8005910:	08005b8f 	.word	0x08005b8f
 8005914:	08005bb3 	.word	0x08005bb3
 8005918:	2000040c 	.word	0x2000040c

0800591c <stdio_exit_handler>:
 800591c:	4a02      	ldr	r2, [pc, #8]	@ (8005928 <stdio_exit_handler+0xc>)
 800591e:	4903      	ldr	r1, [pc, #12]	@ (800592c <stdio_exit_handler+0x10>)
 8005920:	4803      	ldr	r0, [pc, #12]	@ (8005930 <stdio_exit_handler+0x14>)
 8005922:	f000 b869 	b.w	80059f8 <_fwalk_sglue>
 8005926:	bf00      	nop
 8005928:	200000b0 	.word	0x200000b0
 800592c:	08007c51 	.word	0x08007c51
 8005930:	200000c0 	.word	0x200000c0

08005934 <cleanup_stdio>:
 8005934:	6841      	ldr	r1, [r0, #4]
 8005936:	4b0c      	ldr	r3, [pc, #48]	@ (8005968 <cleanup_stdio+0x34>)
 8005938:	b510      	push	{r4, lr}
 800593a:	4299      	cmp	r1, r3
 800593c:	4604      	mov	r4, r0
 800593e:	d001      	beq.n	8005944 <cleanup_stdio+0x10>
 8005940:	f002 f986 	bl	8007c50 <_fflush_r>
 8005944:	68a1      	ldr	r1, [r4, #8]
 8005946:	4b09      	ldr	r3, [pc, #36]	@ (800596c <cleanup_stdio+0x38>)
 8005948:	4299      	cmp	r1, r3
 800594a:	d002      	beq.n	8005952 <cleanup_stdio+0x1e>
 800594c:	4620      	mov	r0, r4
 800594e:	f002 f97f 	bl	8007c50 <_fflush_r>
 8005952:	68e1      	ldr	r1, [r4, #12]
 8005954:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <cleanup_stdio+0x3c>)
 8005956:	4299      	cmp	r1, r3
 8005958:	d004      	beq.n	8005964 <cleanup_stdio+0x30>
 800595a:	4620      	mov	r0, r4
 800595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005960:	f002 b976 	b.w	8007c50 <_fflush_r>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	2000040c 	.word	0x2000040c
 800596c:	20000474 	.word	0x20000474
 8005970:	200004dc 	.word	0x200004dc

08005974 <global_stdio_init.part.0>:
 8005974:	b510      	push	{r4, lr}
 8005976:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <global_stdio_init.part.0+0x30>)
 8005978:	4c0b      	ldr	r4, [pc, #44]	@ (80059a8 <global_stdio_init.part.0+0x34>)
 800597a:	4a0c      	ldr	r2, [pc, #48]	@ (80059ac <global_stdio_init.part.0+0x38>)
 800597c:	4620      	mov	r0, r4
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	2104      	movs	r1, #4
 8005982:	2200      	movs	r2, #0
 8005984:	f7ff ff94 	bl	80058b0 <std>
 8005988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800598c:	2201      	movs	r2, #1
 800598e:	2109      	movs	r1, #9
 8005990:	f7ff ff8e 	bl	80058b0 <std>
 8005994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005998:	2202      	movs	r2, #2
 800599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599e:	2112      	movs	r1, #18
 80059a0:	f7ff bf86 	b.w	80058b0 <std>
 80059a4:	20000544 	.word	0x20000544
 80059a8:	2000040c 	.word	0x2000040c
 80059ac:	0800591d 	.word	0x0800591d

080059b0 <__sfp_lock_acquire>:
 80059b0:	4801      	ldr	r0, [pc, #4]	@ (80059b8 <__sfp_lock_acquire+0x8>)
 80059b2:	f000 b980 	b.w	8005cb6 <__retarget_lock_acquire_recursive>
 80059b6:	bf00      	nop
 80059b8:	2000054d 	.word	0x2000054d

080059bc <__sfp_lock_release>:
 80059bc:	4801      	ldr	r0, [pc, #4]	@ (80059c4 <__sfp_lock_release+0x8>)
 80059be:	f000 b97b 	b.w	8005cb8 <__retarget_lock_release_recursive>
 80059c2:	bf00      	nop
 80059c4:	2000054d 	.word	0x2000054d

080059c8 <__sinit>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	4604      	mov	r4, r0
 80059cc:	f7ff fff0 	bl	80059b0 <__sfp_lock_acquire>
 80059d0:	6a23      	ldr	r3, [r4, #32]
 80059d2:	b11b      	cbz	r3, 80059dc <__sinit+0x14>
 80059d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d8:	f7ff bff0 	b.w	80059bc <__sfp_lock_release>
 80059dc:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <__sinit+0x28>)
 80059de:	6223      	str	r3, [r4, #32]
 80059e0:	4b04      	ldr	r3, [pc, #16]	@ (80059f4 <__sinit+0x2c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f5      	bne.n	80059d4 <__sinit+0xc>
 80059e8:	f7ff ffc4 	bl	8005974 <global_stdio_init.part.0>
 80059ec:	e7f2      	b.n	80059d4 <__sinit+0xc>
 80059ee:	bf00      	nop
 80059f0:	08005935 	.word	0x08005935
 80059f4:	20000544 	.word	0x20000544

080059f8 <_fwalk_sglue>:
 80059f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059fc:	4607      	mov	r7, r0
 80059fe:	4688      	mov	r8, r1
 8005a00:	4614      	mov	r4, r2
 8005a02:	2600      	movs	r6, #0
 8005a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a08:	f1b9 0901 	subs.w	r9, r9, #1
 8005a0c:	d505      	bpl.n	8005a1a <_fwalk_sglue+0x22>
 8005a0e:	6824      	ldr	r4, [r4, #0]
 8005a10:	2c00      	cmp	r4, #0
 8005a12:	d1f7      	bne.n	8005a04 <_fwalk_sglue+0xc>
 8005a14:	4630      	mov	r0, r6
 8005a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a1a:	89ab      	ldrh	r3, [r5, #12]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d907      	bls.n	8005a30 <_fwalk_sglue+0x38>
 8005a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a24:	3301      	adds	r3, #1
 8005a26:	d003      	beq.n	8005a30 <_fwalk_sglue+0x38>
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	47c0      	blx	r8
 8005a2e:	4306      	orrs	r6, r0
 8005a30:	3568      	adds	r5, #104	@ 0x68
 8005a32:	e7e9      	b.n	8005a08 <_fwalk_sglue+0x10>

08005a34 <sniprintf>:
 8005a34:	b40c      	push	{r2, r3}
 8005a36:	b530      	push	{r4, r5, lr}
 8005a38:	4b17      	ldr	r3, [pc, #92]	@ (8005a98 <sniprintf+0x64>)
 8005a3a:	1e0c      	subs	r4, r1, #0
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	b09d      	sub	sp, #116	@ 0x74
 8005a40:	da08      	bge.n	8005a54 <sniprintf+0x20>
 8005a42:	238b      	movs	r3, #139	@ 0x8b
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	602b      	str	r3, [r5, #0]
 8005a4a:	b01d      	add	sp, #116	@ 0x74
 8005a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a50:	b002      	add	sp, #8
 8005a52:	4770      	bx	lr
 8005a54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005a58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a5c:	bf0c      	ite	eq
 8005a5e:	4623      	moveq	r3, r4
 8005a60:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a6c:	9002      	str	r0, [sp, #8]
 8005a6e:	9006      	str	r0, [sp, #24]
 8005a70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a74:	4628      	mov	r0, r5
 8005a76:	ab21      	add	r3, sp, #132	@ 0x84
 8005a78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a7a:	a902      	add	r1, sp, #8
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	f001 fc55 	bl	800732c <_svfiprintf_r>
 8005a82:	1c43      	adds	r3, r0, #1
 8005a84:	bfbc      	itt	lt
 8005a86:	238b      	movlt	r3, #139	@ 0x8b
 8005a88:	602b      	strlt	r3, [r5, #0]
 8005a8a:	2c00      	cmp	r4, #0
 8005a8c:	d0dd      	beq.n	8005a4a <sniprintf+0x16>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	9b02      	ldr	r3, [sp, #8]
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e7d9      	b.n	8005a4a <sniprintf+0x16>
 8005a96:	bf00      	nop
 8005a98:	200000bc 	.word	0x200000bc

08005a9c <siprintf>:
 8005a9c:	b40e      	push	{r1, r2, r3}
 8005a9e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005aa2:	b500      	push	{lr}
 8005aa4:	b09c      	sub	sp, #112	@ 0x70
 8005aa6:	ab1d      	add	r3, sp, #116	@ 0x74
 8005aa8:	9002      	str	r0, [sp, #8]
 8005aaa:	9006      	str	r0, [sp, #24]
 8005aac:	9107      	str	r1, [sp, #28]
 8005aae:	9104      	str	r1, [sp, #16]
 8005ab0:	4808      	ldr	r0, [pc, #32]	@ (8005ad4 <siprintf+0x38>)
 8005ab2:	4909      	ldr	r1, [pc, #36]	@ (8005ad8 <siprintf+0x3c>)
 8005ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab8:	9105      	str	r1, [sp, #20]
 8005aba:	6800      	ldr	r0, [r0, #0]
 8005abc:	a902      	add	r1, sp, #8
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	f001 fc34 	bl	800732c <_svfiprintf_r>
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	9b02      	ldr	r3, [sp, #8]
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	b01c      	add	sp, #112	@ 0x70
 8005acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad0:	b003      	add	sp, #12
 8005ad2:	4770      	bx	lr
 8005ad4:	200000bc 	.word	0x200000bc
 8005ad8:	ffff0208 	.word	0xffff0208

08005adc <siscanf>:
 8005adc:	b40e      	push	{r1, r2, r3}
 8005ade:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005ae2:	b530      	push	{r4, r5, lr}
 8005ae4:	b09c      	sub	sp, #112	@ 0x70
 8005ae6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005ae8:	f854 5b04 	ldr.w	r5, [r4], #4
 8005aec:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005af0:	9002      	str	r0, [sp, #8]
 8005af2:	9006      	str	r0, [sp, #24]
 8005af4:	f7fa fb2c 	bl	8000150 <strlen>
 8005af8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <siscanf+0x4c>)
 8005afa:	9003      	str	r0, [sp, #12]
 8005afc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005afe:	2300      	movs	r3, #0
 8005b00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b02:	9314      	str	r3, [sp, #80]	@ 0x50
 8005b04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b08:	9007      	str	r0, [sp, #28]
 8005b0a:	4808      	ldr	r0, [pc, #32]	@ (8005b2c <siscanf+0x50>)
 8005b0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b10:	462a      	mov	r2, r5
 8005b12:	4623      	mov	r3, r4
 8005b14:	a902      	add	r1, sp, #8
 8005b16:	6800      	ldr	r0, [r0, #0]
 8005b18:	9401      	str	r4, [sp, #4]
 8005b1a:	f001 fd5b 	bl	80075d4 <__ssvfiscanf_r>
 8005b1e:	b01c      	add	sp, #112	@ 0x70
 8005b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b24:	b003      	add	sp, #12
 8005b26:	4770      	bx	lr
 8005b28:	08005b53 	.word	0x08005b53
 8005b2c:	200000bc 	.word	0x200000bc

08005b30 <__sread>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	460c      	mov	r4, r1
 8005b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b38:	f000 f86e 	bl	8005c18 <_read_r>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	bfab      	itete	ge
 8005b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b42:	89a3      	ldrhlt	r3, [r4, #12]
 8005b44:	181b      	addge	r3, r3, r0
 8005b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b4a:	bfac      	ite	ge
 8005b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b4e:	81a3      	strhlt	r3, [r4, #12]
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <__seofread>:
 8005b52:	2000      	movs	r0, #0
 8005b54:	4770      	bx	lr

08005b56 <__swrite>:
 8005b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	898b      	ldrh	r3, [r1, #12]
 8005b5e:	4605      	mov	r5, r0
 8005b60:	05db      	lsls	r3, r3, #23
 8005b62:	460c      	mov	r4, r1
 8005b64:	4616      	mov	r6, r2
 8005b66:	d505      	bpl.n	8005b74 <__swrite+0x1e>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b70:	f000 f840 	bl	8005bf4 <_lseek_r>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	4632      	mov	r2, r6
 8005b78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	4628      	mov	r0, r5
 8005b80:	463b      	mov	r3, r7
 8005b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	f000 b857 	b.w	8005c3c <_write_r>

08005b8e <__sseek>:
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	460c      	mov	r4, r1
 8005b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b96:	f000 f82d 	bl	8005bf4 <_lseek_r>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	bf15      	itete	ne
 8005ba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005baa:	81a3      	strheq	r3, [r4, #12]
 8005bac:	bf18      	it	ne
 8005bae:	81a3      	strhne	r3, [r4, #12]
 8005bb0:	bd10      	pop	{r4, pc}

08005bb2 <__sclose>:
 8005bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb6:	f000 b80d 	b.w	8005bd4 <_close_r>

08005bba <memset>:
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d100      	bne.n	8005bc4 <memset+0xa>
 8005bc2:	4770      	bx	lr
 8005bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc8:	e7f9      	b.n	8005bbe <memset+0x4>
	...

08005bcc <_localeconv_r>:
 8005bcc:	4800      	ldr	r0, [pc, #0]	@ (8005bd0 <_localeconv_r+0x4>)
 8005bce:	4770      	bx	lr
 8005bd0:	200001fc 	.word	0x200001fc

08005bd4 <_close_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	4d05      	ldr	r5, [pc, #20]	@ (8005bf0 <_close_r+0x1c>)
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	f7fc fb05 	bl	80021ee <_close>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_close_r+0x1a>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_close_r+0x1a>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	20000548 	.word	0x20000548

08005bf4 <_lseek_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4d05      	ldr	r5, [pc, #20]	@ (8005c14 <_lseek_r+0x20>)
 8005c00:	602a      	str	r2, [r5, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f7fc fb17 	bl	8002236 <_lseek>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d102      	bne.n	8005c12 <_lseek_r+0x1e>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	b103      	cbz	r3, 8005c12 <_lseek_r+0x1e>
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	20000548 	.word	0x20000548

08005c18 <_read_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	2200      	movs	r2, #0
 8005c22:	4d05      	ldr	r5, [pc, #20]	@ (8005c38 <_read_r+0x20>)
 8005c24:	602a      	str	r2, [r5, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f7fc faa8 	bl	800217c <_read>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_read_r+0x1e>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_read_r+0x1e>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	20000548 	.word	0x20000548

08005c3c <_write_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	4611      	mov	r1, r2
 8005c44:	2200      	movs	r2, #0
 8005c46:	4d05      	ldr	r5, [pc, #20]	@ (8005c5c <_write_r+0x20>)
 8005c48:	602a      	str	r2, [r5, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f7fc fab3 	bl	80021b6 <_write>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_write_r+0x1e>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_write_r+0x1e>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	20000548 	.word	0x20000548

08005c60 <__errno>:
 8005c60:	4b01      	ldr	r3, [pc, #4]	@ (8005c68 <__errno+0x8>)
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	200000bc 	.word	0x200000bc

08005c6c <__libc_init_array>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	2600      	movs	r6, #0
 8005c70:	4d0c      	ldr	r5, [pc, #48]	@ (8005ca4 <__libc_init_array+0x38>)
 8005c72:	4c0d      	ldr	r4, [pc, #52]	@ (8005ca8 <__libc_init_array+0x3c>)
 8005c74:	1b64      	subs	r4, r4, r5
 8005c76:	10a4      	asrs	r4, r4, #2
 8005c78:	42a6      	cmp	r6, r4
 8005c7a:	d109      	bne.n	8005c90 <__libc_init_array+0x24>
 8005c7c:	f002 fce2 	bl	8008644 <_init>
 8005c80:	2600      	movs	r6, #0
 8005c82:	4d0a      	ldr	r5, [pc, #40]	@ (8005cac <__libc_init_array+0x40>)
 8005c84:	4c0a      	ldr	r4, [pc, #40]	@ (8005cb0 <__libc_init_array+0x44>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	42a6      	cmp	r6, r4
 8005c8c:	d105      	bne.n	8005c9a <__libc_init_array+0x2e>
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c94:	4798      	blx	r3
 8005c96:	3601      	adds	r6, #1
 8005c98:	e7ee      	b.n	8005c78 <__libc_init_array+0xc>
 8005c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9e:	4798      	blx	r3
 8005ca0:	3601      	adds	r6, #1
 8005ca2:	e7f2      	b.n	8005c8a <__libc_init_array+0x1e>
 8005ca4:	08008abc 	.word	0x08008abc
 8005ca8:	08008abc 	.word	0x08008abc
 8005cac:	08008abc 	.word	0x08008abc
 8005cb0:	08008ac0 	.word	0x08008ac0

08005cb4 <__retarget_lock_init_recursive>:
 8005cb4:	4770      	bx	lr

08005cb6 <__retarget_lock_acquire_recursive>:
 8005cb6:	4770      	bx	lr

08005cb8 <__retarget_lock_release_recursive>:
 8005cb8:	4770      	bx	lr

08005cba <memchr>:
 8005cba:	4603      	mov	r3, r0
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	b2c9      	uxtb	r1, r1
 8005cc0:	4402      	add	r2, r0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	d101      	bne.n	8005ccc <memchr+0x12>
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e003      	b.n	8005cd4 <memchr+0x1a>
 8005ccc:	7804      	ldrb	r4, [r0, #0]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	428c      	cmp	r4, r1
 8005cd2:	d1f6      	bne.n	8005cc2 <memchr+0x8>
 8005cd4:	bd10      	pop	{r4, pc}

08005cd6 <quorem>:
 8005cd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	6903      	ldr	r3, [r0, #16]
 8005cdc:	690c      	ldr	r4, [r1, #16]
 8005cde:	4607      	mov	r7, r0
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	db7e      	blt.n	8005de2 <quorem+0x10c>
 8005ce4:	3c01      	subs	r4, #1
 8005ce6:	00a3      	lsls	r3, r4, #2
 8005ce8:	f100 0514 	add.w	r5, r0, #20
 8005cec:	f101 0814 	add.w	r8, r1, #20
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d00:	3301      	adds	r3, #1
 8005d02:	429a      	cmp	r2, r3
 8005d04:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d0c:	d32e      	bcc.n	8005d6c <quorem+0x96>
 8005d0e:	f04f 0a00 	mov.w	sl, #0
 8005d12:	46c4      	mov	ip, r8
 8005d14:	46ae      	mov	lr, r5
 8005d16:	46d3      	mov	fp, sl
 8005d18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d1c:	b298      	uxth	r0, r3
 8005d1e:	fb06 a000 	mla	r0, r6, r0, sl
 8005d22:	0c1b      	lsrs	r3, r3, #16
 8005d24:	0c02      	lsrs	r2, r0, #16
 8005d26:	fb06 2303 	mla	r3, r6, r3, r2
 8005d2a:	f8de 2000 	ldr.w	r2, [lr]
 8005d2e:	b280      	uxth	r0, r0
 8005d30:	b292      	uxth	r2, r2
 8005d32:	1a12      	subs	r2, r2, r0
 8005d34:	445a      	add	r2, fp
 8005d36:	f8de 0000 	ldr.w	r0, [lr]
 8005d3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d4e:	45e1      	cmp	r9, ip
 8005d50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d54:	f84e 2b04 	str.w	r2, [lr], #4
 8005d58:	d2de      	bcs.n	8005d18 <quorem+0x42>
 8005d5a:	9b00      	ldr	r3, [sp, #0]
 8005d5c:	58eb      	ldr	r3, [r5, r3]
 8005d5e:	b92b      	cbnz	r3, 8005d6c <quorem+0x96>
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	429d      	cmp	r5, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	d32f      	bcc.n	8005dca <quorem+0xf4>
 8005d6a:	613c      	str	r4, [r7, #16]
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f001 f979 	bl	8007064 <__mcmp>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	db25      	blt.n	8005dc2 <quorem+0xec>
 8005d76:	4629      	mov	r1, r5
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d7e:	f8d1 c000 	ldr.w	ip, [r1]
 8005d82:	fa1f fe82 	uxth.w	lr, r2
 8005d86:	fa1f f38c 	uxth.w	r3, ip
 8005d8a:	eba3 030e 	sub.w	r3, r3, lr
 8005d8e:	4403      	add	r3, r0
 8005d90:	0c12      	lsrs	r2, r2, #16
 8005d92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005da0:	45c1      	cmp	r9, r8
 8005da2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005da6:	f841 3b04 	str.w	r3, [r1], #4
 8005daa:	d2e6      	bcs.n	8005d7a <quorem+0xa4>
 8005dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005db4:	b922      	cbnz	r2, 8005dc0 <quorem+0xea>
 8005db6:	3b04      	subs	r3, #4
 8005db8:	429d      	cmp	r5, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	d30b      	bcc.n	8005dd6 <quorem+0x100>
 8005dbe:	613c      	str	r4, [r7, #16]
 8005dc0:	3601      	adds	r6, #1
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	b003      	add	sp, #12
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	3b04      	subs	r3, #4
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d1cb      	bne.n	8005d6a <quorem+0x94>
 8005dd2:	3c01      	subs	r4, #1
 8005dd4:	e7c6      	b.n	8005d64 <quorem+0x8e>
 8005dd6:	6812      	ldr	r2, [r2, #0]
 8005dd8:	3b04      	subs	r3, #4
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d1ef      	bne.n	8005dbe <quorem+0xe8>
 8005dde:	3c01      	subs	r4, #1
 8005de0:	e7ea      	b.n	8005db8 <quorem+0xe2>
 8005de2:	2000      	movs	r0, #0
 8005de4:	e7ee      	b.n	8005dc4 <quorem+0xee>
	...

08005de8 <_dtoa_r>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	4614      	mov	r4, r2
 8005dee:	461d      	mov	r5, r3
 8005df0:	69c7      	ldr	r7, [r0, #28]
 8005df2:	b097      	sub	sp, #92	@ 0x5c
 8005df4:	4683      	mov	fp, r0
 8005df6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005dfa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005dfc:	b97f      	cbnz	r7, 8005e1e <_dtoa_r+0x36>
 8005dfe:	2010      	movs	r0, #16
 8005e00:	f000 fe02 	bl	8006a08 <malloc>
 8005e04:	4602      	mov	r2, r0
 8005e06:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e0a:	b920      	cbnz	r0, 8005e16 <_dtoa_r+0x2e>
 8005e0c:	21ef      	movs	r1, #239	@ 0xef
 8005e0e:	4ba8      	ldr	r3, [pc, #672]	@ (80060b0 <_dtoa_r+0x2c8>)
 8005e10:	48a8      	ldr	r0, [pc, #672]	@ (80060b4 <_dtoa_r+0x2cc>)
 8005e12:	f001 ffef 	bl	8007df4 <__assert_func>
 8005e16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e1a:	6007      	str	r7, [r0, #0]
 8005e1c:	60c7      	str	r7, [r0, #12]
 8005e1e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	b159      	cbz	r1, 8005e3e <_dtoa_r+0x56>
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4093      	lsls	r3, r2
 8005e2c:	604a      	str	r2, [r1, #4]
 8005e2e:	608b      	str	r3, [r1, #8]
 8005e30:	4658      	mov	r0, fp
 8005e32:	f000 fedf 	bl	8006bf4 <_Bfree>
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	1e2b      	subs	r3, r5, #0
 8005e40:	bfaf      	iteee	ge
 8005e42:	2300      	movge	r3, #0
 8005e44:	2201      	movlt	r2, #1
 8005e46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e4a:	9303      	strlt	r3, [sp, #12]
 8005e4c:	bfa8      	it	ge
 8005e4e:	6033      	strge	r3, [r6, #0]
 8005e50:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e54:	4b98      	ldr	r3, [pc, #608]	@ (80060b8 <_dtoa_r+0x2d0>)
 8005e56:	bfb8      	it	lt
 8005e58:	6032      	strlt	r2, [r6, #0]
 8005e5a:	ea33 0308 	bics.w	r3, r3, r8
 8005e5e:	d112      	bne.n	8005e86 <_dtoa_r+0x9e>
 8005e60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e6c:	4323      	orrs	r3, r4
 8005e6e:	f000 8550 	beq.w	8006912 <_dtoa_r+0xb2a>
 8005e72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e74:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80060bc <_dtoa_r+0x2d4>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8552 	beq.w	8006922 <_dtoa_r+0xb3a>
 8005e7e:	f10a 0303 	add.w	r3, sl, #3
 8005e82:	f000 bd4c 	b.w	800691e <_dtoa_r+0xb36>
 8005e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e92:	2200      	movs	r2, #0
 8005e94:	2300      	movs	r3, #0
 8005e96:	f7fa fd87 	bl	80009a8 <__aeabi_dcmpeq>
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	b158      	cbz	r0, 8005eb6 <_dtoa_r+0xce>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ea6:	b113      	cbz	r3, 8005eae <_dtoa_r+0xc6>
 8005ea8:	4b85      	ldr	r3, [pc, #532]	@ (80060c0 <_dtoa_r+0x2d8>)
 8005eaa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80060c4 <_dtoa_r+0x2dc>
 8005eb2:	f000 bd36 	b.w	8006922 <_dtoa_r+0xb3a>
 8005eb6:	ab14      	add	r3, sp, #80	@ 0x50
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	ab15      	add	r3, sp, #84	@ 0x54
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	4658      	mov	r0, fp
 8005ec0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005ec4:	f001 f97e 	bl	80071c4 <__d2b>
 8005ec8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005ecc:	4681      	mov	r9, r0
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d077      	beq.n	8005fc2 <_dtoa_r+0x1da>
 8005ed2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ed8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ee0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ee4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ee8:	9712      	str	r7, [sp, #72]	@ 0x48
 8005eea:	4619      	mov	r1, r3
 8005eec:	2200      	movs	r2, #0
 8005eee:	4b76      	ldr	r3, [pc, #472]	@ (80060c8 <_dtoa_r+0x2e0>)
 8005ef0:	f7fa f93a 	bl	8000168 <__aeabi_dsub>
 8005ef4:	a368      	add	r3, pc, #416	@ (adr r3, 8006098 <_dtoa_r+0x2b0>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f7fa faed 	bl	80004d8 <__aeabi_dmul>
 8005efe:	a368      	add	r3, pc, #416	@ (adr r3, 80060a0 <_dtoa_r+0x2b8>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa f932 	bl	800016c <__adddf3>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	460d      	mov	r5, r1
 8005f0e:	f7fa fa79 	bl	8000404 <__aeabi_i2d>
 8005f12:	a365      	add	r3, pc, #404	@ (adr r3, 80060a8 <_dtoa_r+0x2c0>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa fade 	bl	80004d8 <__aeabi_dmul>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4620      	mov	r0, r4
 8005f22:	4629      	mov	r1, r5
 8005f24:	f7fa f922 	bl	800016c <__adddf3>
 8005f28:	4604      	mov	r4, r0
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	f7fa fd84 	bl	8000a38 <__aeabi_d2iz>
 8005f30:	2200      	movs	r2, #0
 8005f32:	4607      	mov	r7, r0
 8005f34:	2300      	movs	r3, #0
 8005f36:	4620      	mov	r0, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	f7fa fd3f 	bl	80009bc <__aeabi_dcmplt>
 8005f3e:	b140      	cbz	r0, 8005f52 <_dtoa_r+0x16a>
 8005f40:	4638      	mov	r0, r7
 8005f42:	f7fa fa5f 	bl	8000404 <__aeabi_i2d>
 8005f46:	4622      	mov	r2, r4
 8005f48:	462b      	mov	r3, r5
 8005f4a:	f7fa fd2d 	bl	80009a8 <__aeabi_dcmpeq>
 8005f4e:	b900      	cbnz	r0, 8005f52 <_dtoa_r+0x16a>
 8005f50:	3f01      	subs	r7, #1
 8005f52:	2f16      	cmp	r7, #22
 8005f54:	d853      	bhi.n	8005ffe <_dtoa_r+0x216>
 8005f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80060cc <_dtoa_r+0x2e4>)
 8005f5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa fd2a 	bl	80009bc <__aeabi_dcmplt>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d04a      	beq.n	8006002 <_dtoa_r+0x21a>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	3f01      	subs	r7, #1
 8005f70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f74:	1b9b      	subs	r3, r3, r6
 8005f76:	1e5a      	subs	r2, r3, #1
 8005f78:	bf46      	itte	mi
 8005f7a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f7e:	2300      	movmi	r3, #0
 8005f80:	f04f 0800 	movpl.w	r8, #0
 8005f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f86:	bf48      	it	mi
 8005f88:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005f8a:	2f00      	cmp	r7, #0
 8005f8c:	db3b      	blt.n	8006006 <_dtoa_r+0x21e>
 8005f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f90:	970e      	str	r7, [sp, #56]	@ 0x38
 8005f92:	443b      	add	r3, r7
 8005f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f96:	2300      	movs	r3, #0
 8005f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f9c:	2b09      	cmp	r3, #9
 8005f9e:	d866      	bhi.n	800606e <_dtoa_r+0x286>
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	bfc4      	itt	gt
 8005fa4:	3b04      	subgt	r3, #4
 8005fa6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005fa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005faa:	bfc8      	it	gt
 8005fac:	2400      	movgt	r4, #0
 8005fae:	f1a3 0302 	sub.w	r3, r3, #2
 8005fb2:	bfd8      	it	le
 8005fb4:	2401      	movle	r4, #1
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d864      	bhi.n	8006084 <_dtoa_r+0x29c>
 8005fba:	e8df f003 	tbb	[pc, r3]
 8005fbe:	382b      	.short	0x382b
 8005fc0:	5636      	.short	0x5636
 8005fc2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005fc6:	441e      	add	r6, r3
 8005fc8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	bfc1      	itttt	gt
 8005fd0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005fd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005fd8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005fdc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005fe0:	bfd6      	itet	le
 8005fe2:	f1c3 0320 	rsble	r3, r3, #32
 8005fe6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005fea:	fa04 f003 	lslle.w	r0, r4, r3
 8005fee:	f7fa f9f9 	bl	80003e4 <__aeabi_ui2d>
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005ff8:	3e01      	subs	r6, #1
 8005ffa:	9212      	str	r2, [sp, #72]	@ 0x48
 8005ffc:	e775      	b.n	8005eea <_dtoa_r+0x102>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e7b6      	b.n	8005f70 <_dtoa_r+0x188>
 8006002:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006004:	e7b5      	b.n	8005f72 <_dtoa_r+0x18a>
 8006006:	427b      	negs	r3, r7
 8006008:	930a      	str	r3, [sp, #40]	@ 0x28
 800600a:	2300      	movs	r3, #0
 800600c:	eba8 0807 	sub.w	r8, r8, r7
 8006010:	930e      	str	r3, [sp, #56]	@ 0x38
 8006012:	e7c2      	b.n	8005f9a <_dtoa_r+0x1b2>
 8006014:	2300      	movs	r3, #0
 8006016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006018:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800601a:	2b00      	cmp	r3, #0
 800601c:	dc35      	bgt.n	800608a <_dtoa_r+0x2a2>
 800601e:	2301      	movs	r3, #1
 8006020:	461a      	mov	r2, r3
 8006022:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006026:	9221      	str	r2, [sp, #132]	@ 0x84
 8006028:	e00b      	b.n	8006042 <_dtoa_r+0x25a>
 800602a:	2301      	movs	r3, #1
 800602c:	e7f3      	b.n	8006016 <_dtoa_r+0x22e>
 800602e:	2300      	movs	r3, #0
 8006030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006032:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	9308      	str	r3, [sp, #32]
 8006038:	3301      	adds	r3, #1
 800603a:	2b01      	cmp	r3, #1
 800603c:	9307      	str	r3, [sp, #28]
 800603e:	bfb8      	it	lt
 8006040:	2301      	movlt	r3, #1
 8006042:	2100      	movs	r1, #0
 8006044:	2204      	movs	r2, #4
 8006046:	f8db 001c 	ldr.w	r0, [fp, #28]
 800604a:	f102 0514 	add.w	r5, r2, #20
 800604e:	429d      	cmp	r5, r3
 8006050:	d91f      	bls.n	8006092 <_dtoa_r+0x2aa>
 8006052:	6041      	str	r1, [r0, #4]
 8006054:	4658      	mov	r0, fp
 8006056:	f000 fd8d 	bl	8006b74 <_Balloc>
 800605a:	4682      	mov	sl, r0
 800605c:	2800      	cmp	r0, #0
 800605e:	d139      	bne.n	80060d4 <_dtoa_r+0x2ec>
 8006060:	4602      	mov	r2, r0
 8006062:	f240 11af 	movw	r1, #431	@ 0x1af
 8006066:	4b1a      	ldr	r3, [pc, #104]	@ (80060d0 <_dtoa_r+0x2e8>)
 8006068:	e6d2      	b.n	8005e10 <_dtoa_r+0x28>
 800606a:	2301      	movs	r3, #1
 800606c:	e7e0      	b.n	8006030 <_dtoa_r+0x248>
 800606e:	2401      	movs	r4, #1
 8006070:	2300      	movs	r3, #0
 8006072:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006074:	9320      	str	r3, [sp, #128]	@ 0x80
 8006076:	f04f 33ff 	mov.w	r3, #4294967295
 800607a:	2200      	movs	r2, #0
 800607c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006080:	2312      	movs	r3, #18
 8006082:	e7d0      	b.n	8006026 <_dtoa_r+0x23e>
 8006084:	2301      	movs	r3, #1
 8006086:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006088:	e7f5      	b.n	8006076 <_dtoa_r+0x28e>
 800608a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800608c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006090:	e7d7      	b.n	8006042 <_dtoa_r+0x25a>
 8006092:	3101      	adds	r1, #1
 8006094:	0052      	lsls	r2, r2, #1
 8006096:	e7d8      	b.n	800604a <_dtoa_r+0x262>
 8006098:	636f4361 	.word	0x636f4361
 800609c:	3fd287a7 	.word	0x3fd287a7
 80060a0:	8b60c8b3 	.word	0x8b60c8b3
 80060a4:	3fc68a28 	.word	0x3fc68a28
 80060a8:	509f79fb 	.word	0x509f79fb
 80060ac:	3fd34413 	.word	0x3fd34413
 80060b0:	08008769 	.word	0x08008769
 80060b4:	08008780 	.word	0x08008780
 80060b8:	7ff00000 	.word	0x7ff00000
 80060bc:	08008765 	.word	0x08008765
 80060c0:	08008968 	.word	0x08008968
 80060c4:	08008967 	.word	0x08008967
 80060c8:	3ff80000 	.word	0x3ff80000
 80060cc:	08008878 	.word	0x08008878
 80060d0:	080087d8 	.word	0x080087d8
 80060d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060d8:	6018      	str	r0, [r3, #0]
 80060da:	9b07      	ldr	r3, [sp, #28]
 80060dc:	2b0e      	cmp	r3, #14
 80060de:	f200 80a4 	bhi.w	800622a <_dtoa_r+0x442>
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	f000 80a1 	beq.w	800622a <_dtoa_r+0x442>
 80060e8:	2f00      	cmp	r7, #0
 80060ea:	dd33      	ble.n	8006154 <_dtoa_r+0x36c>
 80060ec:	4b86      	ldr	r3, [pc, #536]	@ (8006308 <_dtoa_r+0x520>)
 80060ee:	f007 020f 	and.w	r2, r7, #15
 80060f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f6:	05f8      	lsls	r0, r7, #23
 80060f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006100:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006104:	d516      	bpl.n	8006134 <_dtoa_r+0x34c>
 8006106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800610a:	4b80      	ldr	r3, [pc, #512]	@ (800630c <_dtoa_r+0x524>)
 800610c:	2603      	movs	r6, #3
 800610e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006112:	f7fa fb0b 	bl	800072c <__aeabi_ddiv>
 8006116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800611a:	f004 040f 	and.w	r4, r4, #15
 800611e:	4d7b      	ldr	r5, [pc, #492]	@ (800630c <_dtoa_r+0x524>)
 8006120:	b954      	cbnz	r4, 8006138 <_dtoa_r+0x350>
 8006122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800612a:	f7fa faff 	bl	800072c <__aeabi_ddiv>
 800612e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006132:	e028      	b.n	8006186 <_dtoa_r+0x39e>
 8006134:	2602      	movs	r6, #2
 8006136:	e7f2      	b.n	800611e <_dtoa_r+0x336>
 8006138:	07e1      	lsls	r1, r4, #31
 800613a:	d508      	bpl.n	800614e <_dtoa_r+0x366>
 800613c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006140:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006144:	f7fa f9c8 	bl	80004d8 <__aeabi_dmul>
 8006148:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800614c:	3601      	adds	r6, #1
 800614e:	1064      	asrs	r4, r4, #1
 8006150:	3508      	adds	r5, #8
 8006152:	e7e5      	b.n	8006120 <_dtoa_r+0x338>
 8006154:	f000 80d2 	beq.w	80062fc <_dtoa_r+0x514>
 8006158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800615c:	427c      	negs	r4, r7
 800615e:	4b6a      	ldr	r3, [pc, #424]	@ (8006308 <_dtoa_r+0x520>)
 8006160:	f004 020f 	and.w	r2, r4, #15
 8006164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f7fa f9b4 	bl	80004d8 <__aeabi_dmul>
 8006170:	2602      	movs	r6, #2
 8006172:	2300      	movs	r3, #0
 8006174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006178:	4d64      	ldr	r5, [pc, #400]	@ (800630c <_dtoa_r+0x524>)
 800617a:	1124      	asrs	r4, r4, #4
 800617c:	2c00      	cmp	r4, #0
 800617e:	f040 80b2 	bne.w	80062e6 <_dtoa_r+0x4fe>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1d3      	bne.n	800612e <_dtoa_r+0x346>
 8006186:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800618a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80b7 	beq.w	8006300 <_dtoa_r+0x518>
 8006192:	2200      	movs	r2, #0
 8006194:	4620      	mov	r0, r4
 8006196:	4629      	mov	r1, r5
 8006198:	4b5d      	ldr	r3, [pc, #372]	@ (8006310 <_dtoa_r+0x528>)
 800619a:	f7fa fc0f 	bl	80009bc <__aeabi_dcmplt>
 800619e:	2800      	cmp	r0, #0
 80061a0:	f000 80ae 	beq.w	8006300 <_dtoa_r+0x518>
 80061a4:	9b07      	ldr	r3, [sp, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80aa 	beq.w	8006300 <_dtoa_r+0x518>
 80061ac:	9b08      	ldr	r3, [sp, #32]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	dd37      	ble.n	8006222 <_dtoa_r+0x43a>
 80061b2:	1e7b      	subs	r3, r7, #1
 80061b4:	4620      	mov	r0, r4
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	2200      	movs	r2, #0
 80061ba:	4629      	mov	r1, r5
 80061bc:	4b55      	ldr	r3, [pc, #340]	@ (8006314 <_dtoa_r+0x52c>)
 80061be:	f7fa f98b 	bl	80004d8 <__aeabi_dmul>
 80061c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c6:	9c08      	ldr	r4, [sp, #32]
 80061c8:	3601      	adds	r6, #1
 80061ca:	4630      	mov	r0, r6
 80061cc:	f7fa f91a 	bl	8000404 <__aeabi_i2d>
 80061d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d4:	f7fa f980 	bl	80004d8 <__aeabi_dmul>
 80061d8:	2200      	movs	r2, #0
 80061da:	4b4f      	ldr	r3, [pc, #316]	@ (8006318 <_dtoa_r+0x530>)
 80061dc:	f7f9 ffc6 	bl	800016c <__adddf3>
 80061e0:	4605      	mov	r5, r0
 80061e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061e6:	2c00      	cmp	r4, #0
 80061e8:	f040 809a 	bne.w	8006320 <_dtoa_r+0x538>
 80061ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f0:	2200      	movs	r2, #0
 80061f2:	4b4a      	ldr	r3, [pc, #296]	@ (800631c <_dtoa_r+0x534>)
 80061f4:	f7f9 ffb8 	bl	8000168 <__aeabi_dsub>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006200:	462a      	mov	r2, r5
 8006202:	4633      	mov	r3, r6
 8006204:	f7fa fbf8 	bl	80009f8 <__aeabi_dcmpgt>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 828e 	bne.w	800672a <_dtoa_r+0x942>
 800620e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006212:	462a      	mov	r2, r5
 8006214:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006218:	f7fa fbd0 	bl	80009bc <__aeabi_dcmplt>
 800621c:	2800      	cmp	r0, #0
 800621e:	f040 8127 	bne.w	8006470 <_dtoa_r+0x688>
 8006222:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006226:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800622a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800622c:	2b00      	cmp	r3, #0
 800622e:	f2c0 8163 	blt.w	80064f8 <_dtoa_r+0x710>
 8006232:	2f0e      	cmp	r7, #14
 8006234:	f300 8160 	bgt.w	80064f8 <_dtoa_r+0x710>
 8006238:	4b33      	ldr	r3, [pc, #204]	@ (8006308 <_dtoa_r+0x520>)
 800623a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800623e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006242:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006246:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006248:	2b00      	cmp	r3, #0
 800624a:	da03      	bge.n	8006254 <_dtoa_r+0x46c>
 800624c:	9b07      	ldr	r3, [sp, #28]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f340 8100 	ble.w	8006454 <_dtoa_r+0x66c>
 8006254:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006258:	4656      	mov	r6, sl
 800625a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa fa63 	bl	800072c <__aeabi_ddiv>
 8006266:	f7fa fbe7 	bl	8000a38 <__aeabi_d2iz>
 800626a:	4680      	mov	r8, r0
 800626c:	f7fa f8ca 	bl	8000404 <__aeabi_i2d>
 8006270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006274:	f7fa f930 	bl	80004d8 <__aeabi_dmul>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4620      	mov	r0, r4
 800627e:	4629      	mov	r1, r5
 8006280:	f7f9 ff72 	bl	8000168 <__aeabi_dsub>
 8006284:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006288:	9d07      	ldr	r5, [sp, #28]
 800628a:	f806 4b01 	strb.w	r4, [r6], #1
 800628e:	eba6 040a 	sub.w	r4, r6, sl
 8006292:	42a5      	cmp	r5, r4
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	f040 8116 	bne.w	80064c8 <_dtoa_r+0x6e0>
 800629c:	f7f9 ff66 	bl	800016c <__adddf3>
 80062a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a4:	4604      	mov	r4, r0
 80062a6:	460d      	mov	r5, r1
 80062a8:	f7fa fba6 	bl	80009f8 <__aeabi_dcmpgt>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f040 80f8 	bne.w	80064a2 <_dtoa_r+0x6ba>
 80062b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa fb75 	bl	80009a8 <__aeabi_dcmpeq>
 80062be:	b118      	cbz	r0, 80062c8 <_dtoa_r+0x4e0>
 80062c0:	f018 0f01 	tst.w	r8, #1
 80062c4:	f040 80ed 	bne.w	80064a2 <_dtoa_r+0x6ba>
 80062c8:	4649      	mov	r1, r9
 80062ca:	4658      	mov	r0, fp
 80062cc:	f000 fc92 	bl	8006bf4 <_Bfree>
 80062d0:	2300      	movs	r3, #0
 80062d2:	7033      	strb	r3, [r6, #0]
 80062d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80062d6:	3701      	adds	r7, #1
 80062d8:	601f      	str	r7, [r3, #0]
 80062da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8320 	beq.w	8006922 <_dtoa_r+0xb3a>
 80062e2:	601e      	str	r6, [r3, #0]
 80062e4:	e31d      	b.n	8006922 <_dtoa_r+0xb3a>
 80062e6:	07e2      	lsls	r2, r4, #31
 80062e8:	d505      	bpl.n	80062f6 <_dtoa_r+0x50e>
 80062ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062ee:	f7fa f8f3 	bl	80004d8 <__aeabi_dmul>
 80062f2:	2301      	movs	r3, #1
 80062f4:	3601      	adds	r6, #1
 80062f6:	1064      	asrs	r4, r4, #1
 80062f8:	3508      	adds	r5, #8
 80062fa:	e73f      	b.n	800617c <_dtoa_r+0x394>
 80062fc:	2602      	movs	r6, #2
 80062fe:	e742      	b.n	8006186 <_dtoa_r+0x39e>
 8006300:	9c07      	ldr	r4, [sp, #28]
 8006302:	9704      	str	r7, [sp, #16]
 8006304:	e761      	b.n	80061ca <_dtoa_r+0x3e2>
 8006306:	bf00      	nop
 8006308:	08008878 	.word	0x08008878
 800630c:	08008850 	.word	0x08008850
 8006310:	3ff00000 	.word	0x3ff00000
 8006314:	40240000 	.word	0x40240000
 8006318:	401c0000 	.word	0x401c0000
 800631c:	40140000 	.word	0x40140000
 8006320:	4b70      	ldr	r3, [pc, #448]	@ (80064e4 <_dtoa_r+0x6fc>)
 8006322:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006324:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006328:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800632c:	4454      	add	r4, sl
 800632e:	2900      	cmp	r1, #0
 8006330:	d045      	beq.n	80063be <_dtoa_r+0x5d6>
 8006332:	2000      	movs	r0, #0
 8006334:	496c      	ldr	r1, [pc, #432]	@ (80064e8 <_dtoa_r+0x700>)
 8006336:	f7fa f9f9 	bl	800072c <__aeabi_ddiv>
 800633a:	4633      	mov	r3, r6
 800633c:	462a      	mov	r2, r5
 800633e:	f7f9 ff13 	bl	8000168 <__aeabi_dsub>
 8006342:	4656      	mov	r6, sl
 8006344:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800634c:	f7fa fb74 	bl	8000a38 <__aeabi_d2iz>
 8006350:	4605      	mov	r5, r0
 8006352:	f7fa f857 	bl	8000404 <__aeabi_i2d>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800635e:	f7f9 ff03 	bl	8000168 <__aeabi_dsub>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	3530      	adds	r5, #48	@ 0x30
 8006368:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800636c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006370:	f806 5b01 	strb.w	r5, [r6], #1
 8006374:	f7fa fb22 	bl	80009bc <__aeabi_dcmplt>
 8006378:	2800      	cmp	r0, #0
 800637a:	d163      	bne.n	8006444 <_dtoa_r+0x65c>
 800637c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006380:	2000      	movs	r0, #0
 8006382:	495a      	ldr	r1, [pc, #360]	@ (80064ec <_dtoa_r+0x704>)
 8006384:	f7f9 fef0 	bl	8000168 <__aeabi_dsub>
 8006388:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800638c:	f7fa fb16 	bl	80009bc <__aeabi_dcmplt>
 8006390:	2800      	cmp	r0, #0
 8006392:	f040 8087 	bne.w	80064a4 <_dtoa_r+0x6bc>
 8006396:	42a6      	cmp	r6, r4
 8006398:	f43f af43 	beq.w	8006222 <_dtoa_r+0x43a>
 800639c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063a0:	2200      	movs	r2, #0
 80063a2:	4b53      	ldr	r3, [pc, #332]	@ (80064f0 <_dtoa_r+0x708>)
 80063a4:	f7fa f898 	bl	80004d8 <__aeabi_dmul>
 80063a8:	2200      	movs	r2, #0
 80063aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063b2:	4b4f      	ldr	r3, [pc, #316]	@ (80064f0 <_dtoa_r+0x708>)
 80063b4:	f7fa f890 	bl	80004d8 <__aeabi_dmul>
 80063b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063bc:	e7c4      	b.n	8006348 <_dtoa_r+0x560>
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	f7fa f889 	bl	80004d8 <__aeabi_dmul>
 80063c6:	4656      	mov	r6, sl
 80063c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063cc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80063ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d2:	f7fa fb31 	bl	8000a38 <__aeabi_d2iz>
 80063d6:	4605      	mov	r5, r0
 80063d8:	f7fa f814 	bl	8000404 <__aeabi_i2d>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e4:	f7f9 fec0 	bl	8000168 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	3530      	adds	r5, #48	@ 0x30
 80063ee:	f806 5b01 	strb.w	r5, [r6], #1
 80063f2:	42a6      	cmp	r6, r4
 80063f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	d124      	bne.n	8006448 <_dtoa_r+0x660>
 80063fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006402:	4b39      	ldr	r3, [pc, #228]	@ (80064e8 <_dtoa_r+0x700>)
 8006404:	f7f9 feb2 	bl	800016c <__adddf3>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006410:	f7fa faf2 	bl	80009f8 <__aeabi_dcmpgt>
 8006414:	2800      	cmp	r0, #0
 8006416:	d145      	bne.n	80064a4 <_dtoa_r+0x6bc>
 8006418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800641c:	2000      	movs	r0, #0
 800641e:	4932      	ldr	r1, [pc, #200]	@ (80064e8 <_dtoa_r+0x700>)
 8006420:	f7f9 fea2 	bl	8000168 <__aeabi_dsub>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642c:	f7fa fac6 	bl	80009bc <__aeabi_dcmplt>
 8006430:	2800      	cmp	r0, #0
 8006432:	f43f aef6 	beq.w	8006222 <_dtoa_r+0x43a>
 8006436:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006438:	1e73      	subs	r3, r6, #1
 800643a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800643c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006440:	2b30      	cmp	r3, #48	@ 0x30
 8006442:	d0f8      	beq.n	8006436 <_dtoa_r+0x64e>
 8006444:	9f04      	ldr	r7, [sp, #16]
 8006446:	e73f      	b.n	80062c8 <_dtoa_r+0x4e0>
 8006448:	4b29      	ldr	r3, [pc, #164]	@ (80064f0 <_dtoa_r+0x708>)
 800644a:	f7fa f845 	bl	80004d8 <__aeabi_dmul>
 800644e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006452:	e7bc      	b.n	80063ce <_dtoa_r+0x5e6>
 8006454:	d10c      	bne.n	8006470 <_dtoa_r+0x688>
 8006456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800645a:	2200      	movs	r2, #0
 800645c:	4b25      	ldr	r3, [pc, #148]	@ (80064f4 <_dtoa_r+0x70c>)
 800645e:	f7fa f83b 	bl	80004d8 <__aeabi_dmul>
 8006462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006466:	f7fa fabd 	bl	80009e4 <__aeabi_dcmpge>
 800646a:	2800      	cmp	r0, #0
 800646c:	f000 815b 	beq.w	8006726 <_dtoa_r+0x93e>
 8006470:	2400      	movs	r4, #0
 8006472:	4625      	mov	r5, r4
 8006474:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006476:	4656      	mov	r6, sl
 8006478:	43db      	mvns	r3, r3
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	2700      	movs	r7, #0
 800647e:	4621      	mov	r1, r4
 8006480:	4658      	mov	r0, fp
 8006482:	f000 fbb7 	bl	8006bf4 <_Bfree>
 8006486:	2d00      	cmp	r5, #0
 8006488:	d0dc      	beq.n	8006444 <_dtoa_r+0x65c>
 800648a:	b12f      	cbz	r7, 8006498 <_dtoa_r+0x6b0>
 800648c:	42af      	cmp	r7, r5
 800648e:	d003      	beq.n	8006498 <_dtoa_r+0x6b0>
 8006490:	4639      	mov	r1, r7
 8006492:	4658      	mov	r0, fp
 8006494:	f000 fbae 	bl	8006bf4 <_Bfree>
 8006498:	4629      	mov	r1, r5
 800649a:	4658      	mov	r0, fp
 800649c:	f000 fbaa 	bl	8006bf4 <_Bfree>
 80064a0:	e7d0      	b.n	8006444 <_dtoa_r+0x65c>
 80064a2:	9704      	str	r7, [sp, #16]
 80064a4:	4633      	mov	r3, r6
 80064a6:	461e      	mov	r6, r3
 80064a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064ac:	2a39      	cmp	r2, #57	@ 0x39
 80064ae:	d107      	bne.n	80064c0 <_dtoa_r+0x6d8>
 80064b0:	459a      	cmp	sl, r3
 80064b2:	d1f8      	bne.n	80064a6 <_dtoa_r+0x6be>
 80064b4:	9a04      	ldr	r2, [sp, #16]
 80064b6:	3201      	adds	r2, #1
 80064b8:	9204      	str	r2, [sp, #16]
 80064ba:	2230      	movs	r2, #48	@ 0x30
 80064bc:	f88a 2000 	strb.w	r2, [sl]
 80064c0:	781a      	ldrb	r2, [r3, #0]
 80064c2:	3201      	adds	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	e7bd      	b.n	8006444 <_dtoa_r+0x65c>
 80064c8:	2200      	movs	r2, #0
 80064ca:	4b09      	ldr	r3, [pc, #36]	@ (80064f0 <_dtoa_r+0x708>)
 80064cc:	f7fa f804 	bl	80004d8 <__aeabi_dmul>
 80064d0:	2200      	movs	r2, #0
 80064d2:	2300      	movs	r3, #0
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	f7fa fa66 	bl	80009a8 <__aeabi_dcmpeq>
 80064dc:	2800      	cmp	r0, #0
 80064de:	f43f aebc 	beq.w	800625a <_dtoa_r+0x472>
 80064e2:	e6f1      	b.n	80062c8 <_dtoa_r+0x4e0>
 80064e4:	08008878 	.word	0x08008878
 80064e8:	3fe00000 	.word	0x3fe00000
 80064ec:	3ff00000 	.word	0x3ff00000
 80064f0:	40240000 	.word	0x40240000
 80064f4:	40140000 	.word	0x40140000
 80064f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	f000 80db 	beq.w	80066b6 <_dtoa_r+0x8ce>
 8006500:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006502:	2a01      	cmp	r2, #1
 8006504:	f300 80bf 	bgt.w	8006686 <_dtoa_r+0x89e>
 8006508:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800650a:	2a00      	cmp	r2, #0
 800650c:	f000 80b7 	beq.w	800667e <_dtoa_r+0x896>
 8006510:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006514:	4646      	mov	r6, r8
 8006516:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800651a:	2101      	movs	r1, #1
 800651c:	441a      	add	r2, r3
 800651e:	4658      	mov	r0, fp
 8006520:	4498      	add	r8, r3
 8006522:	9209      	str	r2, [sp, #36]	@ 0x24
 8006524:	f000 fc1a 	bl	8006d5c <__i2b>
 8006528:	4605      	mov	r5, r0
 800652a:	b15e      	cbz	r6, 8006544 <_dtoa_r+0x75c>
 800652c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	dd08      	ble.n	8006544 <_dtoa_r+0x75c>
 8006532:	42b3      	cmp	r3, r6
 8006534:	bfa8      	it	ge
 8006536:	4633      	movge	r3, r6
 8006538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800653a:	eba8 0803 	sub.w	r8, r8, r3
 800653e:	1af6      	subs	r6, r6, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	9309      	str	r3, [sp, #36]	@ 0x24
 8006544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006546:	b1f3      	cbz	r3, 8006586 <_dtoa_r+0x79e>
 8006548:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80b7 	beq.w	80066be <_dtoa_r+0x8d6>
 8006550:	b18c      	cbz	r4, 8006576 <_dtoa_r+0x78e>
 8006552:	4629      	mov	r1, r5
 8006554:	4622      	mov	r2, r4
 8006556:	4658      	mov	r0, fp
 8006558:	f000 fcbe 	bl	8006ed8 <__pow5mult>
 800655c:	464a      	mov	r2, r9
 800655e:	4601      	mov	r1, r0
 8006560:	4605      	mov	r5, r0
 8006562:	4658      	mov	r0, fp
 8006564:	f000 fc10 	bl	8006d88 <__multiply>
 8006568:	4649      	mov	r1, r9
 800656a:	9004      	str	r0, [sp, #16]
 800656c:	4658      	mov	r0, fp
 800656e:	f000 fb41 	bl	8006bf4 <_Bfree>
 8006572:	9b04      	ldr	r3, [sp, #16]
 8006574:	4699      	mov	r9, r3
 8006576:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006578:	1b1a      	subs	r2, r3, r4
 800657a:	d004      	beq.n	8006586 <_dtoa_r+0x79e>
 800657c:	4649      	mov	r1, r9
 800657e:	4658      	mov	r0, fp
 8006580:	f000 fcaa 	bl	8006ed8 <__pow5mult>
 8006584:	4681      	mov	r9, r0
 8006586:	2101      	movs	r1, #1
 8006588:	4658      	mov	r0, fp
 800658a:	f000 fbe7 	bl	8006d5c <__i2b>
 800658e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006590:	4604      	mov	r4, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 81c9 	beq.w	800692a <_dtoa_r+0xb42>
 8006598:	461a      	mov	r2, r3
 800659a:	4601      	mov	r1, r0
 800659c:	4658      	mov	r0, fp
 800659e:	f000 fc9b 	bl	8006ed8 <__pow5mult>
 80065a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065a4:	4604      	mov	r4, r0
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	f300 808f 	bgt.w	80066ca <_dtoa_r+0x8e2>
 80065ac:	9b02      	ldr	r3, [sp, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 8087 	bne.w	80066c2 <_dtoa_r+0x8da>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f040 8083 	bne.w	80066c6 <_dtoa_r+0x8de>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065c6:	0d1b      	lsrs	r3, r3, #20
 80065c8:	051b      	lsls	r3, r3, #20
 80065ca:	b12b      	cbz	r3, 80065d8 <_dtoa_r+0x7f0>
 80065cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ce:	f108 0801 	add.w	r8, r8, #1
 80065d2:	3301      	adds	r3, #1
 80065d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d6:	2301      	movs	r3, #1
 80065d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 81aa 	beq.w	8006936 <_dtoa_r+0xb4e>
 80065e2:	6923      	ldr	r3, [r4, #16]
 80065e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065e8:	6918      	ldr	r0, [r3, #16]
 80065ea:	f000 fb6b 	bl	8006cc4 <__hi0bits>
 80065ee:	f1c0 0020 	rsb	r0, r0, #32
 80065f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f4:	4418      	add	r0, r3
 80065f6:	f010 001f 	ands.w	r0, r0, #31
 80065fa:	d071      	beq.n	80066e0 <_dtoa_r+0x8f8>
 80065fc:	f1c0 0320 	rsb	r3, r0, #32
 8006600:	2b04      	cmp	r3, #4
 8006602:	dd65      	ble.n	80066d0 <_dtoa_r+0x8e8>
 8006604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006606:	f1c0 001c 	rsb	r0, r0, #28
 800660a:	4403      	add	r3, r0
 800660c:	4480      	add	r8, r0
 800660e:	4406      	add	r6, r0
 8006610:	9309      	str	r3, [sp, #36]	@ 0x24
 8006612:	f1b8 0f00 	cmp.w	r8, #0
 8006616:	dd05      	ble.n	8006624 <_dtoa_r+0x83c>
 8006618:	4649      	mov	r1, r9
 800661a:	4642      	mov	r2, r8
 800661c:	4658      	mov	r0, fp
 800661e:	f000 fcb5 	bl	8006f8c <__lshift>
 8006622:	4681      	mov	r9, r0
 8006624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	dd05      	ble.n	8006636 <_dtoa_r+0x84e>
 800662a:	4621      	mov	r1, r4
 800662c:	461a      	mov	r2, r3
 800662e:	4658      	mov	r0, fp
 8006630:	f000 fcac 	bl	8006f8c <__lshift>
 8006634:	4604      	mov	r4, r0
 8006636:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d053      	beq.n	80066e4 <_dtoa_r+0x8fc>
 800663c:	4621      	mov	r1, r4
 800663e:	4648      	mov	r0, r9
 8006640:	f000 fd10 	bl	8007064 <__mcmp>
 8006644:	2800      	cmp	r0, #0
 8006646:	da4d      	bge.n	80066e4 <_dtoa_r+0x8fc>
 8006648:	1e7b      	subs	r3, r7, #1
 800664a:	4649      	mov	r1, r9
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	220a      	movs	r2, #10
 8006650:	2300      	movs	r3, #0
 8006652:	4658      	mov	r0, fp
 8006654:	f000 faf0 	bl	8006c38 <__multadd>
 8006658:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800665a:	4681      	mov	r9, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 816c 	beq.w	800693a <_dtoa_r+0xb52>
 8006662:	2300      	movs	r3, #0
 8006664:	4629      	mov	r1, r5
 8006666:	220a      	movs	r2, #10
 8006668:	4658      	mov	r0, fp
 800666a:	f000 fae5 	bl	8006c38 <__multadd>
 800666e:	9b08      	ldr	r3, [sp, #32]
 8006670:	4605      	mov	r5, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	dc61      	bgt.n	800673a <_dtoa_r+0x952>
 8006676:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006678:	2b02      	cmp	r3, #2
 800667a:	dc3b      	bgt.n	80066f4 <_dtoa_r+0x90c>
 800667c:	e05d      	b.n	800673a <_dtoa_r+0x952>
 800667e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006680:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006684:	e746      	b.n	8006514 <_dtoa_r+0x72c>
 8006686:	9b07      	ldr	r3, [sp, #28]
 8006688:	1e5c      	subs	r4, r3, #1
 800668a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800668c:	42a3      	cmp	r3, r4
 800668e:	bfbf      	itttt	lt
 8006690:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006692:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006694:	1ae3      	sublt	r3, r4, r3
 8006696:	18d2      	addlt	r2, r2, r3
 8006698:	bfa8      	it	ge
 800669a:	1b1c      	subge	r4, r3, r4
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	bfbe      	ittt	lt
 80066a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80066a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80066a4:	2400      	movlt	r4, #0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfb5      	itete	lt
 80066aa:	eba8 0603 	sublt.w	r6, r8, r3
 80066ae:	4646      	movge	r6, r8
 80066b0:	2300      	movlt	r3, #0
 80066b2:	9b07      	ldrge	r3, [sp, #28]
 80066b4:	e730      	b.n	8006518 <_dtoa_r+0x730>
 80066b6:	4646      	mov	r6, r8
 80066b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80066bc:	e735      	b.n	800652a <_dtoa_r+0x742>
 80066be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066c0:	e75c      	b.n	800657c <_dtoa_r+0x794>
 80066c2:	2300      	movs	r3, #0
 80066c4:	e788      	b.n	80065d8 <_dtoa_r+0x7f0>
 80066c6:	9b02      	ldr	r3, [sp, #8]
 80066c8:	e786      	b.n	80065d8 <_dtoa_r+0x7f0>
 80066ca:	2300      	movs	r3, #0
 80066cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ce:	e788      	b.n	80065e2 <_dtoa_r+0x7fa>
 80066d0:	d09f      	beq.n	8006612 <_dtoa_r+0x82a>
 80066d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066d4:	331c      	adds	r3, #28
 80066d6:	441a      	add	r2, r3
 80066d8:	4498      	add	r8, r3
 80066da:	441e      	add	r6, r3
 80066dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80066de:	e798      	b.n	8006612 <_dtoa_r+0x82a>
 80066e0:	4603      	mov	r3, r0
 80066e2:	e7f6      	b.n	80066d2 <_dtoa_r+0x8ea>
 80066e4:	9b07      	ldr	r3, [sp, #28]
 80066e6:	9704      	str	r7, [sp, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	dc20      	bgt.n	800672e <_dtoa_r+0x946>
 80066ec:	9308      	str	r3, [sp, #32]
 80066ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	dd1e      	ble.n	8006732 <_dtoa_r+0x94a>
 80066f4:	9b08      	ldr	r3, [sp, #32]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f47f aebc 	bne.w	8006474 <_dtoa_r+0x68c>
 80066fc:	4621      	mov	r1, r4
 80066fe:	2205      	movs	r2, #5
 8006700:	4658      	mov	r0, fp
 8006702:	f000 fa99 	bl	8006c38 <__multadd>
 8006706:	4601      	mov	r1, r0
 8006708:	4604      	mov	r4, r0
 800670a:	4648      	mov	r0, r9
 800670c:	f000 fcaa 	bl	8007064 <__mcmp>
 8006710:	2800      	cmp	r0, #0
 8006712:	f77f aeaf 	ble.w	8006474 <_dtoa_r+0x68c>
 8006716:	2331      	movs	r3, #49	@ 0x31
 8006718:	4656      	mov	r6, sl
 800671a:	f806 3b01 	strb.w	r3, [r6], #1
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	3301      	adds	r3, #1
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	e6aa      	b.n	800647c <_dtoa_r+0x694>
 8006726:	9c07      	ldr	r4, [sp, #28]
 8006728:	9704      	str	r7, [sp, #16]
 800672a:	4625      	mov	r5, r4
 800672c:	e7f3      	b.n	8006716 <_dtoa_r+0x92e>
 800672e:	9b07      	ldr	r3, [sp, #28]
 8006730:	9308      	str	r3, [sp, #32]
 8006732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8104 	beq.w	8006942 <_dtoa_r+0xb5a>
 800673a:	2e00      	cmp	r6, #0
 800673c:	dd05      	ble.n	800674a <_dtoa_r+0x962>
 800673e:	4629      	mov	r1, r5
 8006740:	4632      	mov	r2, r6
 8006742:	4658      	mov	r0, fp
 8006744:	f000 fc22 	bl	8006f8c <__lshift>
 8006748:	4605      	mov	r5, r0
 800674a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800674c:	2b00      	cmp	r3, #0
 800674e:	d05a      	beq.n	8006806 <_dtoa_r+0xa1e>
 8006750:	4658      	mov	r0, fp
 8006752:	6869      	ldr	r1, [r5, #4]
 8006754:	f000 fa0e 	bl	8006b74 <_Balloc>
 8006758:	4606      	mov	r6, r0
 800675a:	b928      	cbnz	r0, 8006768 <_dtoa_r+0x980>
 800675c:	4602      	mov	r2, r0
 800675e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006762:	4b83      	ldr	r3, [pc, #524]	@ (8006970 <_dtoa_r+0xb88>)
 8006764:	f7ff bb54 	b.w	8005e10 <_dtoa_r+0x28>
 8006768:	692a      	ldr	r2, [r5, #16]
 800676a:	f105 010c 	add.w	r1, r5, #12
 800676e:	3202      	adds	r2, #2
 8006770:	0092      	lsls	r2, r2, #2
 8006772:	300c      	adds	r0, #12
 8006774:	f001 fb30 	bl	8007dd8 <memcpy>
 8006778:	2201      	movs	r2, #1
 800677a:	4631      	mov	r1, r6
 800677c:	4658      	mov	r0, fp
 800677e:	f000 fc05 	bl	8006f8c <__lshift>
 8006782:	462f      	mov	r7, r5
 8006784:	4605      	mov	r5, r0
 8006786:	f10a 0301 	add.w	r3, sl, #1
 800678a:	9307      	str	r3, [sp, #28]
 800678c:	9b08      	ldr	r3, [sp, #32]
 800678e:	4453      	add	r3, sl
 8006790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006792:	9b02      	ldr	r3, [sp, #8]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	930a      	str	r3, [sp, #40]	@ 0x28
 800679a:	9b07      	ldr	r3, [sp, #28]
 800679c:	4621      	mov	r1, r4
 800679e:	3b01      	subs	r3, #1
 80067a0:	4648      	mov	r0, r9
 80067a2:	9302      	str	r3, [sp, #8]
 80067a4:	f7ff fa97 	bl	8005cd6 <quorem>
 80067a8:	4639      	mov	r1, r7
 80067aa:	9008      	str	r0, [sp, #32]
 80067ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067b0:	4648      	mov	r0, r9
 80067b2:	f000 fc57 	bl	8007064 <__mcmp>
 80067b6:	462a      	mov	r2, r5
 80067b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80067ba:	4621      	mov	r1, r4
 80067bc:	4658      	mov	r0, fp
 80067be:	f000 fc6d 	bl	800709c <__mdiff>
 80067c2:	68c2      	ldr	r2, [r0, #12]
 80067c4:	4606      	mov	r6, r0
 80067c6:	bb02      	cbnz	r2, 800680a <_dtoa_r+0xa22>
 80067c8:	4601      	mov	r1, r0
 80067ca:	4648      	mov	r0, r9
 80067cc:	f000 fc4a 	bl	8007064 <__mcmp>
 80067d0:	4602      	mov	r2, r0
 80067d2:	4631      	mov	r1, r6
 80067d4:	4658      	mov	r0, fp
 80067d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80067d8:	f000 fa0c 	bl	8006bf4 <_Bfree>
 80067dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80067e0:	9e07      	ldr	r6, [sp, #28]
 80067e2:	ea43 0102 	orr.w	r1, r3, r2
 80067e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e8:	4319      	orrs	r1, r3
 80067ea:	d110      	bne.n	800680e <_dtoa_r+0xa26>
 80067ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067f0:	d029      	beq.n	8006846 <_dtoa_r+0xa5e>
 80067f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dd02      	ble.n	80067fe <_dtoa_r+0xa16>
 80067f8:	9b08      	ldr	r3, [sp, #32]
 80067fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067fe:	9b02      	ldr	r3, [sp, #8]
 8006800:	f883 8000 	strb.w	r8, [r3]
 8006804:	e63b      	b.n	800647e <_dtoa_r+0x696>
 8006806:	4628      	mov	r0, r5
 8006808:	e7bb      	b.n	8006782 <_dtoa_r+0x99a>
 800680a:	2201      	movs	r2, #1
 800680c:	e7e1      	b.n	80067d2 <_dtoa_r+0x9ea>
 800680e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	db04      	blt.n	800681e <_dtoa_r+0xa36>
 8006814:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006816:	430b      	orrs	r3, r1
 8006818:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800681a:	430b      	orrs	r3, r1
 800681c:	d120      	bne.n	8006860 <_dtoa_r+0xa78>
 800681e:	2a00      	cmp	r2, #0
 8006820:	dded      	ble.n	80067fe <_dtoa_r+0xa16>
 8006822:	4649      	mov	r1, r9
 8006824:	2201      	movs	r2, #1
 8006826:	4658      	mov	r0, fp
 8006828:	f000 fbb0 	bl	8006f8c <__lshift>
 800682c:	4621      	mov	r1, r4
 800682e:	4681      	mov	r9, r0
 8006830:	f000 fc18 	bl	8007064 <__mcmp>
 8006834:	2800      	cmp	r0, #0
 8006836:	dc03      	bgt.n	8006840 <_dtoa_r+0xa58>
 8006838:	d1e1      	bne.n	80067fe <_dtoa_r+0xa16>
 800683a:	f018 0f01 	tst.w	r8, #1
 800683e:	d0de      	beq.n	80067fe <_dtoa_r+0xa16>
 8006840:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006844:	d1d8      	bne.n	80067f8 <_dtoa_r+0xa10>
 8006846:	2339      	movs	r3, #57	@ 0x39
 8006848:	9a02      	ldr	r2, [sp, #8]
 800684a:	7013      	strb	r3, [r2, #0]
 800684c:	4633      	mov	r3, r6
 800684e:	461e      	mov	r6, r3
 8006850:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006854:	3b01      	subs	r3, #1
 8006856:	2a39      	cmp	r2, #57	@ 0x39
 8006858:	d052      	beq.n	8006900 <_dtoa_r+0xb18>
 800685a:	3201      	adds	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e60e      	b.n	800647e <_dtoa_r+0x696>
 8006860:	2a00      	cmp	r2, #0
 8006862:	dd07      	ble.n	8006874 <_dtoa_r+0xa8c>
 8006864:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006868:	d0ed      	beq.n	8006846 <_dtoa_r+0xa5e>
 800686a:	9a02      	ldr	r2, [sp, #8]
 800686c:	f108 0301 	add.w	r3, r8, #1
 8006870:	7013      	strb	r3, [r2, #0]
 8006872:	e604      	b.n	800647e <_dtoa_r+0x696>
 8006874:	9b07      	ldr	r3, [sp, #28]
 8006876:	9a07      	ldr	r2, [sp, #28]
 8006878:	f803 8c01 	strb.w	r8, [r3, #-1]
 800687c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800687e:	4293      	cmp	r3, r2
 8006880:	d028      	beq.n	80068d4 <_dtoa_r+0xaec>
 8006882:	4649      	mov	r1, r9
 8006884:	2300      	movs	r3, #0
 8006886:	220a      	movs	r2, #10
 8006888:	4658      	mov	r0, fp
 800688a:	f000 f9d5 	bl	8006c38 <__multadd>
 800688e:	42af      	cmp	r7, r5
 8006890:	4681      	mov	r9, r0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	f04f 020a 	mov.w	r2, #10
 800689a:	4639      	mov	r1, r7
 800689c:	4658      	mov	r0, fp
 800689e:	d107      	bne.n	80068b0 <_dtoa_r+0xac8>
 80068a0:	f000 f9ca 	bl	8006c38 <__multadd>
 80068a4:	4607      	mov	r7, r0
 80068a6:	4605      	mov	r5, r0
 80068a8:	9b07      	ldr	r3, [sp, #28]
 80068aa:	3301      	adds	r3, #1
 80068ac:	9307      	str	r3, [sp, #28]
 80068ae:	e774      	b.n	800679a <_dtoa_r+0x9b2>
 80068b0:	f000 f9c2 	bl	8006c38 <__multadd>
 80068b4:	4629      	mov	r1, r5
 80068b6:	4607      	mov	r7, r0
 80068b8:	2300      	movs	r3, #0
 80068ba:	220a      	movs	r2, #10
 80068bc:	4658      	mov	r0, fp
 80068be:	f000 f9bb 	bl	8006c38 <__multadd>
 80068c2:	4605      	mov	r5, r0
 80068c4:	e7f0      	b.n	80068a8 <_dtoa_r+0xac0>
 80068c6:	9b08      	ldr	r3, [sp, #32]
 80068c8:	2700      	movs	r7, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bfcc      	ite	gt
 80068ce:	461e      	movgt	r6, r3
 80068d0:	2601      	movle	r6, #1
 80068d2:	4456      	add	r6, sl
 80068d4:	4649      	mov	r1, r9
 80068d6:	2201      	movs	r2, #1
 80068d8:	4658      	mov	r0, fp
 80068da:	f000 fb57 	bl	8006f8c <__lshift>
 80068de:	4621      	mov	r1, r4
 80068e0:	4681      	mov	r9, r0
 80068e2:	f000 fbbf 	bl	8007064 <__mcmp>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	dcb0      	bgt.n	800684c <_dtoa_r+0xa64>
 80068ea:	d102      	bne.n	80068f2 <_dtoa_r+0xb0a>
 80068ec:	f018 0f01 	tst.w	r8, #1
 80068f0:	d1ac      	bne.n	800684c <_dtoa_r+0xa64>
 80068f2:	4633      	mov	r3, r6
 80068f4:	461e      	mov	r6, r3
 80068f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068fa:	2a30      	cmp	r2, #48	@ 0x30
 80068fc:	d0fa      	beq.n	80068f4 <_dtoa_r+0xb0c>
 80068fe:	e5be      	b.n	800647e <_dtoa_r+0x696>
 8006900:	459a      	cmp	sl, r3
 8006902:	d1a4      	bne.n	800684e <_dtoa_r+0xa66>
 8006904:	9b04      	ldr	r3, [sp, #16]
 8006906:	3301      	adds	r3, #1
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	2331      	movs	r3, #49	@ 0x31
 800690c:	f88a 3000 	strb.w	r3, [sl]
 8006910:	e5b5      	b.n	800647e <_dtoa_r+0x696>
 8006912:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006914:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006974 <_dtoa_r+0xb8c>
 8006918:	b11b      	cbz	r3, 8006922 <_dtoa_r+0xb3a>
 800691a:	f10a 0308 	add.w	r3, sl, #8
 800691e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	4650      	mov	r0, sl
 8006924:	b017      	add	sp, #92	@ 0x5c
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800692c:	2b01      	cmp	r3, #1
 800692e:	f77f ae3d 	ble.w	80065ac <_dtoa_r+0x7c4>
 8006932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006934:	930a      	str	r3, [sp, #40]	@ 0x28
 8006936:	2001      	movs	r0, #1
 8006938:	e65b      	b.n	80065f2 <_dtoa_r+0x80a>
 800693a:	9b08      	ldr	r3, [sp, #32]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f77f aed6 	ble.w	80066ee <_dtoa_r+0x906>
 8006942:	4656      	mov	r6, sl
 8006944:	4621      	mov	r1, r4
 8006946:	4648      	mov	r0, r9
 8006948:	f7ff f9c5 	bl	8005cd6 <quorem>
 800694c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006950:	9b08      	ldr	r3, [sp, #32]
 8006952:	f806 8b01 	strb.w	r8, [r6], #1
 8006956:	eba6 020a 	sub.w	r2, r6, sl
 800695a:	4293      	cmp	r3, r2
 800695c:	ddb3      	ble.n	80068c6 <_dtoa_r+0xade>
 800695e:	4649      	mov	r1, r9
 8006960:	2300      	movs	r3, #0
 8006962:	220a      	movs	r2, #10
 8006964:	4658      	mov	r0, fp
 8006966:	f000 f967 	bl	8006c38 <__multadd>
 800696a:	4681      	mov	r9, r0
 800696c:	e7ea      	b.n	8006944 <_dtoa_r+0xb5c>
 800696e:	bf00      	nop
 8006970:	080087d8 	.word	0x080087d8
 8006974:	0800875c 	.word	0x0800875c

08006978 <_free_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4605      	mov	r5, r0
 800697c:	2900      	cmp	r1, #0
 800697e:	d040      	beq.n	8006a02 <_free_r+0x8a>
 8006980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006984:	1f0c      	subs	r4, r1, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	bfb8      	it	lt
 800698a:	18e4      	addlt	r4, r4, r3
 800698c:	f000 f8e6 	bl	8006b5c <__malloc_lock>
 8006990:	4a1c      	ldr	r2, [pc, #112]	@ (8006a04 <_free_r+0x8c>)
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	b933      	cbnz	r3, 80069a4 <_free_r+0x2c>
 8006996:	6063      	str	r3, [r4, #4]
 8006998:	6014      	str	r4, [r2, #0]
 800699a:	4628      	mov	r0, r5
 800699c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a0:	f000 b8e2 	b.w	8006b68 <__malloc_unlock>
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	d908      	bls.n	80069ba <_free_r+0x42>
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	1821      	adds	r1, r4, r0
 80069ac:	428b      	cmp	r3, r1
 80069ae:	bf01      	itttt	eq
 80069b0:	6819      	ldreq	r1, [r3, #0]
 80069b2:	685b      	ldreq	r3, [r3, #4]
 80069b4:	1809      	addeq	r1, r1, r0
 80069b6:	6021      	streq	r1, [r4, #0]
 80069b8:	e7ed      	b.n	8006996 <_free_r+0x1e>
 80069ba:	461a      	mov	r2, r3
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	b10b      	cbz	r3, 80069c4 <_free_r+0x4c>
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	d9fa      	bls.n	80069ba <_free_r+0x42>
 80069c4:	6811      	ldr	r1, [r2, #0]
 80069c6:	1850      	adds	r0, r2, r1
 80069c8:	42a0      	cmp	r0, r4
 80069ca:	d10b      	bne.n	80069e4 <_free_r+0x6c>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	4401      	add	r1, r0
 80069d0:	1850      	adds	r0, r2, r1
 80069d2:	4283      	cmp	r3, r0
 80069d4:	6011      	str	r1, [r2, #0]
 80069d6:	d1e0      	bne.n	800699a <_free_r+0x22>
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4408      	add	r0, r1
 80069de:	6010      	str	r0, [r2, #0]
 80069e0:	6053      	str	r3, [r2, #4]
 80069e2:	e7da      	b.n	800699a <_free_r+0x22>
 80069e4:	d902      	bls.n	80069ec <_free_r+0x74>
 80069e6:	230c      	movs	r3, #12
 80069e8:	602b      	str	r3, [r5, #0]
 80069ea:	e7d6      	b.n	800699a <_free_r+0x22>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	1821      	adds	r1, r4, r0
 80069f0:	428b      	cmp	r3, r1
 80069f2:	bf01      	itttt	eq
 80069f4:	6819      	ldreq	r1, [r3, #0]
 80069f6:	685b      	ldreq	r3, [r3, #4]
 80069f8:	1809      	addeq	r1, r1, r0
 80069fa:	6021      	streq	r1, [r4, #0]
 80069fc:	6063      	str	r3, [r4, #4]
 80069fe:	6054      	str	r4, [r2, #4]
 8006a00:	e7cb      	b.n	800699a <_free_r+0x22>
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	20000554 	.word	0x20000554

08006a08 <malloc>:
 8006a08:	4b02      	ldr	r3, [pc, #8]	@ (8006a14 <malloc+0xc>)
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	f000 b825 	b.w	8006a5c <_malloc_r>
 8006a12:	bf00      	nop
 8006a14:	200000bc 	.word	0x200000bc

08006a18 <sbrk_aligned>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a58 <sbrk_aligned+0x40>)
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	6831      	ldr	r1, [r6, #0]
 8006a20:	4605      	mov	r5, r0
 8006a22:	b911      	cbnz	r1, 8006a2a <sbrk_aligned+0x12>
 8006a24:	f001 f9c8 	bl	8007db8 <_sbrk_r>
 8006a28:	6030      	str	r0, [r6, #0]
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f001 f9c3 	bl	8007db8 <_sbrk_r>
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	d103      	bne.n	8006a3e <sbrk_aligned+0x26>
 8006a36:	f04f 34ff 	mov.w	r4, #4294967295
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	bd70      	pop	{r4, r5, r6, pc}
 8006a3e:	1cc4      	adds	r4, r0, #3
 8006a40:	f024 0403 	bic.w	r4, r4, #3
 8006a44:	42a0      	cmp	r0, r4
 8006a46:	d0f8      	beq.n	8006a3a <sbrk_aligned+0x22>
 8006a48:	1a21      	subs	r1, r4, r0
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f001 f9b4 	bl	8007db8 <_sbrk_r>
 8006a50:	3001      	adds	r0, #1
 8006a52:	d1f2      	bne.n	8006a3a <sbrk_aligned+0x22>
 8006a54:	e7ef      	b.n	8006a36 <sbrk_aligned+0x1e>
 8006a56:	bf00      	nop
 8006a58:	20000550 	.word	0x20000550

08006a5c <_malloc_r>:
 8006a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a60:	1ccd      	adds	r5, r1, #3
 8006a62:	f025 0503 	bic.w	r5, r5, #3
 8006a66:	3508      	adds	r5, #8
 8006a68:	2d0c      	cmp	r5, #12
 8006a6a:	bf38      	it	cc
 8006a6c:	250c      	movcc	r5, #12
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	4606      	mov	r6, r0
 8006a72:	db01      	blt.n	8006a78 <_malloc_r+0x1c>
 8006a74:	42a9      	cmp	r1, r5
 8006a76:	d904      	bls.n	8006a82 <_malloc_r+0x26>
 8006a78:	230c      	movs	r3, #12
 8006a7a:	6033      	str	r3, [r6, #0]
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b58 <_malloc_r+0xfc>
 8006a86:	f000 f869 	bl	8006b5c <__malloc_lock>
 8006a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8e:	461c      	mov	r4, r3
 8006a90:	bb44      	cbnz	r4, 8006ae4 <_malloc_r+0x88>
 8006a92:	4629      	mov	r1, r5
 8006a94:	4630      	mov	r0, r6
 8006a96:	f7ff ffbf 	bl	8006a18 <sbrk_aligned>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	d158      	bne.n	8006b52 <_malloc_r+0xf6>
 8006aa0:	f8d8 4000 	ldr.w	r4, [r8]
 8006aa4:	4627      	mov	r7, r4
 8006aa6:	2f00      	cmp	r7, #0
 8006aa8:	d143      	bne.n	8006b32 <_malloc_r+0xd6>
 8006aaa:	2c00      	cmp	r4, #0
 8006aac:	d04b      	beq.n	8006b46 <_malloc_r+0xea>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	eb04 0903 	add.w	r9, r4, r3
 8006ab8:	f001 f97e 	bl	8007db8 <_sbrk_r>
 8006abc:	4581      	cmp	r9, r0
 8006abe:	d142      	bne.n	8006b46 <_malloc_r+0xea>
 8006ac0:	6821      	ldr	r1, [r4, #0]
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	1a6d      	subs	r5, r5, r1
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7ff ffa6 	bl	8006a18 <sbrk_aligned>
 8006acc:	3001      	adds	r0, #1
 8006ace:	d03a      	beq.n	8006b46 <_malloc_r+0xea>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	442b      	add	r3, r5
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	bb62      	cbnz	r2, 8006b38 <_malloc_r+0xdc>
 8006ade:	f8c8 7000 	str.w	r7, [r8]
 8006ae2:	e00f      	b.n	8006b04 <_malloc_r+0xa8>
 8006ae4:	6822      	ldr	r2, [r4, #0]
 8006ae6:	1b52      	subs	r2, r2, r5
 8006ae8:	d420      	bmi.n	8006b2c <_malloc_r+0xd0>
 8006aea:	2a0b      	cmp	r2, #11
 8006aec:	d917      	bls.n	8006b1e <_malloc_r+0xc2>
 8006aee:	1961      	adds	r1, r4, r5
 8006af0:	42a3      	cmp	r3, r4
 8006af2:	6025      	str	r5, [r4, #0]
 8006af4:	bf18      	it	ne
 8006af6:	6059      	strne	r1, [r3, #4]
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	bf08      	it	eq
 8006afc:	f8c8 1000 	streq.w	r1, [r8]
 8006b00:	5162      	str	r2, [r4, r5]
 8006b02:	604b      	str	r3, [r1, #4]
 8006b04:	4630      	mov	r0, r6
 8006b06:	f000 f82f 	bl	8006b68 <__malloc_unlock>
 8006b0a:	f104 000b 	add.w	r0, r4, #11
 8006b0e:	1d23      	adds	r3, r4, #4
 8006b10:	f020 0007 	bic.w	r0, r0, #7
 8006b14:	1ac2      	subs	r2, r0, r3
 8006b16:	bf1c      	itt	ne
 8006b18:	1a1b      	subne	r3, r3, r0
 8006b1a:	50a3      	strne	r3, [r4, r2]
 8006b1c:	e7af      	b.n	8006a7e <_malloc_r+0x22>
 8006b1e:	6862      	ldr	r2, [r4, #4]
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	bf0c      	ite	eq
 8006b24:	f8c8 2000 	streq.w	r2, [r8]
 8006b28:	605a      	strne	r2, [r3, #4]
 8006b2a:	e7eb      	b.n	8006b04 <_malloc_r+0xa8>
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	6864      	ldr	r4, [r4, #4]
 8006b30:	e7ae      	b.n	8006a90 <_malloc_r+0x34>
 8006b32:	463c      	mov	r4, r7
 8006b34:	687f      	ldr	r7, [r7, #4]
 8006b36:	e7b6      	b.n	8006aa6 <_malloc_r+0x4a>
 8006b38:	461a      	mov	r2, r3
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d1fb      	bne.n	8006b38 <_malloc_r+0xdc>
 8006b40:	2300      	movs	r3, #0
 8006b42:	6053      	str	r3, [r2, #4]
 8006b44:	e7de      	b.n	8006b04 <_malloc_r+0xa8>
 8006b46:	230c      	movs	r3, #12
 8006b48:	4630      	mov	r0, r6
 8006b4a:	6033      	str	r3, [r6, #0]
 8006b4c:	f000 f80c 	bl	8006b68 <__malloc_unlock>
 8006b50:	e794      	b.n	8006a7c <_malloc_r+0x20>
 8006b52:	6005      	str	r5, [r0, #0]
 8006b54:	e7d6      	b.n	8006b04 <_malloc_r+0xa8>
 8006b56:	bf00      	nop
 8006b58:	20000554 	.word	0x20000554

08006b5c <__malloc_lock>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	@ (8006b64 <__malloc_lock+0x8>)
 8006b5e:	f7ff b8aa 	b.w	8005cb6 <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	2000054c 	.word	0x2000054c

08006b68 <__malloc_unlock>:
 8006b68:	4801      	ldr	r0, [pc, #4]	@ (8006b70 <__malloc_unlock+0x8>)
 8006b6a:	f7ff b8a5 	b.w	8005cb8 <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	2000054c 	.word	0x2000054c

08006b74 <_Balloc>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	69c6      	ldr	r6, [r0, #28]
 8006b78:	4604      	mov	r4, r0
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	b976      	cbnz	r6, 8006b9c <_Balloc+0x28>
 8006b7e:	2010      	movs	r0, #16
 8006b80:	f7ff ff42 	bl	8006a08 <malloc>
 8006b84:	4602      	mov	r2, r0
 8006b86:	61e0      	str	r0, [r4, #28]
 8006b88:	b920      	cbnz	r0, 8006b94 <_Balloc+0x20>
 8006b8a:	216b      	movs	r1, #107	@ 0x6b
 8006b8c:	4b17      	ldr	r3, [pc, #92]	@ (8006bec <_Balloc+0x78>)
 8006b8e:	4818      	ldr	r0, [pc, #96]	@ (8006bf0 <_Balloc+0x7c>)
 8006b90:	f001 f930 	bl	8007df4 <__assert_func>
 8006b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b98:	6006      	str	r6, [r0, #0]
 8006b9a:	60c6      	str	r6, [r0, #12]
 8006b9c:	69e6      	ldr	r6, [r4, #28]
 8006b9e:	68f3      	ldr	r3, [r6, #12]
 8006ba0:	b183      	cbz	r3, 8006bc4 <_Balloc+0x50>
 8006ba2:	69e3      	ldr	r3, [r4, #28]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006baa:	b9b8      	cbnz	r0, 8006bdc <_Balloc+0x68>
 8006bac:	2101      	movs	r1, #1
 8006bae:	fa01 f605 	lsl.w	r6, r1, r5
 8006bb2:	1d72      	adds	r2, r6, #5
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	0092      	lsls	r2, r2, #2
 8006bb8:	f001 f93a 	bl	8007e30 <_calloc_r>
 8006bbc:	b160      	cbz	r0, 8006bd8 <_Balloc+0x64>
 8006bbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bc2:	e00e      	b.n	8006be2 <_Balloc+0x6e>
 8006bc4:	2221      	movs	r2, #33	@ 0x21
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f001 f931 	bl	8007e30 <_calloc_r>
 8006bce:	69e3      	ldr	r3, [r4, #28]
 8006bd0:	60f0      	str	r0, [r6, #12]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e4      	bne.n	8006ba2 <_Balloc+0x2e>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	6802      	ldr	r2, [r0, #0]
 8006bde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006be2:	2300      	movs	r3, #0
 8006be4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006be8:	e7f7      	b.n	8006bda <_Balloc+0x66>
 8006bea:	bf00      	nop
 8006bec:	08008769 	.word	0x08008769
 8006bf0:	080087e9 	.word	0x080087e9

08006bf4 <_Bfree>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	69c6      	ldr	r6, [r0, #28]
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b976      	cbnz	r6, 8006c1c <_Bfree+0x28>
 8006bfe:	2010      	movs	r0, #16
 8006c00:	f7ff ff02 	bl	8006a08 <malloc>
 8006c04:	4602      	mov	r2, r0
 8006c06:	61e8      	str	r0, [r5, #28]
 8006c08:	b920      	cbnz	r0, 8006c14 <_Bfree+0x20>
 8006c0a:	218f      	movs	r1, #143	@ 0x8f
 8006c0c:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <_Bfree+0x3c>)
 8006c0e:	4809      	ldr	r0, [pc, #36]	@ (8006c34 <_Bfree+0x40>)
 8006c10:	f001 f8f0 	bl	8007df4 <__assert_func>
 8006c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c18:	6006      	str	r6, [r0, #0]
 8006c1a:	60c6      	str	r6, [r0, #12]
 8006c1c:	b13c      	cbz	r4, 8006c2e <_Bfree+0x3a>
 8006c1e:	69eb      	ldr	r3, [r5, #28]
 8006c20:	6862      	ldr	r2, [r4, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c28:	6021      	str	r1, [r4, #0]
 8006c2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	08008769 	.word	0x08008769
 8006c34:	080087e9 	.word	0x080087e9

08006c38 <__multadd>:
 8006c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	461e      	mov	r6, r3
 8006c42:	2000      	movs	r0, #0
 8006c44:	690d      	ldr	r5, [r1, #16]
 8006c46:	f101 0c14 	add.w	ip, r1, #20
 8006c4a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c4e:	3001      	adds	r0, #1
 8006c50:	b299      	uxth	r1, r3
 8006c52:	fb02 6101 	mla	r1, r2, r1, r6
 8006c56:	0c1e      	lsrs	r6, r3, #16
 8006c58:	0c0b      	lsrs	r3, r1, #16
 8006c5a:	fb02 3306 	mla	r3, r2, r6, r3
 8006c5e:	b289      	uxth	r1, r1
 8006c60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c64:	4285      	cmp	r5, r0
 8006c66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c6e:	dcec      	bgt.n	8006c4a <__multadd+0x12>
 8006c70:	b30e      	cbz	r6, 8006cb6 <__multadd+0x7e>
 8006c72:	68a3      	ldr	r3, [r4, #8]
 8006c74:	42ab      	cmp	r3, r5
 8006c76:	dc19      	bgt.n	8006cac <__multadd+0x74>
 8006c78:	6861      	ldr	r1, [r4, #4]
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	3101      	adds	r1, #1
 8006c7e:	f7ff ff79 	bl	8006b74 <_Balloc>
 8006c82:	4680      	mov	r8, r0
 8006c84:	b928      	cbnz	r0, 8006c92 <__multadd+0x5a>
 8006c86:	4602      	mov	r2, r0
 8006c88:	21ba      	movs	r1, #186	@ 0xba
 8006c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006cbc <__multadd+0x84>)
 8006c8c:	480c      	ldr	r0, [pc, #48]	@ (8006cc0 <__multadd+0x88>)
 8006c8e:	f001 f8b1 	bl	8007df4 <__assert_func>
 8006c92:	6922      	ldr	r2, [r4, #16]
 8006c94:	f104 010c 	add.w	r1, r4, #12
 8006c98:	3202      	adds	r2, #2
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	300c      	adds	r0, #12
 8006c9e:	f001 f89b 	bl	8007dd8 <memcpy>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff ffa5 	bl	8006bf4 <_Bfree>
 8006caa:	4644      	mov	r4, r8
 8006cac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	615e      	str	r6, [r3, #20]
 8006cb4:	6125      	str	r5, [r4, #16]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cbc:	080087d8 	.word	0x080087d8
 8006cc0:	080087e9 	.word	0x080087e9

08006cc4 <__hi0bits>:
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cca:	bf3a      	itte	cc
 8006ccc:	0403      	lslcc	r3, r0, #16
 8006cce:	2010      	movcc	r0, #16
 8006cd0:	2000      	movcs	r0, #0
 8006cd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cd6:	bf3c      	itt	cc
 8006cd8:	021b      	lslcc	r3, r3, #8
 8006cda:	3008      	addcc	r0, #8
 8006cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ce0:	bf3c      	itt	cc
 8006ce2:	011b      	lslcc	r3, r3, #4
 8006ce4:	3004      	addcc	r0, #4
 8006ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cea:	bf3c      	itt	cc
 8006cec:	009b      	lslcc	r3, r3, #2
 8006cee:	3002      	addcc	r0, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	db05      	blt.n	8006d00 <__hi0bits+0x3c>
 8006cf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cf8:	f100 0001 	add.w	r0, r0, #1
 8006cfc:	bf08      	it	eq
 8006cfe:	2020      	moveq	r0, #32
 8006d00:	4770      	bx	lr

08006d02 <__lo0bits>:
 8006d02:	6803      	ldr	r3, [r0, #0]
 8006d04:	4602      	mov	r2, r0
 8006d06:	f013 0007 	ands.w	r0, r3, #7
 8006d0a:	d00b      	beq.n	8006d24 <__lo0bits+0x22>
 8006d0c:	07d9      	lsls	r1, r3, #31
 8006d0e:	d421      	bmi.n	8006d54 <__lo0bits+0x52>
 8006d10:	0798      	lsls	r0, r3, #30
 8006d12:	bf49      	itett	mi
 8006d14:	085b      	lsrmi	r3, r3, #1
 8006d16:	089b      	lsrpl	r3, r3, #2
 8006d18:	2001      	movmi	r0, #1
 8006d1a:	6013      	strmi	r3, [r2, #0]
 8006d1c:	bf5c      	itt	pl
 8006d1e:	2002      	movpl	r0, #2
 8006d20:	6013      	strpl	r3, [r2, #0]
 8006d22:	4770      	bx	lr
 8006d24:	b299      	uxth	r1, r3
 8006d26:	b909      	cbnz	r1, 8006d2c <__lo0bits+0x2a>
 8006d28:	2010      	movs	r0, #16
 8006d2a:	0c1b      	lsrs	r3, r3, #16
 8006d2c:	b2d9      	uxtb	r1, r3
 8006d2e:	b909      	cbnz	r1, 8006d34 <__lo0bits+0x32>
 8006d30:	3008      	adds	r0, #8
 8006d32:	0a1b      	lsrs	r3, r3, #8
 8006d34:	0719      	lsls	r1, r3, #28
 8006d36:	bf04      	itt	eq
 8006d38:	091b      	lsreq	r3, r3, #4
 8006d3a:	3004      	addeq	r0, #4
 8006d3c:	0799      	lsls	r1, r3, #30
 8006d3e:	bf04      	itt	eq
 8006d40:	089b      	lsreq	r3, r3, #2
 8006d42:	3002      	addeq	r0, #2
 8006d44:	07d9      	lsls	r1, r3, #31
 8006d46:	d403      	bmi.n	8006d50 <__lo0bits+0x4e>
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	f100 0001 	add.w	r0, r0, #1
 8006d4e:	d003      	beq.n	8006d58 <__lo0bits+0x56>
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	4770      	bx	lr
 8006d54:	2000      	movs	r0, #0
 8006d56:	4770      	bx	lr
 8006d58:	2020      	movs	r0, #32
 8006d5a:	4770      	bx	lr

08006d5c <__i2b>:
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	460c      	mov	r4, r1
 8006d60:	2101      	movs	r1, #1
 8006d62:	f7ff ff07 	bl	8006b74 <_Balloc>
 8006d66:	4602      	mov	r2, r0
 8006d68:	b928      	cbnz	r0, 8006d76 <__i2b+0x1a>
 8006d6a:	f240 1145 	movw	r1, #325	@ 0x145
 8006d6e:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <__i2b+0x24>)
 8006d70:	4804      	ldr	r0, [pc, #16]	@ (8006d84 <__i2b+0x28>)
 8006d72:	f001 f83f 	bl	8007df4 <__assert_func>
 8006d76:	2301      	movs	r3, #1
 8006d78:	6144      	str	r4, [r0, #20]
 8006d7a:	6103      	str	r3, [r0, #16]
 8006d7c:	bd10      	pop	{r4, pc}
 8006d7e:	bf00      	nop
 8006d80:	080087d8 	.word	0x080087d8
 8006d84:	080087e9 	.word	0x080087e9

08006d88 <__multiply>:
 8006d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	690a      	ldr	r2, [r1, #16]
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	460f      	mov	r7, r1
 8006d94:	429a      	cmp	r2, r3
 8006d96:	bfa2      	ittt	ge
 8006d98:	4623      	movge	r3, r4
 8006d9a:	460c      	movge	r4, r1
 8006d9c:	461f      	movge	r7, r3
 8006d9e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006da2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	6861      	ldr	r1, [r4, #4]
 8006daa:	eb0a 0609 	add.w	r6, sl, r9
 8006dae:	42b3      	cmp	r3, r6
 8006db0:	b085      	sub	sp, #20
 8006db2:	bfb8      	it	lt
 8006db4:	3101      	addlt	r1, #1
 8006db6:	f7ff fedd 	bl	8006b74 <_Balloc>
 8006dba:	b930      	cbnz	r0, 8006dca <__multiply+0x42>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006dc2:	4b43      	ldr	r3, [pc, #268]	@ (8006ed0 <__multiply+0x148>)
 8006dc4:	4843      	ldr	r0, [pc, #268]	@ (8006ed4 <__multiply+0x14c>)
 8006dc6:	f001 f815 	bl	8007df4 <__assert_func>
 8006dca:	f100 0514 	add.w	r5, r0, #20
 8006dce:	462b      	mov	r3, r5
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dd6:	4543      	cmp	r3, r8
 8006dd8:	d321      	bcc.n	8006e1e <__multiply+0x96>
 8006dda:	f107 0114 	add.w	r1, r7, #20
 8006dde:	f104 0214 	add.w	r2, r4, #20
 8006de2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006de6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006dea:	9302      	str	r3, [sp, #8]
 8006dec:	1b13      	subs	r3, r2, r4
 8006dee:	3b15      	subs	r3, #21
 8006df0:	f023 0303 	bic.w	r3, r3, #3
 8006df4:	3304      	adds	r3, #4
 8006df6:	f104 0715 	add.w	r7, r4, #21
 8006dfa:	42ba      	cmp	r2, r7
 8006dfc:	bf38      	it	cc
 8006dfe:	2304      	movcc	r3, #4
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	9b02      	ldr	r3, [sp, #8]
 8006e04:	9103      	str	r1, [sp, #12]
 8006e06:	428b      	cmp	r3, r1
 8006e08:	d80c      	bhi.n	8006e24 <__multiply+0x9c>
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	dd03      	ble.n	8006e16 <__multiply+0x8e>
 8006e0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d05a      	beq.n	8006ecc <__multiply+0x144>
 8006e16:	6106      	str	r6, [r0, #16]
 8006e18:	b005      	add	sp, #20
 8006e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1e:	f843 2b04 	str.w	r2, [r3], #4
 8006e22:	e7d8      	b.n	8006dd6 <__multiply+0x4e>
 8006e24:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e28:	f1ba 0f00 	cmp.w	sl, #0
 8006e2c:	d023      	beq.n	8006e76 <__multiply+0xee>
 8006e2e:	46a9      	mov	r9, r5
 8006e30:	f04f 0c00 	mov.w	ip, #0
 8006e34:	f104 0e14 	add.w	lr, r4, #20
 8006e38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e3c:	f8d9 3000 	ldr.w	r3, [r9]
 8006e40:	fa1f fb87 	uxth.w	fp, r7
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e4a:	4463      	add	r3, ip
 8006e4c:	f8d9 c000 	ldr.w	ip, [r9]
 8006e50:	0c3f      	lsrs	r7, r7, #16
 8006e52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e56:	fb0a c707 	mla	r7, sl, r7, ip
 8006e5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e64:	4572      	cmp	r2, lr
 8006e66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e6a:	f849 3b04 	str.w	r3, [r9], #4
 8006e6e:	d8e3      	bhi.n	8006e38 <__multiply+0xb0>
 8006e70:	9b01      	ldr	r3, [sp, #4]
 8006e72:	f845 c003 	str.w	ip, [r5, r3]
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	3104      	adds	r1, #4
 8006e7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e7e:	f1b9 0f00 	cmp.w	r9, #0
 8006e82:	d021      	beq.n	8006ec8 <__multiply+0x140>
 8006e84:	46ae      	mov	lr, r5
 8006e86:	f04f 0a00 	mov.w	sl, #0
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	f104 0c14 	add.w	ip, r4, #20
 8006e90:	f8bc b000 	ldrh.w	fp, [ip]
 8006e94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	fb09 770b 	mla	r7, r9, fp, r7
 8006e9e:	4457      	add	r7, sl
 8006ea0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ea4:	f84e 3b04 	str.w	r3, [lr], #4
 8006ea8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006eac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eb0:	f8be 3000 	ldrh.w	r3, [lr]
 8006eb4:	4562      	cmp	r2, ip
 8006eb6:	fb09 330a 	mla	r3, r9, sl, r3
 8006eba:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006ebe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ec2:	d8e5      	bhi.n	8006e90 <__multiply+0x108>
 8006ec4:	9f01      	ldr	r7, [sp, #4]
 8006ec6:	51eb      	str	r3, [r5, r7]
 8006ec8:	3504      	adds	r5, #4
 8006eca:	e79a      	b.n	8006e02 <__multiply+0x7a>
 8006ecc:	3e01      	subs	r6, #1
 8006ece:	e79c      	b.n	8006e0a <__multiply+0x82>
 8006ed0:	080087d8 	.word	0x080087d8
 8006ed4:	080087e9 	.word	0x080087e9

08006ed8 <__pow5mult>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	4615      	mov	r5, r2
 8006ede:	f012 0203 	ands.w	r2, r2, #3
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	460e      	mov	r6, r1
 8006ee6:	d007      	beq.n	8006ef8 <__pow5mult+0x20>
 8006ee8:	4c25      	ldr	r4, [pc, #148]	@ (8006f80 <__pow5mult+0xa8>)
 8006eea:	3a01      	subs	r2, #1
 8006eec:	2300      	movs	r3, #0
 8006eee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ef2:	f7ff fea1 	bl	8006c38 <__multadd>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	10ad      	asrs	r5, r5, #2
 8006efa:	d03d      	beq.n	8006f78 <__pow5mult+0xa0>
 8006efc:	69fc      	ldr	r4, [r7, #28]
 8006efe:	b97c      	cbnz	r4, 8006f20 <__pow5mult+0x48>
 8006f00:	2010      	movs	r0, #16
 8006f02:	f7ff fd81 	bl	8006a08 <malloc>
 8006f06:	4602      	mov	r2, r0
 8006f08:	61f8      	str	r0, [r7, #28]
 8006f0a:	b928      	cbnz	r0, 8006f18 <__pow5mult+0x40>
 8006f0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f10:	4b1c      	ldr	r3, [pc, #112]	@ (8006f84 <__pow5mult+0xac>)
 8006f12:	481d      	ldr	r0, [pc, #116]	@ (8006f88 <__pow5mult+0xb0>)
 8006f14:	f000 ff6e 	bl	8007df4 <__assert_func>
 8006f18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f1c:	6004      	str	r4, [r0, #0]
 8006f1e:	60c4      	str	r4, [r0, #12]
 8006f20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f28:	b94c      	cbnz	r4, 8006f3e <__pow5mult+0x66>
 8006f2a:	f240 2171 	movw	r1, #625	@ 0x271
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f7ff ff14 	bl	8006d5c <__i2b>
 8006f34:	2300      	movs	r3, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f3c:	6003      	str	r3, [r0, #0]
 8006f3e:	f04f 0900 	mov.w	r9, #0
 8006f42:	07eb      	lsls	r3, r5, #31
 8006f44:	d50a      	bpl.n	8006f5c <__pow5mult+0x84>
 8006f46:	4631      	mov	r1, r6
 8006f48:	4622      	mov	r2, r4
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	f7ff ff1c 	bl	8006d88 <__multiply>
 8006f50:	4680      	mov	r8, r0
 8006f52:	4631      	mov	r1, r6
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7ff fe4d 	bl	8006bf4 <_Bfree>
 8006f5a:	4646      	mov	r6, r8
 8006f5c:	106d      	asrs	r5, r5, #1
 8006f5e:	d00b      	beq.n	8006f78 <__pow5mult+0xa0>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	b938      	cbnz	r0, 8006f74 <__pow5mult+0x9c>
 8006f64:	4622      	mov	r2, r4
 8006f66:	4621      	mov	r1, r4
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f7ff ff0d 	bl	8006d88 <__multiply>
 8006f6e:	6020      	str	r0, [r4, #0]
 8006f70:	f8c0 9000 	str.w	r9, [r0]
 8006f74:	4604      	mov	r4, r0
 8006f76:	e7e4      	b.n	8006f42 <__pow5mult+0x6a>
 8006f78:	4630      	mov	r0, r6
 8006f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7e:	bf00      	nop
 8006f80:	08008844 	.word	0x08008844
 8006f84:	08008769 	.word	0x08008769
 8006f88:	080087e9 	.word	0x080087e9

08006f8c <__lshift>:
 8006f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	460c      	mov	r4, r1
 8006f92:	4607      	mov	r7, r0
 8006f94:	4691      	mov	r9, r2
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	6849      	ldr	r1, [r1, #4]
 8006f9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fa4:	f108 0601 	add.w	r6, r8, #1
 8006fa8:	42b3      	cmp	r3, r6
 8006faa:	db0b      	blt.n	8006fc4 <__lshift+0x38>
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7ff fde1 	bl	8006b74 <_Balloc>
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	b948      	cbnz	r0, 8006fca <__lshift+0x3e>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006fbc:	4b27      	ldr	r3, [pc, #156]	@ (800705c <__lshift+0xd0>)
 8006fbe:	4828      	ldr	r0, [pc, #160]	@ (8007060 <__lshift+0xd4>)
 8006fc0:	f000 ff18 	bl	8007df4 <__assert_func>
 8006fc4:	3101      	adds	r1, #1
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	e7ee      	b.n	8006fa8 <__lshift+0x1c>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f100 0114 	add.w	r1, r0, #20
 8006fd0:	f100 0210 	add.w	r2, r0, #16
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	4553      	cmp	r3, sl
 8006fd8:	db33      	blt.n	8007042 <__lshift+0xb6>
 8006fda:	6920      	ldr	r0, [r4, #16]
 8006fdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fe0:	f104 0314 	add.w	r3, r4, #20
 8006fe4:	f019 091f 	ands.w	r9, r9, #31
 8006fe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ff0:	d02b      	beq.n	800704a <__lshift+0xbe>
 8006ff2:	468a      	mov	sl, r1
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f1c9 0e20 	rsb	lr, r9, #32
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	fa00 f009 	lsl.w	r0, r0, r9
 8007000:	4310      	orrs	r0, r2
 8007002:	f84a 0b04 	str.w	r0, [sl], #4
 8007006:	f853 2b04 	ldr.w	r2, [r3], #4
 800700a:	459c      	cmp	ip, r3
 800700c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007010:	d8f3      	bhi.n	8006ffa <__lshift+0x6e>
 8007012:	ebac 0304 	sub.w	r3, ip, r4
 8007016:	3b15      	subs	r3, #21
 8007018:	f023 0303 	bic.w	r3, r3, #3
 800701c:	3304      	adds	r3, #4
 800701e:	f104 0015 	add.w	r0, r4, #21
 8007022:	4584      	cmp	ip, r0
 8007024:	bf38      	it	cc
 8007026:	2304      	movcc	r3, #4
 8007028:	50ca      	str	r2, [r1, r3]
 800702a:	b10a      	cbz	r2, 8007030 <__lshift+0xa4>
 800702c:	f108 0602 	add.w	r6, r8, #2
 8007030:	3e01      	subs	r6, #1
 8007032:	4638      	mov	r0, r7
 8007034:	4621      	mov	r1, r4
 8007036:	612e      	str	r6, [r5, #16]
 8007038:	f7ff fddc 	bl	8006bf4 <_Bfree>
 800703c:	4628      	mov	r0, r5
 800703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007042:	f842 0f04 	str.w	r0, [r2, #4]!
 8007046:	3301      	adds	r3, #1
 8007048:	e7c5      	b.n	8006fd6 <__lshift+0x4a>
 800704a:	3904      	subs	r1, #4
 800704c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007050:	459c      	cmp	ip, r3
 8007052:	f841 2f04 	str.w	r2, [r1, #4]!
 8007056:	d8f9      	bhi.n	800704c <__lshift+0xc0>
 8007058:	e7ea      	b.n	8007030 <__lshift+0xa4>
 800705a:	bf00      	nop
 800705c:	080087d8 	.word	0x080087d8
 8007060:	080087e9 	.word	0x080087e9

08007064 <__mcmp>:
 8007064:	4603      	mov	r3, r0
 8007066:	690a      	ldr	r2, [r1, #16]
 8007068:	6900      	ldr	r0, [r0, #16]
 800706a:	b530      	push	{r4, r5, lr}
 800706c:	1a80      	subs	r0, r0, r2
 800706e:	d10e      	bne.n	800708e <__mcmp+0x2a>
 8007070:	3314      	adds	r3, #20
 8007072:	3114      	adds	r1, #20
 8007074:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007078:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800707c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007080:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007084:	4295      	cmp	r5, r2
 8007086:	d003      	beq.n	8007090 <__mcmp+0x2c>
 8007088:	d205      	bcs.n	8007096 <__mcmp+0x32>
 800708a:	f04f 30ff 	mov.w	r0, #4294967295
 800708e:	bd30      	pop	{r4, r5, pc}
 8007090:	42a3      	cmp	r3, r4
 8007092:	d3f3      	bcc.n	800707c <__mcmp+0x18>
 8007094:	e7fb      	b.n	800708e <__mcmp+0x2a>
 8007096:	2001      	movs	r0, #1
 8007098:	e7f9      	b.n	800708e <__mcmp+0x2a>
	...

0800709c <__mdiff>:
 800709c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	4689      	mov	r9, r1
 80070a2:	4606      	mov	r6, r0
 80070a4:	4611      	mov	r1, r2
 80070a6:	4648      	mov	r0, r9
 80070a8:	4614      	mov	r4, r2
 80070aa:	f7ff ffdb 	bl	8007064 <__mcmp>
 80070ae:	1e05      	subs	r5, r0, #0
 80070b0:	d112      	bne.n	80070d8 <__mdiff+0x3c>
 80070b2:	4629      	mov	r1, r5
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff fd5d 	bl	8006b74 <_Balloc>
 80070ba:	4602      	mov	r2, r0
 80070bc:	b928      	cbnz	r0, 80070ca <__mdiff+0x2e>
 80070be:	f240 2137 	movw	r1, #567	@ 0x237
 80070c2:	4b3e      	ldr	r3, [pc, #248]	@ (80071bc <__mdiff+0x120>)
 80070c4:	483e      	ldr	r0, [pc, #248]	@ (80071c0 <__mdiff+0x124>)
 80070c6:	f000 fe95 	bl	8007df4 <__assert_func>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070d0:	4610      	mov	r0, r2
 80070d2:	b003      	add	sp, #12
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d8:	bfbc      	itt	lt
 80070da:	464b      	movlt	r3, r9
 80070dc:	46a1      	movlt	r9, r4
 80070de:	4630      	mov	r0, r6
 80070e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070e4:	bfba      	itte	lt
 80070e6:	461c      	movlt	r4, r3
 80070e8:	2501      	movlt	r5, #1
 80070ea:	2500      	movge	r5, #0
 80070ec:	f7ff fd42 	bl	8006b74 <_Balloc>
 80070f0:	4602      	mov	r2, r0
 80070f2:	b918      	cbnz	r0, 80070fc <__mdiff+0x60>
 80070f4:	f240 2145 	movw	r1, #581	@ 0x245
 80070f8:	4b30      	ldr	r3, [pc, #192]	@ (80071bc <__mdiff+0x120>)
 80070fa:	e7e3      	b.n	80070c4 <__mdiff+0x28>
 80070fc:	f100 0b14 	add.w	fp, r0, #20
 8007100:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007104:	f109 0310 	add.w	r3, r9, #16
 8007108:	60c5      	str	r5, [r0, #12]
 800710a:	f04f 0c00 	mov.w	ip, #0
 800710e:	f109 0514 	add.w	r5, r9, #20
 8007112:	46d9      	mov	r9, fp
 8007114:	6926      	ldr	r6, [r4, #16]
 8007116:	f104 0e14 	add.w	lr, r4, #20
 800711a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800711e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	9b01      	ldr	r3, [sp, #4]
 8007126:	f85e 0b04 	ldr.w	r0, [lr], #4
 800712a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800712e:	b281      	uxth	r1, r0
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	fa1f f38a 	uxth.w	r3, sl
 8007136:	1a5b      	subs	r3, r3, r1
 8007138:	0c00      	lsrs	r0, r0, #16
 800713a:	4463      	add	r3, ip
 800713c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007140:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800714a:	4576      	cmp	r6, lr
 800714c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007150:	f849 3b04 	str.w	r3, [r9], #4
 8007154:	d8e6      	bhi.n	8007124 <__mdiff+0x88>
 8007156:	1b33      	subs	r3, r6, r4
 8007158:	3b15      	subs	r3, #21
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	3415      	adds	r4, #21
 8007160:	3304      	adds	r3, #4
 8007162:	42a6      	cmp	r6, r4
 8007164:	bf38      	it	cc
 8007166:	2304      	movcc	r3, #4
 8007168:	441d      	add	r5, r3
 800716a:	445b      	add	r3, fp
 800716c:	461e      	mov	r6, r3
 800716e:	462c      	mov	r4, r5
 8007170:	4544      	cmp	r4, r8
 8007172:	d30e      	bcc.n	8007192 <__mdiff+0xf6>
 8007174:	f108 0103 	add.w	r1, r8, #3
 8007178:	1b49      	subs	r1, r1, r5
 800717a:	f021 0103 	bic.w	r1, r1, #3
 800717e:	3d03      	subs	r5, #3
 8007180:	45a8      	cmp	r8, r5
 8007182:	bf38      	it	cc
 8007184:	2100      	movcc	r1, #0
 8007186:	440b      	add	r3, r1
 8007188:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800718c:	b199      	cbz	r1, 80071b6 <__mdiff+0x11a>
 800718e:	6117      	str	r7, [r2, #16]
 8007190:	e79e      	b.n	80070d0 <__mdiff+0x34>
 8007192:	46e6      	mov	lr, ip
 8007194:	f854 1b04 	ldr.w	r1, [r4], #4
 8007198:	fa1f fc81 	uxth.w	ip, r1
 800719c:	44f4      	add	ip, lr
 800719e:	0c08      	lsrs	r0, r1, #16
 80071a0:	4471      	add	r1, lr
 80071a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80071a6:	b289      	uxth	r1, r1
 80071a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071b0:	f846 1b04 	str.w	r1, [r6], #4
 80071b4:	e7dc      	b.n	8007170 <__mdiff+0xd4>
 80071b6:	3f01      	subs	r7, #1
 80071b8:	e7e6      	b.n	8007188 <__mdiff+0xec>
 80071ba:	bf00      	nop
 80071bc:	080087d8 	.word	0x080087d8
 80071c0:	080087e9 	.word	0x080087e9

080071c4 <__d2b>:
 80071c4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80071c8:	2101      	movs	r1, #1
 80071ca:	4690      	mov	r8, r2
 80071cc:	4699      	mov	r9, r3
 80071ce:	9e08      	ldr	r6, [sp, #32]
 80071d0:	f7ff fcd0 	bl	8006b74 <_Balloc>
 80071d4:	4604      	mov	r4, r0
 80071d6:	b930      	cbnz	r0, 80071e6 <__d2b+0x22>
 80071d8:	4602      	mov	r2, r0
 80071da:	f240 310f 	movw	r1, #783	@ 0x30f
 80071de:	4b23      	ldr	r3, [pc, #140]	@ (800726c <__d2b+0xa8>)
 80071e0:	4823      	ldr	r0, [pc, #140]	@ (8007270 <__d2b+0xac>)
 80071e2:	f000 fe07 	bl	8007df4 <__assert_func>
 80071e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071ee:	b10d      	cbz	r5, 80071f4 <__d2b+0x30>
 80071f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	f1b8 0300 	subs.w	r3, r8, #0
 80071fa:	d024      	beq.n	8007246 <__d2b+0x82>
 80071fc:	4668      	mov	r0, sp
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	f7ff fd7f 	bl	8006d02 <__lo0bits>
 8007204:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007208:	b1d8      	cbz	r0, 8007242 <__d2b+0x7e>
 800720a:	f1c0 0320 	rsb	r3, r0, #32
 800720e:	fa02 f303 	lsl.w	r3, r2, r3
 8007212:	430b      	orrs	r3, r1
 8007214:	40c2      	lsrs	r2, r0
 8007216:	6163      	str	r3, [r4, #20]
 8007218:	9201      	str	r2, [sp, #4]
 800721a:	9b01      	ldr	r3, [sp, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	bf0c      	ite	eq
 8007220:	2201      	moveq	r2, #1
 8007222:	2202      	movne	r2, #2
 8007224:	61a3      	str	r3, [r4, #24]
 8007226:	6122      	str	r2, [r4, #16]
 8007228:	b1ad      	cbz	r5, 8007256 <__d2b+0x92>
 800722a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800722e:	4405      	add	r5, r0
 8007230:	6035      	str	r5, [r6, #0]
 8007232:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007238:	6018      	str	r0, [r3, #0]
 800723a:	4620      	mov	r0, r4
 800723c:	b002      	add	sp, #8
 800723e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007242:	6161      	str	r1, [r4, #20]
 8007244:	e7e9      	b.n	800721a <__d2b+0x56>
 8007246:	a801      	add	r0, sp, #4
 8007248:	f7ff fd5b 	bl	8006d02 <__lo0bits>
 800724c:	9b01      	ldr	r3, [sp, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	3020      	adds	r0, #32
 8007254:	e7e7      	b.n	8007226 <__d2b+0x62>
 8007256:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800725a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800725e:	6030      	str	r0, [r6, #0]
 8007260:	6918      	ldr	r0, [r3, #16]
 8007262:	f7ff fd2f 	bl	8006cc4 <__hi0bits>
 8007266:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800726a:	e7e4      	b.n	8007236 <__d2b+0x72>
 800726c:	080087d8 	.word	0x080087d8
 8007270:	080087e9 	.word	0x080087e9

08007274 <__ssputs_r>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	461f      	mov	r7, r3
 800727a:	688e      	ldr	r6, [r1, #8]
 800727c:	4682      	mov	sl, r0
 800727e:	42be      	cmp	r6, r7
 8007280:	460c      	mov	r4, r1
 8007282:	4690      	mov	r8, r2
 8007284:	680b      	ldr	r3, [r1, #0]
 8007286:	d82d      	bhi.n	80072e4 <__ssputs_r+0x70>
 8007288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800728c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007290:	d026      	beq.n	80072e0 <__ssputs_r+0x6c>
 8007292:	6965      	ldr	r5, [r4, #20]
 8007294:	6909      	ldr	r1, [r1, #16]
 8007296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800729a:	eba3 0901 	sub.w	r9, r3, r1
 800729e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072a2:	1c7b      	adds	r3, r7, #1
 80072a4:	444b      	add	r3, r9
 80072a6:	106d      	asrs	r5, r5, #1
 80072a8:	429d      	cmp	r5, r3
 80072aa:	bf38      	it	cc
 80072ac:	461d      	movcc	r5, r3
 80072ae:	0553      	lsls	r3, r2, #21
 80072b0:	d527      	bpl.n	8007302 <__ssputs_r+0x8e>
 80072b2:	4629      	mov	r1, r5
 80072b4:	f7ff fbd2 	bl	8006a5c <_malloc_r>
 80072b8:	4606      	mov	r6, r0
 80072ba:	b360      	cbz	r0, 8007316 <__ssputs_r+0xa2>
 80072bc:	464a      	mov	r2, r9
 80072be:	6921      	ldr	r1, [r4, #16]
 80072c0:	f000 fd8a 	bl	8007dd8 <memcpy>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	6126      	str	r6, [r4, #16]
 80072d2:	444e      	add	r6, r9
 80072d4:	6026      	str	r6, [r4, #0]
 80072d6:	463e      	mov	r6, r7
 80072d8:	6165      	str	r5, [r4, #20]
 80072da:	eba5 0509 	sub.w	r5, r5, r9
 80072de:	60a5      	str	r5, [r4, #8]
 80072e0:	42be      	cmp	r6, r7
 80072e2:	d900      	bls.n	80072e6 <__ssputs_r+0x72>
 80072e4:	463e      	mov	r6, r7
 80072e6:	4632      	mov	r2, r6
 80072e8:	4641      	mov	r1, r8
 80072ea:	6820      	ldr	r0, [r4, #0]
 80072ec:	f000 fd49 	bl	8007d82 <memmove>
 80072f0:	2000      	movs	r0, #0
 80072f2:	68a3      	ldr	r3, [r4, #8]
 80072f4:	1b9b      	subs	r3, r3, r6
 80072f6:	60a3      	str	r3, [r4, #8]
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	4433      	add	r3, r6
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007302:	462a      	mov	r2, r5
 8007304:	f000 fdba 	bl	8007e7c <_realloc_r>
 8007308:	4606      	mov	r6, r0
 800730a:	2800      	cmp	r0, #0
 800730c:	d1e0      	bne.n	80072d0 <__ssputs_r+0x5c>
 800730e:	4650      	mov	r0, sl
 8007310:	6921      	ldr	r1, [r4, #16]
 8007312:	f7ff fb31 	bl	8006978 <_free_r>
 8007316:	230c      	movs	r3, #12
 8007318:	f8ca 3000 	str.w	r3, [sl]
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007326:	81a3      	strh	r3, [r4, #12]
 8007328:	e7e9      	b.n	80072fe <__ssputs_r+0x8a>
	...

0800732c <_svfiprintf_r>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	4698      	mov	r8, r3
 8007332:	898b      	ldrh	r3, [r1, #12]
 8007334:	4607      	mov	r7, r0
 8007336:	061b      	lsls	r3, r3, #24
 8007338:	460d      	mov	r5, r1
 800733a:	4614      	mov	r4, r2
 800733c:	b09d      	sub	sp, #116	@ 0x74
 800733e:	d510      	bpl.n	8007362 <_svfiprintf_r+0x36>
 8007340:	690b      	ldr	r3, [r1, #16]
 8007342:	b973      	cbnz	r3, 8007362 <_svfiprintf_r+0x36>
 8007344:	2140      	movs	r1, #64	@ 0x40
 8007346:	f7ff fb89 	bl	8006a5c <_malloc_r>
 800734a:	6028      	str	r0, [r5, #0]
 800734c:	6128      	str	r0, [r5, #16]
 800734e:	b930      	cbnz	r0, 800735e <_svfiprintf_r+0x32>
 8007350:	230c      	movs	r3, #12
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	b01d      	add	sp, #116	@ 0x74
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	2340      	movs	r3, #64	@ 0x40
 8007360:	616b      	str	r3, [r5, #20]
 8007362:	2300      	movs	r3, #0
 8007364:	9309      	str	r3, [sp, #36]	@ 0x24
 8007366:	2320      	movs	r3, #32
 8007368:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800736c:	2330      	movs	r3, #48	@ 0x30
 800736e:	f04f 0901 	mov.w	r9, #1
 8007372:	f8cd 800c 	str.w	r8, [sp, #12]
 8007376:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007510 <_svfiprintf_r+0x1e4>
 800737a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800737e:	4623      	mov	r3, r4
 8007380:	469a      	mov	sl, r3
 8007382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007386:	b10a      	cbz	r2, 800738c <_svfiprintf_r+0x60>
 8007388:	2a25      	cmp	r2, #37	@ 0x25
 800738a:	d1f9      	bne.n	8007380 <_svfiprintf_r+0x54>
 800738c:	ebba 0b04 	subs.w	fp, sl, r4
 8007390:	d00b      	beq.n	80073aa <_svfiprintf_r+0x7e>
 8007392:	465b      	mov	r3, fp
 8007394:	4622      	mov	r2, r4
 8007396:	4629      	mov	r1, r5
 8007398:	4638      	mov	r0, r7
 800739a:	f7ff ff6b 	bl	8007274 <__ssputs_r>
 800739e:	3001      	adds	r0, #1
 80073a0:	f000 80a7 	beq.w	80074f2 <_svfiprintf_r+0x1c6>
 80073a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a6:	445a      	add	r2, fp
 80073a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80073aa:	f89a 3000 	ldrb.w	r3, [sl]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 809f 	beq.w	80074f2 <_svfiprintf_r+0x1c6>
 80073b4:	2300      	movs	r3, #0
 80073b6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073be:	f10a 0a01 	add.w	sl, sl, #1
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	9307      	str	r3, [sp, #28]
 80073c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80073cc:	4654      	mov	r4, sl
 80073ce:	2205      	movs	r2, #5
 80073d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d4:	484e      	ldr	r0, [pc, #312]	@ (8007510 <_svfiprintf_r+0x1e4>)
 80073d6:	f7fe fc70 	bl	8005cba <memchr>
 80073da:	9a04      	ldr	r2, [sp, #16]
 80073dc:	b9d8      	cbnz	r0, 8007416 <_svfiprintf_r+0xea>
 80073de:	06d0      	lsls	r0, r2, #27
 80073e0:	bf44      	itt	mi
 80073e2:	2320      	movmi	r3, #32
 80073e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e8:	0711      	lsls	r1, r2, #28
 80073ea:	bf44      	itt	mi
 80073ec:	232b      	movmi	r3, #43	@ 0x2b
 80073ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f2:	f89a 3000 	ldrb.w	r3, [sl]
 80073f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f8:	d015      	beq.n	8007426 <_svfiprintf_r+0xfa>
 80073fa:	4654      	mov	r4, sl
 80073fc:	2000      	movs	r0, #0
 80073fe:	f04f 0c0a 	mov.w	ip, #10
 8007402:	9a07      	ldr	r2, [sp, #28]
 8007404:	4621      	mov	r1, r4
 8007406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800740a:	3b30      	subs	r3, #48	@ 0x30
 800740c:	2b09      	cmp	r3, #9
 800740e:	d94b      	bls.n	80074a8 <_svfiprintf_r+0x17c>
 8007410:	b1b0      	cbz	r0, 8007440 <_svfiprintf_r+0x114>
 8007412:	9207      	str	r2, [sp, #28]
 8007414:	e014      	b.n	8007440 <_svfiprintf_r+0x114>
 8007416:	eba0 0308 	sub.w	r3, r0, r8
 800741a:	fa09 f303 	lsl.w	r3, r9, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	46a2      	mov	sl, r4
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	e7d2      	b.n	80073cc <_svfiprintf_r+0xa0>
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	1d19      	adds	r1, r3, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	9103      	str	r1, [sp, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfbb      	ittet	lt
 8007432:	425b      	neglt	r3, r3
 8007434:	f042 0202 	orrlt.w	r2, r2, #2
 8007438:	9307      	strge	r3, [sp, #28]
 800743a:	9307      	strlt	r3, [sp, #28]
 800743c:	bfb8      	it	lt
 800743e:	9204      	strlt	r2, [sp, #16]
 8007440:	7823      	ldrb	r3, [r4, #0]
 8007442:	2b2e      	cmp	r3, #46	@ 0x2e
 8007444:	d10a      	bne.n	800745c <_svfiprintf_r+0x130>
 8007446:	7863      	ldrb	r3, [r4, #1]
 8007448:	2b2a      	cmp	r3, #42	@ 0x2a
 800744a:	d132      	bne.n	80074b2 <_svfiprintf_r+0x186>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	3402      	adds	r4, #2
 8007450:	1d1a      	adds	r2, r3, #4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	9203      	str	r2, [sp, #12]
 8007456:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007514 <_svfiprintf_r+0x1e8>
 8007460:	2203      	movs	r2, #3
 8007462:	4650      	mov	r0, sl
 8007464:	7821      	ldrb	r1, [r4, #0]
 8007466:	f7fe fc28 	bl	8005cba <memchr>
 800746a:	b138      	cbz	r0, 800747c <_svfiprintf_r+0x150>
 800746c:	2240      	movs	r2, #64	@ 0x40
 800746e:	9b04      	ldr	r3, [sp, #16]
 8007470:	eba0 000a 	sub.w	r0, r0, sl
 8007474:	4082      	lsls	r2, r0
 8007476:	4313      	orrs	r3, r2
 8007478:	3401      	adds	r4, #1
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	2206      	movs	r2, #6
 8007482:	4825      	ldr	r0, [pc, #148]	@ (8007518 <_svfiprintf_r+0x1ec>)
 8007484:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007488:	f7fe fc17 	bl	8005cba <memchr>
 800748c:	2800      	cmp	r0, #0
 800748e:	d036      	beq.n	80074fe <_svfiprintf_r+0x1d2>
 8007490:	4b22      	ldr	r3, [pc, #136]	@ (800751c <_svfiprintf_r+0x1f0>)
 8007492:	bb1b      	cbnz	r3, 80074dc <_svfiprintf_r+0x1b0>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	3307      	adds	r3, #7
 8007498:	f023 0307 	bic.w	r3, r3, #7
 800749c:	3308      	adds	r3, #8
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a2:	4433      	add	r3, r6
 80074a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a6:	e76a      	b.n	800737e <_svfiprintf_r+0x52>
 80074a8:	460c      	mov	r4, r1
 80074aa:	2001      	movs	r0, #1
 80074ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80074b0:	e7a8      	b.n	8007404 <_svfiprintf_r+0xd8>
 80074b2:	2300      	movs	r3, #0
 80074b4:	f04f 0c0a 	mov.w	ip, #10
 80074b8:	4619      	mov	r1, r3
 80074ba:	3401      	adds	r4, #1
 80074bc:	9305      	str	r3, [sp, #20]
 80074be:	4620      	mov	r0, r4
 80074c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c4:	3a30      	subs	r2, #48	@ 0x30
 80074c6:	2a09      	cmp	r2, #9
 80074c8:	d903      	bls.n	80074d2 <_svfiprintf_r+0x1a6>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0c6      	beq.n	800745c <_svfiprintf_r+0x130>
 80074ce:	9105      	str	r1, [sp, #20]
 80074d0:	e7c4      	b.n	800745c <_svfiprintf_r+0x130>
 80074d2:	4604      	mov	r4, r0
 80074d4:	2301      	movs	r3, #1
 80074d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80074da:	e7f0      	b.n	80074be <_svfiprintf_r+0x192>
 80074dc:	ab03      	add	r3, sp, #12
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	462a      	mov	r2, r5
 80074e2:	4638      	mov	r0, r7
 80074e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007520 <_svfiprintf_r+0x1f4>)
 80074e6:	a904      	add	r1, sp, #16
 80074e8:	f7fd fe24 	bl	8005134 <_printf_float>
 80074ec:	1c42      	adds	r2, r0, #1
 80074ee:	4606      	mov	r6, r0
 80074f0:	d1d6      	bne.n	80074a0 <_svfiprintf_r+0x174>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	065b      	lsls	r3, r3, #25
 80074f6:	f53f af2d 	bmi.w	8007354 <_svfiprintf_r+0x28>
 80074fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074fc:	e72c      	b.n	8007358 <_svfiprintf_r+0x2c>
 80074fe:	ab03      	add	r3, sp, #12
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	462a      	mov	r2, r5
 8007504:	4638      	mov	r0, r7
 8007506:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <_svfiprintf_r+0x1f4>)
 8007508:	a904      	add	r1, sp, #16
 800750a:	f7fe f8b1 	bl	8005670 <_printf_i>
 800750e:	e7ed      	b.n	80074ec <_svfiprintf_r+0x1c0>
 8007510:	08008940 	.word	0x08008940
 8007514:	08008946 	.word	0x08008946
 8007518:	0800894a 	.word	0x0800894a
 800751c:	08005135 	.word	0x08005135
 8007520:	08007275 	.word	0x08007275

08007524 <_sungetc_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	1c4b      	adds	r3, r1, #1
 8007528:	4614      	mov	r4, r2
 800752a:	d103      	bne.n	8007534 <_sungetc_r+0x10>
 800752c:	f04f 35ff 	mov.w	r5, #4294967295
 8007530:	4628      	mov	r0, r5
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	8993      	ldrh	r3, [r2, #12]
 8007536:	b2cd      	uxtb	r5, r1
 8007538:	f023 0320 	bic.w	r3, r3, #32
 800753c:	8193      	strh	r3, [r2, #12]
 800753e:	6853      	ldr	r3, [r2, #4]
 8007540:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007542:	b18a      	cbz	r2, 8007568 <_sungetc_r+0x44>
 8007544:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007546:	429a      	cmp	r2, r3
 8007548:	dd08      	ble.n	800755c <_sungetc_r+0x38>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	1e5a      	subs	r2, r3, #1
 800754e:	6022      	str	r2, [r4, #0]
 8007550:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007554:	6863      	ldr	r3, [r4, #4]
 8007556:	3301      	adds	r3, #1
 8007558:	6063      	str	r3, [r4, #4]
 800755a:	e7e9      	b.n	8007530 <_sungetc_r+0xc>
 800755c:	4621      	mov	r1, r4
 800755e:	f000 fbd8 	bl	8007d12 <__submore>
 8007562:	2800      	cmp	r0, #0
 8007564:	d0f1      	beq.n	800754a <_sungetc_r+0x26>
 8007566:	e7e1      	b.n	800752c <_sungetc_r+0x8>
 8007568:	6921      	ldr	r1, [r4, #16]
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	b141      	cbz	r1, 8007580 <_sungetc_r+0x5c>
 800756e:	4291      	cmp	r1, r2
 8007570:	d206      	bcs.n	8007580 <_sungetc_r+0x5c>
 8007572:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007576:	42a9      	cmp	r1, r5
 8007578:	d102      	bne.n	8007580 <_sungetc_r+0x5c>
 800757a:	3a01      	subs	r2, #1
 800757c:	6022      	str	r2, [r4, #0]
 800757e:	e7ea      	b.n	8007556 <_sungetc_r+0x32>
 8007580:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007588:	6363      	str	r3, [r4, #52]	@ 0x34
 800758a:	2303      	movs	r3, #3
 800758c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800758e:	4623      	mov	r3, r4
 8007590:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	2301      	movs	r3, #1
 8007598:	e7de      	b.n	8007558 <_sungetc_r+0x34>

0800759a <__ssrefill_r>:
 800759a:	b510      	push	{r4, lr}
 800759c:	460c      	mov	r4, r1
 800759e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80075a0:	b169      	cbz	r1, 80075be <__ssrefill_r+0x24>
 80075a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075a6:	4299      	cmp	r1, r3
 80075a8:	d001      	beq.n	80075ae <__ssrefill_r+0x14>
 80075aa:	f7ff f9e5 	bl	8006978 <_free_r>
 80075ae:	2000      	movs	r0, #0
 80075b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075b2:	6360      	str	r0, [r4, #52]	@ 0x34
 80075b4:	6063      	str	r3, [r4, #4]
 80075b6:	b113      	cbz	r3, 80075be <__ssrefill_r+0x24>
 80075b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80075ba:	6023      	str	r3, [r4, #0]
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	2300      	movs	r3, #0
 80075c8:	6063      	str	r3, [r4, #4]
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f043 0320 	orr.w	r3, r3, #32
 80075d0:	81a3      	strh	r3, [r4, #12]
 80075d2:	e7f3      	b.n	80075bc <__ssrefill_r+0x22>

080075d4 <__ssvfiscanf_r>:
 80075d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	460c      	mov	r4, r1
 80075da:	2100      	movs	r1, #0
 80075dc:	4606      	mov	r6, r0
 80075de:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80075e2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80075e6:	49aa      	ldr	r1, [pc, #680]	@ (8007890 <__ssvfiscanf_r+0x2bc>)
 80075e8:	f10d 0804 	add.w	r8, sp, #4
 80075ec:	91a0      	str	r1, [sp, #640]	@ 0x280
 80075ee:	49a9      	ldr	r1, [pc, #676]	@ (8007894 <__ssvfiscanf_r+0x2c0>)
 80075f0:	4fa9      	ldr	r7, [pc, #676]	@ (8007898 <__ssvfiscanf_r+0x2c4>)
 80075f2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80075f6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	7813      	ldrb	r3, [r2, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8159 	beq.w	80078b4 <__ssvfiscanf_r+0x2e0>
 8007602:	5cf9      	ldrb	r1, [r7, r3]
 8007604:	1c55      	adds	r5, r2, #1
 8007606:	f011 0108 	ands.w	r1, r1, #8
 800760a:	d019      	beq.n	8007640 <__ssvfiscanf_r+0x6c>
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd0f      	ble.n	8007632 <__ssvfiscanf_r+0x5e>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	5cba      	ldrb	r2, [r7, r2]
 8007618:	0712      	lsls	r2, r2, #28
 800761a:	d401      	bmi.n	8007620 <__ssvfiscanf_r+0x4c>
 800761c:	462a      	mov	r2, r5
 800761e:	e7ec      	b.n	80075fa <__ssvfiscanf_r+0x26>
 8007620:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007622:	3301      	adds	r3, #1
 8007624:	3201      	adds	r2, #1
 8007626:	9245      	str	r2, [sp, #276]	@ 0x114
 8007628:	6862      	ldr	r2, [r4, #4]
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	3a01      	subs	r2, #1
 800762e:	6062      	str	r2, [r4, #4]
 8007630:	e7ec      	b.n	800760c <__ssvfiscanf_r+0x38>
 8007632:	4621      	mov	r1, r4
 8007634:	4630      	mov	r0, r6
 8007636:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007638:	4798      	blx	r3
 800763a:	2800      	cmp	r0, #0
 800763c:	d0e9      	beq.n	8007612 <__ssvfiscanf_r+0x3e>
 800763e:	e7ed      	b.n	800761c <__ssvfiscanf_r+0x48>
 8007640:	2b25      	cmp	r3, #37	@ 0x25
 8007642:	d012      	beq.n	800766a <__ssvfiscanf_r+0x96>
 8007644:	4699      	mov	r9, r3
 8007646:	6863      	ldr	r3, [r4, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f340 8094 	ble.w	8007776 <__ssvfiscanf_r+0x1a2>
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	7813      	ldrb	r3, [r2, #0]
 8007652:	454b      	cmp	r3, r9
 8007654:	f040 812e 	bne.w	80078b4 <__ssvfiscanf_r+0x2e0>
 8007658:	6863      	ldr	r3, [r4, #4]
 800765a:	3201      	adds	r2, #1
 800765c:	3b01      	subs	r3, #1
 800765e:	6063      	str	r3, [r4, #4]
 8007660:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007662:	6022      	str	r2, [r4, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	9345      	str	r3, [sp, #276]	@ 0x114
 8007668:	e7d8      	b.n	800761c <__ssvfiscanf_r+0x48>
 800766a:	9141      	str	r1, [sp, #260]	@ 0x104
 800766c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800766e:	7853      	ldrb	r3, [r2, #1]
 8007670:	2b2a      	cmp	r3, #42	@ 0x2a
 8007672:	bf04      	itt	eq
 8007674:	2310      	moveq	r3, #16
 8007676:	1c95      	addeq	r5, r2, #2
 8007678:	f04f 020a 	mov.w	r2, #10
 800767c:	bf08      	it	eq
 800767e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007680:	46a9      	mov	r9, r5
 8007682:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007686:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800768a:	2b09      	cmp	r3, #9
 800768c:	d91e      	bls.n	80076cc <__ssvfiscanf_r+0xf8>
 800768e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800789c <__ssvfiscanf_r+0x2c8>
 8007692:	2203      	movs	r2, #3
 8007694:	4650      	mov	r0, sl
 8007696:	f7fe fb10 	bl	8005cba <memchr>
 800769a:	b138      	cbz	r0, 80076ac <__ssvfiscanf_r+0xd8>
 800769c:	2301      	movs	r3, #1
 800769e:	464d      	mov	r5, r9
 80076a0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80076a2:	eba0 000a 	sub.w	r0, r0, sl
 80076a6:	4083      	lsls	r3, r0
 80076a8:	4313      	orrs	r3, r2
 80076aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80076ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076b0:	2b78      	cmp	r3, #120	@ 0x78
 80076b2:	d806      	bhi.n	80076c2 <__ssvfiscanf_r+0xee>
 80076b4:	2b57      	cmp	r3, #87	@ 0x57
 80076b6:	d810      	bhi.n	80076da <__ssvfiscanf_r+0x106>
 80076b8:	2b25      	cmp	r3, #37	@ 0x25
 80076ba:	d0c3      	beq.n	8007644 <__ssvfiscanf_r+0x70>
 80076bc:	d856      	bhi.n	800776c <__ssvfiscanf_r+0x198>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d064      	beq.n	800778c <__ssvfiscanf_r+0x1b8>
 80076c2:	2303      	movs	r3, #3
 80076c4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80076c6:	230a      	movs	r3, #10
 80076c8:	9342      	str	r3, [sp, #264]	@ 0x108
 80076ca:	e077      	b.n	80077bc <__ssvfiscanf_r+0x1e8>
 80076cc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80076ce:	464d      	mov	r5, r9
 80076d0:	fb02 1103 	mla	r1, r2, r3, r1
 80076d4:	3930      	subs	r1, #48	@ 0x30
 80076d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80076d8:	e7d2      	b.n	8007680 <__ssvfiscanf_r+0xac>
 80076da:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80076de:	2a20      	cmp	r2, #32
 80076e0:	d8ef      	bhi.n	80076c2 <__ssvfiscanf_r+0xee>
 80076e2:	a101      	add	r1, pc, #4	@ (adr r1, 80076e8 <__ssvfiscanf_r+0x114>)
 80076e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076e8:	0800779b 	.word	0x0800779b
 80076ec:	080076c3 	.word	0x080076c3
 80076f0:	080076c3 	.word	0x080076c3
 80076f4:	080077f5 	.word	0x080077f5
 80076f8:	080076c3 	.word	0x080076c3
 80076fc:	080076c3 	.word	0x080076c3
 8007700:	080076c3 	.word	0x080076c3
 8007704:	080076c3 	.word	0x080076c3
 8007708:	080076c3 	.word	0x080076c3
 800770c:	080076c3 	.word	0x080076c3
 8007710:	080076c3 	.word	0x080076c3
 8007714:	0800780b 	.word	0x0800780b
 8007718:	080077f1 	.word	0x080077f1
 800771c:	08007773 	.word	0x08007773
 8007720:	08007773 	.word	0x08007773
 8007724:	08007773 	.word	0x08007773
 8007728:	080076c3 	.word	0x080076c3
 800772c:	080077ad 	.word	0x080077ad
 8007730:	080076c3 	.word	0x080076c3
 8007734:	080076c3 	.word	0x080076c3
 8007738:	080076c3 	.word	0x080076c3
 800773c:	080076c3 	.word	0x080076c3
 8007740:	0800781b 	.word	0x0800781b
 8007744:	080077b5 	.word	0x080077b5
 8007748:	08007793 	.word	0x08007793
 800774c:	080076c3 	.word	0x080076c3
 8007750:	080076c3 	.word	0x080076c3
 8007754:	08007817 	.word	0x08007817
 8007758:	080076c3 	.word	0x080076c3
 800775c:	080077f1 	.word	0x080077f1
 8007760:	080076c3 	.word	0x080076c3
 8007764:	080076c3 	.word	0x080076c3
 8007768:	0800779b 	.word	0x0800779b
 800776c:	3b45      	subs	r3, #69	@ 0x45
 800776e:	2b02      	cmp	r3, #2
 8007770:	d8a7      	bhi.n	80076c2 <__ssvfiscanf_r+0xee>
 8007772:	2305      	movs	r3, #5
 8007774:	e021      	b.n	80077ba <__ssvfiscanf_r+0x1e6>
 8007776:	4621      	mov	r1, r4
 8007778:	4630      	mov	r0, r6
 800777a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800777c:	4798      	blx	r3
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f af65 	beq.w	800764e <__ssvfiscanf_r+0x7a>
 8007784:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007786:	2800      	cmp	r0, #0
 8007788:	f040 808c 	bne.w	80078a4 <__ssvfiscanf_r+0x2d0>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e08c      	b.n	80078ac <__ssvfiscanf_r+0x2d8>
 8007792:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007794:	f042 0220 	orr.w	r2, r2, #32
 8007798:	9241      	str	r2, [sp, #260]	@ 0x104
 800779a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800779c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077a0:	9241      	str	r2, [sp, #260]	@ 0x104
 80077a2:	2210      	movs	r2, #16
 80077a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80077a6:	9242      	str	r2, [sp, #264]	@ 0x108
 80077a8:	d902      	bls.n	80077b0 <__ssvfiscanf_r+0x1dc>
 80077aa:	e005      	b.n	80077b8 <__ssvfiscanf_r+0x1e4>
 80077ac:	2300      	movs	r3, #0
 80077ae:	9342      	str	r3, [sp, #264]	@ 0x108
 80077b0:	2303      	movs	r3, #3
 80077b2:	e002      	b.n	80077ba <__ssvfiscanf_r+0x1e6>
 80077b4:	2308      	movs	r3, #8
 80077b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80077b8:	2304      	movs	r3, #4
 80077ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	dd39      	ble.n	8007836 <__ssvfiscanf_r+0x262>
 80077c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80077c4:	0659      	lsls	r1, r3, #25
 80077c6:	d404      	bmi.n	80077d2 <__ssvfiscanf_r+0x1fe>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	5cba      	ldrb	r2, [r7, r2]
 80077ce:	0712      	lsls	r2, r2, #28
 80077d0:	d438      	bmi.n	8007844 <__ssvfiscanf_r+0x270>
 80077d2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	dc47      	bgt.n	8007868 <__ssvfiscanf_r+0x294>
 80077d8:	466b      	mov	r3, sp
 80077da:	4622      	mov	r2, r4
 80077dc:	4630      	mov	r0, r6
 80077de:	a941      	add	r1, sp, #260	@ 0x104
 80077e0:	f000 f86a 	bl	80078b8 <_scanf_chars>
 80077e4:	2801      	cmp	r0, #1
 80077e6:	d065      	beq.n	80078b4 <__ssvfiscanf_r+0x2e0>
 80077e8:	2802      	cmp	r0, #2
 80077ea:	f47f af17 	bne.w	800761c <__ssvfiscanf_r+0x48>
 80077ee:	e7c9      	b.n	8007784 <__ssvfiscanf_r+0x1b0>
 80077f0:	220a      	movs	r2, #10
 80077f2:	e7d7      	b.n	80077a4 <__ssvfiscanf_r+0x1d0>
 80077f4:	4629      	mov	r1, r5
 80077f6:	4640      	mov	r0, r8
 80077f8:	f000 fa52 	bl	8007ca0 <__sccl>
 80077fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80077fe:	4605      	mov	r5, r0
 8007800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007804:	9341      	str	r3, [sp, #260]	@ 0x104
 8007806:	2301      	movs	r3, #1
 8007808:	e7d7      	b.n	80077ba <__ssvfiscanf_r+0x1e6>
 800780a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800780c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007810:	9341      	str	r3, [sp, #260]	@ 0x104
 8007812:	2300      	movs	r3, #0
 8007814:	e7d1      	b.n	80077ba <__ssvfiscanf_r+0x1e6>
 8007816:	2302      	movs	r3, #2
 8007818:	e7cf      	b.n	80077ba <__ssvfiscanf_r+0x1e6>
 800781a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800781c:	06c3      	lsls	r3, r0, #27
 800781e:	f53f aefd 	bmi.w	800761c <__ssvfiscanf_r+0x48>
 8007822:	9b00      	ldr	r3, [sp, #0]
 8007824:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007826:	1d19      	adds	r1, r3, #4
 8007828:	9100      	str	r1, [sp, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	07c0      	lsls	r0, r0, #31
 800782e:	bf4c      	ite	mi
 8007830:	801a      	strhmi	r2, [r3, #0]
 8007832:	601a      	strpl	r2, [r3, #0]
 8007834:	e6f2      	b.n	800761c <__ssvfiscanf_r+0x48>
 8007836:	4621      	mov	r1, r4
 8007838:	4630      	mov	r0, r6
 800783a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800783c:	4798      	blx	r3
 800783e:	2800      	cmp	r0, #0
 8007840:	d0bf      	beq.n	80077c2 <__ssvfiscanf_r+0x1ee>
 8007842:	e79f      	b.n	8007784 <__ssvfiscanf_r+0x1b0>
 8007844:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007846:	3201      	adds	r2, #1
 8007848:	9245      	str	r2, [sp, #276]	@ 0x114
 800784a:	6862      	ldr	r2, [r4, #4]
 800784c:	3a01      	subs	r2, #1
 800784e:	2a00      	cmp	r2, #0
 8007850:	6062      	str	r2, [r4, #4]
 8007852:	dd02      	ble.n	800785a <__ssvfiscanf_r+0x286>
 8007854:	3301      	adds	r3, #1
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	e7b6      	b.n	80077c8 <__ssvfiscanf_r+0x1f4>
 800785a:	4621      	mov	r1, r4
 800785c:	4630      	mov	r0, r6
 800785e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007860:	4798      	blx	r3
 8007862:	2800      	cmp	r0, #0
 8007864:	d0b0      	beq.n	80077c8 <__ssvfiscanf_r+0x1f4>
 8007866:	e78d      	b.n	8007784 <__ssvfiscanf_r+0x1b0>
 8007868:	2b04      	cmp	r3, #4
 800786a:	dc06      	bgt.n	800787a <__ssvfiscanf_r+0x2a6>
 800786c:	466b      	mov	r3, sp
 800786e:	4622      	mov	r2, r4
 8007870:	4630      	mov	r0, r6
 8007872:	a941      	add	r1, sp, #260	@ 0x104
 8007874:	f000 f87a 	bl	800796c <_scanf_i>
 8007878:	e7b4      	b.n	80077e4 <__ssvfiscanf_r+0x210>
 800787a:	4b09      	ldr	r3, [pc, #36]	@ (80078a0 <__ssvfiscanf_r+0x2cc>)
 800787c:	2b00      	cmp	r3, #0
 800787e:	f43f aecd 	beq.w	800761c <__ssvfiscanf_r+0x48>
 8007882:	466b      	mov	r3, sp
 8007884:	4622      	mov	r2, r4
 8007886:	4630      	mov	r0, r6
 8007888:	a941      	add	r1, sp, #260	@ 0x104
 800788a:	f3af 8000 	nop.w
 800788e:	e7a9      	b.n	80077e4 <__ssvfiscanf_r+0x210>
 8007890:	08007525 	.word	0x08007525
 8007894:	0800759b 	.word	0x0800759b
 8007898:	080089b3 	.word	0x080089b3
 800789c:	08008946 	.word	0x08008946
 80078a0:	00000000 	.word	0x00000000
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	065b      	lsls	r3, r3, #25
 80078a8:	f53f af70 	bmi.w	800778c <__ssvfiscanf_r+0x1b8>
 80078ac:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80078b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80078b6:	e7f9      	b.n	80078ac <__ssvfiscanf_r+0x2d8>

080078b8 <_scanf_chars>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4615      	mov	r5, r2
 80078be:	688a      	ldr	r2, [r1, #8]
 80078c0:	4680      	mov	r8, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	b932      	cbnz	r2, 80078d4 <_scanf_chars+0x1c>
 80078c6:	698a      	ldr	r2, [r1, #24]
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	bf14      	ite	ne
 80078cc:	f04f 32ff 	movne.w	r2, #4294967295
 80078d0:	2201      	moveq	r2, #1
 80078d2:	608a      	str	r2, [r1, #8]
 80078d4:	2700      	movs	r7, #0
 80078d6:	6822      	ldr	r2, [r4, #0]
 80078d8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8007968 <_scanf_chars+0xb0>
 80078dc:	06d1      	lsls	r1, r2, #27
 80078de:	bf5f      	itttt	pl
 80078e0:	681a      	ldrpl	r2, [r3, #0]
 80078e2:	1d11      	addpl	r1, r2, #4
 80078e4:	6019      	strpl	r1, [r3, #0]
 80078e6:	6816      	ldrpl	r6, [r2, #0]
 80078e8:	69a0      	ldr	r0, [r4, #24]
 80078ea:	b188      	cbz	r0, 8007910 <_scanf_chars+0x58>
 80078ec:	2801      	cmp	r0, #1
 80078ee:	d107      	bne.n	8007900 <_scanf_chars+0x48>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	781a      	ldrb	r2, [r3, #0]
 80078f4:	6963      	ldr	r3, [r4, #20]
 80078f6:	5c9b      	ldrb	r3, [r3, r2]
 80078f8:	b953      	cbnz	r3, 8007910 <_scanf_chars+0x58>
 80078fa:	2f00      	cmp	r7, #0
 80078fc:	d031      	beq.n	8007962 <_scanf_chars+0xaa>
 80078fe:	e022      	b.n	8007946 <_scanf_chars+0x8e>
 8007900:	2802      	cmp	r0, #2
 8007902:	d120      	bne.n	8007946 <_scanf_chars+0x8e>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f819 3003 	ldrb.w	r3, [r9, r3]
 800790c:	071b      	lsls	r3, r3, #28
 800790e:	d41a      	bmi.n	8007946 <_scanf_chars+0x8e>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	3701      	adds	r7, #1
 8007914:	06da      	lsls	r2, r3, #27
 8007916:	bf5e      	ittt	pl
 8007918:	682b      	ldrpl	r3, [r5, #0]
 800791a:	781b      	ldrbpl	r3, [r3, #0]
 800791c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007920:	682a      	ldr	r2, [r5, #0]
 8007922:	686b      	ldr	r3, [r5, #4]
 8007924:	3201      	adds	r2, #1
 8007926:	602a      	str	r2, [r5, #0]
 8007928:	68a2      	ldr	r2, [r4, #8]
 800792a:	3b01      	subs	r3, #1
 800792c:	3a01      	subs	r2, #1
 800792e:	606b      	str	r3, [r5, #4]
 8007930:	60a2      	str	r2, [r4, #8]
 8007932:	b142      	cbz	r2, 8007946 <_scanf_chars+0x8e>
 8007934:	2b00      	cmp	r3, #0
 8007936:	dcd7      	bgt.n	80078e8 <_scanf_chars+0x30>
 8007938:	4629      	mov	r1, r5
 800793a:	4640      	mov	r0, r8
 800793c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007940:	4798      	blx	r3
 8007942:	2800      	cmp	r0, #0
 8007944:	d0d0      	beq.n	80078e8 <_scanf_chars+0x30>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	f013 0310 	ands.w	r3, r3, #16
 800794c:	d105      	bne.n	800795a <_scanf_chars+0xa2>
 800794e:	68e2      	ldr	r2, [r4, #12]
 8007950:	3201      	adds	r2, #1
 8007952:	60e2      	str	r2, [r4, #12]
 8007954:	69a2      	ldr	r2, [r4, #24]
 8007956:	b102      	cbz	r2, 800795a <_scanf_chars+0xa2>
 8007958:	7033      	strb	r3, [r6, #0]
 800795a:	2000      	movs	r0, #0
 800795c:	6923      	ldr	r3, [r4, #16]
 800795e:	443b      	add	r3, r7
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007966:	bf00      	nop
 8007968:	080089b3 	.word	0x080089b3

0800796c <_scanf_i>:
 800796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	460c      	mov	r4, r1
 8007972:	4698      	mov	r8, r3
 8007974:	4b72      	ldr	r3, [pc, #456]	@ (8007b40 <_scanf_i+0x1d4>)
 8007976:	b087      	sub	sp, #28
 8007978:	4682      	mov	sl, r0
 800797a:	4616      	mov	r6, r2
 800797c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007980:	ab03      	add	r3, sp, #12
 8007982:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007986:	4b6f      	ldr	r3, [pc, #444]	@ (8007b44 <_scanf_i+0x1d8>)
 8007988:	69a1      	ldr	r1, [r4, #24]
 800798a:	4a6f      	ldr	r2, [pc, #444]	@ (8007b48 <_scanf_i+0x1dc>)
 800798c:	4627      	mov	r7, r4
 800798e:	2903      	cmp	r1, #3
 8007990:	bf08      	it	eq
 8007992:	461a      	moveq	r2, r3
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	9201      	str	r2, [sp, #4]
 8007998:	1e5a      	subs	r2, r3, #1
 800799a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800799e:	bf81      	itttt	hi
 80079a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80079a4:	eb03 0905 	addhi.w	r9, r3, r5
 80079a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80079ac:	60a3      	strhi	r3, [r4, #8]
 80079ae:	f857 3b1c 	ldr.w	r3, [r7], #28
 80079b2:	bf98      	it	ls
 80079b4:	f04f 0900 	movls.w	r9, #0
 80079b8:	463d      	mov	r5, r7
 80079ba:	f04f 0b00 	mov.w	fp, #0
 80079be:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80079c2:	6023      	str	r3, [r4, #0]
 80079c4:	6831      	ldr	r1, [r6, #0]
 80079c6:	ab03      	add	r3, sp, #12
 80079c8:	2202      	movs	r2, #2
 80079ca:	7809      	ldrb	r1, [r1, #0]
 80079cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80079d0:	f7fe f973 	bl	8005cba <memchr>
 80079d4:	b328      	cbz	r0, 8007a22 <_scanf_i+0xb6>
 80079d6:	f1bb 0f01 	cmp.w	fp, #1
 80079da:	d159      	bne.n	8007a90 <_scanf_i+0x124>
 80079dc:	6862      	ldr	r2, [r4, #4]
 80079de:	b92a      	cbnz	r2, 80079ec <_scanf_i+0x80>
 80079e0:	2108      	movs	r1, #8
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	6061      	str	r1, [r4, #4]
 80079e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079ea:	6022      	str	r2, [r4, #0]
 80079ec:	6822      	ldr	r2, [r4, #0]
 80079ee:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80079f2:	6022      	str	r2, [r4, #0]
 80079f4:	68a2      	ldr	r2, [r4, #8]
 80079f6:	1e51      	subs	r1, r2, #1
 80079f8:	60a1      	str	r1, [r4, #8]
 80079fa:	b192      	cbz	r2, 8007a22 <_scanf_i+0xb6>
 80079fc:	6832      	ldr	r2, [r6, #0]
 80079fe:	1c51      	adds	r1, r2, #1
 8007a00:	6031      	str	r1, [r6, #0]
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	f805 2b01 	strb.w	r2, [r5], #1
 8007a08:	6872      	ldr	r2, [r6, #4]
 8007a0a:	3a01      	subs	r2, #1
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	6072      	str	r2, [r6, #4]
 8007a10:	dc07      	bgt.n	8007a22 <_scanf_i+0xb6>
 8007a12:	4631      	mov	r1, r6
 8007a14:	4650      	mov	r0, sl
 8007a16:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007a1a:	4790      	blx	r2
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f040 8085 	bne.w	8007b2c <_scanf_i+0x1c0>
 8007a22:	f10b 0b01 	add.w	fp, fp, #1
 8007a26:	f1bb 0f03 	cmp.w	fp, #3
 8007a2a:	d1cb      	bne.n	80079c4 <_scanf_i+0x58>
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	b90b      	cbnz	r3, 8007a34 <_scanf_i+0xc8>
 8007a30:	230a      	movs	r3, #10
 8007a32:	6063      	str	r3, [r4, #4]
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	4945      	ldr	r1, [pc, #276]	@ (8007b4c <_scanf_i+0x1e0>)
 8007a38:	6960      	ldr	r0, [r4, #20]
 8007a3a:	1ac9      	subs	r1, r1, r3
 8007a3c:	f000 f930 	bl	8007ca0 <__sccl>
 8007a40:	f04f 0b00 	mov.w	fp, #0
 8007a44:	68a3      	ldr	r3, [r4, #8]
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d03d      	beq.n	8007ac8 <_scanf_i+0x15c>
 8007a4c:	6831      	ldr	r1, [r6, #0]
 8007a4e:	6960      	ldr	r0, [r4, #20]
 8007a50:	f891 c000 	ldrb.w	ip, [r1]
 8007a54:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d035      	beq.n	8007ac8 <_scanf_i+0x15c>
 8007a5c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007a60:	d124      	bne.n	8007aac <_scanf_i+0x140>
 8007a62:	0510      	lsls	r0, r2, #20
 8007a64:	d522      	bpl.n	8007aac <_scanf_i+0x140>
 8007a66:	f10b 0b01 	add.w	fp, fp, #1
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	d003      	beq.n	8007a78 <_scanf_i+0x10c>
 8007a70:	3301      	adds	r3, #1
 8007a72:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a76:	60a3      	str	r3, [r4, #8]
 8007a78:	6873      	ldr	r3, [r6, #4]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	6073      	str	r3, [r6, #4]
 8007a80:	dd1b      	ble.n	8007aba <_scanf_i+0x14e>
 8007a82:	6833      	ldr	r3, [r6, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	6033      	str	r3, [r6, #0]
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	e7d9      	b.n	8007a44 <_scanf_i+0xd8>
 8007a90:	f1bb 0f02 	cmp.w	fp, #2
 8007a94:	d1ae      	bne.n	80079f4 <_scanf_i+0x88>
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007a9c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007aa0:	d1bf      	bne.n	8007a22 <_scanf_i+0xb6>
 8007aa2:	2110      	movs	r1, #16
 8007aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007aa8:	6061      	str	r1, [r4, #4]
 8007aaa:	e7a2      	b.n	80079f2 <_scanf_i+0x86>
 8007aac:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	780b      	ldrb	r3, [r1, #0]
 8007ab4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ab8:	e7de      	b.n	8007a78 <_scanf_i+0x10c>
 8007aba:	4631      	mov	r1, r6
 8007abc:	4650      	mov	r0, sl
 8007abe:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ac2:	4798      	blx	r3
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d0df      	beq.n	8007a88 <_scanf_i+0x11c>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	05d9      	lsls	r1, r3, #23
 8007acc:	d50d      	bpl.n	8007aea <_scanf_i+0x17e>
 8007ace:	42bd      	cmp	r5, r7
 8007ad0:	d909      	bls.n	8007ae6 <_scanf_i+0x17a>
 8007ad2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007ad6:	4632      	mov	r2, r6
 8007ad8:	4650      	mov	r0, sl
 8007ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ade:	f105 39ff 	add.w	r9, r5, #4294967295
 8007ae2:	4798      	blx	r3
 8007ae4:	464d      	mov	r5, r9
 8007ae6:	42bd      	cmp	r5, r7
 8007ae8:	d028      	beq.n	8007b3c <_scanf_i+0x1d0>
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	f012 0210 	ands.w	r2, r2, #16
 8007af0:	d113      	bne.n	8007b1a <_scanf_i+0x1ae>
 8007af2:	702a      	strb	r2, [r5, #0]
 8007af4:	4639      	mov	r1, r7
 8007af6:	6863      	ldr	r3, [r4, #4]
 8007af8:	4650      	mov	r0, sl
 8007afa:	9e01      	ldr	r6, [sp, #4]
 8007afc:	47b0      	blx	r6
 8007afe:	f8d8 3000 	ldr.w	r3, [r8]
 8007b02:	6821      	ldr	r1, [r4, #0]
 8007b04:	1d1a      	adds	r2, r3, #4
 8007b06:	f8c8 2000 	str.w	r2, [r8]
 8007b0a:	f011 0f20 	tst.w	r1, #32
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	d00f      	beq.n	8007b32 <_scanf_i+0x1c6>
 8007b12:	6018      	str	r0, [r3, #0]
 8007b14:	68e3      	ldr	r3, [r4, #12]
 8007b16:	3301      	adds	r3, #1
 8007b18:	60e3      	str	r3, [r4, #12]
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	1bed      	subs	r5, r5, r7
 8007b20:	445d      	add	r5, fp
 8007b22:	442b      	add	r3, r5
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	b007      	add	sp, #28
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	f04f 0b00 	mov.w	fp, #0
 8007b30:	e7ca      	b.n	8007ac8 <_scanf_i+0x15c>
 8007b32:	07ca      	lsls	r2, r1, #31
 8007b34:	bf4c      	ite	mi
 8007b36:	8018      	strhmi	r0, [r3, #0]
 8007b38:	6018      	strpl	r0, [r3, #0]
 8007b3a:	e7eb      	b.n	8007b14 <_scanf_i+0x1a8>
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	e7f2      	b.n	8007b26 <_scanf_i+0x1ba>
 8007b40:	080086f4 	.word	0x080086f4
 8007b44:	08007fcd 	.word	0x08007fcd
 8007b48:	080080ad 	.word	0x080080ad
 8007b4c:	08008961 	.word	0x08008961

08007b50 <__sflush_r>:
 8007b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	0716      	lsls	r6, r2, #28
 8007b58:	4605      	mov	r5, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	d454      	bmi.n	8007c08 <__sflush_r+0xb8>
 8007b5e:	684b      	ldr	r3, [r1, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dc02      	bgt.n	8007b6a <__sflush_r+0x1a>
 8007b64:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd48      	ble.n	8007bfc <__sflush_r+0xac>
 8007b6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b6c:	2e00      	cmp	r6, #0
 8007b6e:	d045      	beq.n	8007bfc <__sflush_r+0xac>
 8007b70:	2300      	movs	r3, #0
 8007b72:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b76:	682f      	ldr	r7, [r5, #0]
 8007b78:	6a21      	ldr	r1, [r4, #32]
 8007b7a:	602b      	str	r3, [r5, #0]
 8007b7c:	d030      	beq.n	8007be0 <__sflush_r+0x90>
 8007b7e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	0759      	lsls	r1, r3, #29
 8007b84:	d505      	bpl.n	8007b92 <__sflush_r+0x42>
 8007b86:	6863      	ldr	r3, [r4, #4]
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b8c:	b10b      	cbz	r3, 8007b92 <__sflush_r+0x42>
 8007b8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b90:	1ad2      	subs	r2, r2, r3
 8007b92:	2300      	movs	r3, #0
 8007b94:	4628      	mov	r0, r5
 8007b96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b98:	6a21      	ldr	r1, [r4, #32]
 8007b9a:	47b0      	blx	r6
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	d106      	bne.n	8007bb0 <__sflush_r+0x60>
 8007ba2:	6829      	ldr	r1, [r5, #0]
 8007ba4:	291d      	cmp	r1, #29
 8007ba6:	d82b      	bhi.n	8007c00 <__sflush_r+0xb0>
 8007ba8:	4a28      	ldr	r2, [pc, #160]	@ (8007c4c <__sflush_r+0xfc>)
 8007baa:	410a      	asrs	r2, r1
 8007bac:	07d6      	lsls	r6, r2, #31
 8007bae:	d427      	bmi.n	8007c00 <__sflush_r+0xb0>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	6062      	str	r2, [r4, #4]
 8007bb4:	6922      	ldr	r2, [r4, #16]
 8007bb6:	04d9      	lsls	r1, r3, #19
 8007bb8:	6022      	str	r2, [r4, #0]
 8007bba:	d504      	bpl.n	8007bc6 <__sflush_r+0x76>
 8007bbc:	1c42      	adds	r2, r0, #1
 8007bbe:	d101      	bne.n	8007bc4 <__sflush_r+0x74>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b903      	cbnz	r3, 8007bc6 <__sflush_r+0x76>
 8007bc4:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bc8:	602f      	str	r7, [r5, #0]
 8007bca:	b1b9      	cbz	r1, 8007bfc <__sflush_r+0xac>
 8007bcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bd0:	4299      	cmp	r1, r3
 8007bd2:	d002      	beq.n	8007bda <__sflush_r+0x8a>
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f7fe fecf 	bl	8006978 <_free_r>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bde:	e00d      	b.n	8007bfc <__sflush_r+0xac>
 8007be0:	2301      	movs	r3, #1
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b0      	blx	r6
 8007be6:	4602      	mov	r2, r0
 8007be8:	1c50      	adds	r0, r2, #1
 8007bea:	d1c9      	bne.n	8007b80 <__sflush_r+0x30>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0c6      	beq.n	8007b80 <__sflush_r+0x30>
 8007bf2:	2b1d      	cmp	r3, #29
 8007bf4:	d001      	beq.n	8007bfa <__sflush_r+0xaa>
 8007bf6:	2b16      	cmp	r3, #22
 8007bf8:	d11d      	bne.n	8007c36 <__sflush_r+0xe6>
 8007bfa:	602f      	str	r7, [r5, #0]
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	e021      	b.n	8007c44 <__sflush_r+0xf4>
 8007c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c04:	b21b      	sxth	r3, r3
 8007c06:	e01a      	b.n	8007c3e <__sflush_r+0xee>
 8007c08:	690f      	ldr	r7, [r1, #16]
 8007c0a:	2f00      	cmp	r7, #0
 8007c0c:	d0f6      	beq.n	8007bfc <__sflush_r+0xac>
 8007c0e:	0793      	lsls	r3, r2, #30
 8007c10:	bf18      	it	ne
 8007c12:	2300      	movne	r3, #0
 8007c14:	680e      	ldr	r6, [r1, #0]
 8007c16:	bf08      	it	eq
 8007c18:	694b      	ldreq	r3, [r1, #20]
 8007c1a:	1bf6      	subs	r6, r6, r7
 8007c1c:	600f      	str	r7, [r1, #0]
 8007c1e:	608b      	str	r3, [r1, #8]
 8007c20:	2e00      	cmp	r6, #0
 8007c22:	ddeb      	ble.n	8007bfc <__sflush_r+0xac>
 8007c24:	4633      	mov	r3, r6
 8007c26:	463a      	mov	r2, r7
 8007c28:	4628      	mov	r0, r5
 8007c2a:	6a21      	ldr	r1, [r4, #32]
 8007c2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c30:	47e0      	blx	ip
 8007c32:	2800      	cmp	r0, #0
 8007c34:	dc07      	bgt.n	8007c46 <__sflush_r+0xf6>
 8007c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c42:	81a3      	strh	r3, [r4, #12]
 8007c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c46:	4407      	add	r7, r0
 8007c48:	1a36      	subs	r6, r6, r0
 8007c4a:	e7e9      	b.n	8007c20 <__sflush_r+0xd0>
 8007c4c:	dfbffffe 	.word	0xdfbffffe

08007c50 <_fflush_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	690b      	ldr	r3, [r1, #16]
 8007c54:	4605      	mov	r5, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	b913      	cbnz	r3, 8007c60 <_fflush_r+0x10>
 8007c5a:	2500      	movs	r5, #0
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	b118      	cbz	r0, 8007c6a <_fflush_r+0x1a>
 8007c62:	6a03      	ldr	r3, [r0, #32]
 8007c64:	b90b      	cbnz	r3, 8007c6a <_fflush_r+0x1a>
 8007c66:	f7fd feaf 	bl	80059c8 <__sinit>
 8007c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f3      	beq.n	8007c5a <_fflush_r+0xa>
 8007c72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c74:	07d0      	lsls	r0, r2, #31
 8007c76:	d404      	bmi.n	8007c82 <_fflush_r+0x32>
 8007c78:	0599      	lsls	r1, r3, #22
 8007c7a:	d402      	bmi.n	8007c82 <_fflush_r+0x32>
 8007c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c7e:	f7fe f81a 	bl	8005cb6 <__retarget_lock_acquire_recursive>
 8007c82:	4628      	mov	r0, r5
 8007c84:	4621      	mov	r1, r4
 8007c86:	f7ff ff63 	bl	8007b50 <__sflush_r>
 8007c8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	07da      	lsls	r2, r3, #31
 8007c90:	d4e4      	bmi.n	8007c5c <_fflush_r+0xc>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	059b      	lsls	r3, r3, #22
 8007c96:	d4e1      	bmi.n	8007c5c <_fflush_r+0xc>
 8007c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c9a:	f7fe f80d 	bl	8005cb8 <__retarget_lock_release_recursive>
 8007c9e:	e7dd      	b.n	8007c5c <_fflush_r+0xc>

08007ca0 <__sccl>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	780b      	ldrb	r3, [r1, #0]
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	2b5e      	cmp	r3, #94	@ 0x5e
 8007ca8:	bf0b      	itete	eq
 8007caa:	784b      	ldrbeq	r3, [r1, #1]
 8007cac:	1c4a      	addne	r2, r1, #1
 8007cae:	1c8a      	addeq	r2, r1, #2
 8007cb0:	2100      	movne	r1, #0
 8007cb2:	bf08      	it	eq
 8007cb4:	2101      	moveq	r1, #1
 8007cb6:	3801      	subs	r0, #1
 8007cb8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007cbc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007cc0:	42a8      	cmp	r0, r5
 8007cc2:	d1fb      	bne.n	8007cbc <__sccl+0x1c>
 8007cc4:	b90b      	cbnz	r3, 8007cca <__sccl+0x2a>
 8007cc6:	1e50      	subs	r0, r2, #1
 8007cc8:	bd70      	pop	{r4, r5, r6, pc}
 8007cca:	f081 0101 	eor.w	r1, r1, #1
 8007cce:	4610      	mov	r0, r2
 8007cd0:	54e1      	strb	r1, [r4, r3]
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007cd8:	2d2d      	cmp	r5, #45	@ 0x2d
 8007cda:	d005      	beq.n	8007ce8 <__sccl+0x48>
 8007cdc:	2d5d      	cmp	r5, #93	@ 0x5d
 8007cde:	d016      	beq.n	8007d0e <__sccl+0x6e>
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	d0f1      	beq.n	8007cc8 <__sccl+0x28>
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	e7f2      	b.n	8007cce <__sccl+0x2e>
 8007ce8:	7846      	ldrb	r6, [r0, #1]
 8007cea:	2e5d      	cmp	r6, #93	@ 0x5d
 8007cec:	d0fa      	beq.n	8007ce4 <__sccl+0x44>
 8007cee:	42b3      	cmp	r3, r6
 8007cf0:	dcf8      	bgt.n	8007ce4 <__sccl+0x44>
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	3002      	adds	r0, #2
 8007cf6:	3201      	adds	r2, #1
 8007cf8:	4296      	cmp	r6, r2
 8007cfa:	54a1      	strb	r1, [r4, r2]
 8007cfc:	dcfb      	bgt.n	8007cf6 <__sccl+0x56>
 8007cfe:	1af2      	subs	r2, r6, r3
 8007d00:	3a01      	subs	r2, #1
 8007d02:	42b3      	cmp	r3, r6
 8007d04:	bfa8      	it	ge
 8007d06:	2200      	movge	r2, #0
 8007d08:	1c5d      	adds	r5, r3, #1
 8007d0a:	18ab      	adds	r3, r5, r2
 8007d0c:	e7e1      	b.n	8007cd2 <__sccl+0x32>
 8007d0e:	4610      	mov	r0, r2
 8007d10:	e7da      	b.n	8007cc8 <__sccl+0x28>

08007d12 <__submore>:
 8007d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d16:	460c      	mov	r4, r1
 8007d18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007d1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d1e:	4299      	cmp	r1, r3
 8007d20:	d11b      	bne.n	8007d5a <__submore+0x48>
 8007d22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d26:	f7fe fe99 	bl	8006a5c <_malloc_r>
 8007d2a:	b918      	cbnz	r0, 8007d34 <__submore+0x22>
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d38:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007d3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007d3e:	6360      	str	r0, [r4, #52]	@ 0x34
 8007d40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007d44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d48:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007d4c:	7043      	strb	r3, [r0, #1]
 8007d4e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d52:	7003      	strb	r3, [r0, #0]
 8007d54:	6020      	str	r0, [r4, #0]
 8007d56:	2000      	movs	r0, #0
 8007d58:	e7ea      	b.n	8007d30 <__submore+0x1e>
 8007d5a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007d5c:	0077      	lsls	r7, r6, #1
 8007d5e:	463a      	mov	r2, r7
 8007d60:	f000 f88c 	bl	8007e7c <_realloc_r>
 8007d64:	4605      	mov	r5, r0
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d0e0      	beq.n	8007d2c <__submore+0x1a>
 8007d6a:	eb00 0806 	add.w	r8, r0, r6
 8007d6e:	4601      	mov	r1, r0
 8007d70:	4632      	mov	r2, r6
 8007d72:	4640      	mov	r0, r8
 8007d74:	f000 f830 	bl	8007dd8 <memcpy>
 8007d78:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007d7c:	f8c4 8000 	str.w	r8, [r4]
 8007d80:	e7e9      	b.n	8007d56 <__submore+0x44>

08007d82 <memmove>:
 8007d82:	4288      	cmp	r0, r1
 8007d84:	b510      	push	{r4, lr}
 8007d86:	eb01 0402 	add.w	r4, r1, r2
 8007d8a:	d902      	bls.n	8007d92 <memmove+0x10>
 8007d8c:	4284      	cmp	r4, r0
 8007d8e:	4623      	mov	r3, r4
 8007d90:	d807      	bhi.n	8007da2 <memmove+0x20>
 8007d92:	1e43      	subs	r3, r0, #1
 8007d94:	42a1      	cmp	r1, r4
 8007d96:	d008      	beq.n	8007daa <memmove+0x28>
 8007d98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007da0:	e7f8      	b.n	8007d94 <memmove+0x12>
 8007da2:	4601      	mov	r1, r0
 8007da4:	4402      	add	r2, r0
 8007da6:	428a      	cmp	r2, r1
 8007da8:	d100      	bne.n	8007dac <memmove+0x2a>
 8007daa:	bd10      	pop	{r4, pc}
 8007dac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007db0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007db4:	e7f7      	b.n	8007da6 <memmove+0x24>
	...

08007db8 <_sbrk_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4d05      	ldr	r5, [pc, #20]	@ (8007dd4 <_sbrk_r+0x1c>)
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7fa fa44 	bl	8002250 <_sbrk>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_sbrk_r+0x1a>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_sbrk_r+0x1a>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	20000548 	.word	0x20000548

08007dd8 <memcpy>:
 8007dd8:	440a      	add	r2, r1
 8007dda:	4291      	cmp	r1, r2
 8007ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007de0:	d100      	bne.n	8007de4 <memcpy+0xc>
 8007de2:	4770      	bx	lr
 8007de4:	b510      	push	{r4, lr}
 8007de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dea:	4291      	cmp	r1, r2
 8007dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007df0:	d1f9      	bne.n	8007de6 <memcpy+0xe>
 8007df2:	bd10      	pop	{r4, pc}

08007df4 <__assert_func>:
 8007df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007df6:	4614      	mov	r4, r2
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4b09      	ldr	r3, [pc, #36]	@ (8007e20 <__assert_func+0x2c>)
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68d8      	ldr	r0, [r3, #12]
 8007e02:	b954      	cbnz	r4, 8007e1a <__assert_func+0x26>
 8007e04:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <__assert_func+0x30>)
 8007e06:	461c      	mov	r4, r3
 8007e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e0c:	9100      	str	r1, [sp, #0]
 8007e0e:	462b      	mov	r3, r5
 8007e10:	4905      	ldr	r1, [pc, #20]	@ (8007e28 <__assert_func+0x34>)
 8007e12:	f000 f95b 	bl	80080cc <fiprintf>
 8007e16:	f000 f96b 	bl	80080f0 <abort>
 8007e1a:	4b04      	ldr	r3, [pc, #16]	@ (8007e2c <__assert_func+0x38>)
 8007e1c:	e7f4      	b.n	8007e08 <__assert_func+0x14>
 8007e1e:	bf00      	nop
 8007e20:	200000bc 	.word	0x200000bc
 8007e24:	080089b1 	.word	0x080089b1
 8007e28:	08008983 	.word	0x08008983
 8007e2c:	08008976 	.word	0x08008976

08007e30 <_calloc_r>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	fba1 5402 	umull	r5, r4, r1, r2
 8007e36:	b93c      	cbnz	r4, 8007e48 <_calloc_r+0x18>
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7fe fe0f 	bl	8006a5c <_malloc_r>
 8007e3e:	4606      	mov	r6, r0
 8007e40:	b928      	cbnz	r0, 8007e4e <_calloc_r+0x1e>
 8007e42:	2600      	movs	r6, #0
 8007e44:	4630      	mov	r0, r6
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	220c      	movs	r2, #12
 8007e4a:	6002      	str	r2, [r0, #0]
 8007e4c:	e7f9      	b.n	8007e42 <_calloc_r+0x12>
 8007e4e:	462a      	mov	r2, r5
 8007e50:	4621      	mov	r1, r4
 8007e52:	f7fd feb2 	bl	8005bba <memset>
 8007e56:	e7f5      	b.n	8007e44 <_calloc_r+0x14>

08007e58 <__ascii_mbtowc>:
 8007e58:	b082      	sub	sp, #8
 8007e5a:	b901      	cbnz	r1, 8007e5e <__ascii_mbtowc+0x6>
 8007e5c:	a901      	add	r1, sp, #4
 8007e5e:	b142      	cbz	r2, 8007e72 <__ascii_mbtowc+0x1a>
 8007e60:	b14b      	cbz	r3, 8007e76 <__ascii_mbtowc+0x1e>
 8007e62:	7813      	ldrb	r3, [r2, #0]
 8007e64:	600b      	str	r3, [r1, #0]
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	1e10      	subs	r0, r2, #0
 8007e6a:	bf18      	it	ne
 8007e6c:	2001      	movne	r0, #1
 8007e6e:	b002      	add	sp, #8
 8007e70:	4770      	bx	lr
 8007e72:	4610      	mov	r0, r2
 8007e74:	e7fb      	b.n	8007e6e <__ascii_mbtowc+0x16>
 8007e76:	f06f 0001 	mvn.w	r0, #1
 8007e7a:	e7f8      	b.n	8007e6e <__ascii_mbtowc+0x16>

08007e7c <_realloc_r>:
 8007e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e80:	4680      	mov	r8, r0
 8007e82:	4615      	mov	r5, r2
 8007e84:	460c      	mov	r4, r1
 8007e86:	b921      	cbnz	r1, 8007e92 <_realloc_r+0x16>
 8007e88:	4611      	mov	r1, r2
 8007e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8e:	f7fe bde5 	b.w	8006a5c <_malloc_r>
 8007e92:	b92a      	cbnz	r2, 8007ea0 <_realloc_r+0x24>
 8007e94:	f7fe fd70 	bl	8006978 <_free_r>
 8007e98:	2400      	movs	r4, #0
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea0:	f000 f92d 	bl	80080fe <_malloc_usable_size_r>
 8007ea4:	4285      	cmp	r5, r0
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	d802      	bhi.n	8007eb0 <_realloc_r+0x34>
 8007eaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007eae:	d8f4      	bhi.n	8007e9a <_realloc_r+0x1e>
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	f7fe fdd2 	bl	8006a5c <_malloc_r>
 8007eb8:	4607      	mov	r7, r0
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d0ec      	beq.n	8007e98 <_realloc_r+0x1c>
 8007ebe:	42b5      	cmp	r5, r6
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	bf28      	it	cs
 8007ec6:	4632      	movcs	r2, r6
 8007ec8:	f7ff ff86 	bl	8007dd8 <memcpy>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4640      	mov	r0, r8
 8007ed0:	f7fe fd52 	bl	8006978 <_free_r>
 8007ed4:	463c      	mov	r4, r7
 8007ed6:	e7e0      	b.n	8007e9a <_realloc_r+0x1e>

08007ed8 <_strtol_l.constprop.0>:
 8007ed8:	2b24      	cmp	r3, #36	@ 0x24
 8007eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ede:	4686      	mov	lr, r0
 8007ee0:	4690      	mov	r8, r2
 8007ee2:	d801      	bhi.n	8007ee8 <_strtol_l.constprop.0+0x10>
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d106      	bne.n	8007ef6 <_strtol_l.constprop.0+0x1e>
 8007ee8:	f7fd feba 	bl	8005c60 <__errno>
 8007eec:	2316      	movs	r3, #22
 8007eee:	6003      	str	r3, [r0, #0]
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	4833      	ldr	r0, [pc, #204]	@ (8007fc8 <_strtol_l.constprop.0+0xf0>)
 8007efa:	462a      	mov	r2, r5
 8007efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f00:	5d06      	ldrb	r6, [r0, r4]
 8007f02:	f016 0608 	ands.w	r6, r6, #8
 8007f06:	d1f8      	bne.n	8007efa <_strtol_l.constprop.0+0x22>
 8007f08:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f0a:	d12d      	bne.n	8007f68 <_strtol_l.constprop.0+0x90>
 8007f0c:	2601      	movs	r6, #1
 8007f0e:	782c      	ldrb	r4, [r5, #0]
 8007f10:	1c95      	adds	r5, r2, #2
 8007f12:	f033 0210 	bics.w	r2, r3, #16
 8007f16:	d109      	bne.n	8007f2c <_strtol_l.constprop.0+0x54>
 8007f18:	2c30      	cmp	r4, #48	@ 0x30
 8007f1a:	d12a      	bne.n	8007f72 <_strtol_l.constprop.0+0x9a>
 8007f1c:	782a      	ldrb	r2, [r5, #0]
 8007f1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f22:	2a58      	cmp	r2, #88	@ 0x58
 8007f24:	d125      	bne.n	8007f72 <_strtol_l.constprop.0+0x9a>
 8007f26:	2310      	movs	r3, #16
 8007f28:	786c      	ldrb	r4, [r5, #1]
 8007f2a:	3502      	adds	r5, #2
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f36:	fbbc f9f3 	udiv	r9, ip, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f44:	2f09      	cmp	r7, #9
 8007f46:	d81b      	bhi.n	8007f80 <_strtol_l.constprop.0+0xa8>
 8007f48:	463c      	mov	r4, r7
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	dd27      	ble.n	8007f9e <_strtol_l.constprop.0+0xc6>
 8007f4e:	1c57      	adds	r7, r2, #1
 8007f50:	d007      	beq.n	8007f62 <_strtol_l.constprop.0+0x8a>
 8007f52:	4581      	cmp	r9, r0
 8007f54:	d320      	bcc.n	8007f98 <_strtol_l.constprop.0+0xc0>
 8007f56:	d101      	bne.n	8007f5c <_strtol_l.constprop.0+0x84>
 8007f58:	45a2      	cmp	sl, r4
 8007f5a:	db1d      	blt.n	8007f98 <_strtol_l.constprop.0+0xc0>
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	fb00 4003 	mla	r0, r0, r3, r4
 8007f62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f66:	e7eb      	b.n	8007f40 <_strtol_l.constprop.0+0x68>
 8007f68:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f6a:	bf04      	itt	eq
 8007f6c:	782c      	ldrbeq	r4, [r5, #0]
 8007f6e:	1c95      	addeq	r5, r2, #2
 8007f70:	e7cf      	b.n	8007f12 <_strtol_l.constprop.0+0x3a>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1da      	bne.n	8007f2c <_strtol_l.constprop.0+0x54>
 8007f76:	2c30      	cmp	r4, #48	@ 0x30
 8007f78:	bf0c      	ite	eq
 8007f7a:	2308      	moveq	r3, #8
 8007f7c:	230a      	movne	r3, #10
 8007f7e:	e7d5      	b.n	8007f2c <_strtol_l.constprop.0+0x54>
 8007f80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f84:	2f19      	cmp	r7, #25
 8007f86:	d801      	bhi.n	8007f8c <_strtol_l.constprop.0+0xb4>
 8007f88:	3c37      	subs	r4, #55	@ 0x37
 8007f8a:	e7de      	b.n	8007f4a <_strtol_l.constprop.0+0x72>
 8007f8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f90:	2f19      	cmp	r7, #25
 8007f92:	d804      	bhi.n	8007f9e <_strtol_l.constprop.0+0xc6>
 8007f94:	3c57      	subs	r4, #87	@ 0x57
 8007f96:	e7d8      	b.n	8007f4a <_strtol_l.constprop.0+0x72>
 8007f98:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9c:	e7e1      	b.n	8007f62 <_strtol_l.constprop.0+0x8a>
 8007f9e:	1c53      	adds	r3, r2, #1
 8007fa0:	d108      	bne.n	8007fb4 <_strtol_l.constprop.0+0xdc>
 8007fa2:	2322      	movs	r3, #34	@ 0x22
 8007fa4:	4660      	mov	r0, ip
 8007fa6:	f8ce 3000 	str.w	r3, [lr]
 8007faa:	f1b8 0f00 	cmp.w	r8, #0
 8007fae:	d0a0      	beq.n	8007ef2 <_strtol_l.constprop.0+0x1a>
 8007fb0:	1e69      	subs	r1, r5, #1
 8007fb2:	e006      	b.n	8007fc2 <_strtol_l.constprop.0+0xea>
 8007fb4:	b106      	cbz	r6, 8007fb8 <_strtol_l.constprop.0+0xe0>
 8007fb6:	4240      	negs	r0, r0
 8007fb8:	f1b8 0f00 	cmp.w	r8, #0
 8007fbc:	d099      	beq.n	8007ef2 <_strtol_l.constprop.0+0x1a>
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	d1f6      	bne.n	8007fb0 <_strtol_l.constprop.0+0xd8>
 8007fc2:	f8c8 1000 	str.w	r1, [r8]
 8007fc6:	e794      	b.n	8007ef2 <_strtol_l.constprop.0+0x1a>
 8007fc8:	080089b3 	.word	0x080089b3

08007fcc <_strtol_r>:
 8007fcc:	f7ff bf84 	b.w	8007ed8 <_strtol_l.constprop.0>

08007fd0 <_strtoul_l.constprop.0>:
 8007fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fd4:	4686      	mov	lr, r0
 8007fd6:	460d      	mov	r5, r1
 8007fd8:	4e33      	ldr	r6, [pc, #204]	@ (80080a8 <_strtoul_l.constprop.0+0xd8>)
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fe0:	5d37      	ldrb	r7, [r6, r4]
 8007fe2:	f017 0708 	ands.w	r7, r7, #8
 8007fe6:	d1f8      	bne.n	8007fda <_strtoul_l.constprop.0+0xa>
 8007fe8:	2c2d      	cmp	r4, #45	@ 0x2d
 8007fea:	d12f      	bne.n	800804c <_strtoul_l.constprop.0+0x7c>
 8007fec:	2701      	movs	r7, #1
 8007fee:	782c      	ldrb	r4, [r5, #0]
 8007ff0:	1c85      	adds	r5, r0, #2
 8007ff2:	f033 0010 	bics.w	r0, r3, #16
 8007ff6:	d109      	bne.n	800800c <_strtoul_l.constprop.0+0x3c>
 8007ff8:	2c30      	cmp	r4, #48	@ 0x30
 8007ffa:	d12c      	bne.n	8008056 <_strtoul_l.constprop.0+0x86>
 8007ffc:	7828      	ldrb	r0, [r5, #0]
 8007ffe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008002:	2858      	cmp	r0, #88	@ 0x58
 8008004:	d127      	bne.n	8008056 <_strtoul_l.constprop.0+0x86>
 8008006:	2310      	movs	r3, #16
 8008008:	786c      	ldrb	r4, [r5, #1]
 800800a:	3502      	adds	r5, #2
 800800c:	f04f 38ff 	mov.w	r8, #4294967295
 8008010:	fbb8 f8f3 	udiv	r8, r8, r3
 8008014:	2600      	movs	r6, #0
 8008016:	fb03 f908 	mul.w	r9, r3, r8
 800801a:	4630      	mov	r0, r6
 800801c:	ea6f 0909 	mvn.w	r9, r9
 8008020:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008024:	f1bc 0f09 	cmp.w	ip, #9
 8008028:	d81c      	bhi.n	8008064 <_strtoul_l.constprop.0+0x94>
 800802a:	4664      	mov	r4, ip
 800802c:	42a3      	cmp	r3, r4
 800802e:	dd2a      	ble.n	8008086 <_strtoul_l.constprop.0+0xb6>
 8008030:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008034:	d007      	beq.n	8008046 <_strtoul_l.constprop.0+0x76>
 8008036:	4580      	cmp	r8, r0
 8008038:	d322      	bcc.n	8008080 <_strtoul_l.constprop.0+0xb0>
 800803a:	d101      	bne.n	8008040 <_strtoul_l.constprop.0+0x70>
 800803c:	45a1      	cmp	r9, r4
 800803e:	db1f      	blt.n	8008080 <_strtoul_l.constprop.0+0xb0>
 8008040:	2601      	movs	r6, #1
 8008042:	fb00 4003 	mla	r0, r0, r3, r4
 8008046:	f815 4b01 	ldrb.w	r4, [r5], #1
 800804a:	e7e9      	b.n	8008020 <_strtoul_l.constprop.0+0x50>
 800804c:	2c2b      	cmp	r4, #43	@ 0x2b
 800804e:	bf04      	itt	eq
 8008050:	782c      	ldrbeq	r4, [r5, #0]
 8008052:	1c85      	addeq	r5, r0, #2
 8008054:	e7cd      	b.n	8007ff2 <_strtoul_l.constprop.0+0x22>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1d8      	bne.n	800800c <_strtoul_l.constprop.0+0x3c>
 800805a:	2c30      	cmp	r4, #48	@ 0x30
 800805c:	bf0c      	ite	eq
 800805e:	2308      	moveq	r3, #8
 8008060:	230a      	movne	r3, #10
 8008062:	e7d3      	b.n	800800c <_strtoul_l.constprop.0+0x3c>
 8008064:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008068:	f1bc 0f19 	cmp.w	ip, #25
 800806c:	d801      	bhi.n	8008072 <_strtoul_l.constprop.0+0xa2>
 800806e:	3c37      	subs	r4, #55	@ 0x37
 8008070:	e7dc      	b.n	800802c <_strtoul_l.constprop.0+0x5c>
 8008072:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008076:	f1bc 0f19 	cmp.w	ip, #25
 800807a:	d804      	bhi.n	8008086 <_strtoul_l.constprop.0+0xb6>
 800807c:	3c57      	subs	r4, #87	@ 0x57
 800807e:	e7d5      	b.n	800802c <_strtoul_l.constprop.0+0x5c>
 8008080:	f04f 36ff 	mov.w	r6, #4294967295
 8008084:	e7df      	b.n	8008046 <_strtoul_l.constprop.0+0x76>
 8008086:	1c73      	adds	r3, r6, #1
 8008088:	d106      	bne.n	8008098 <_strtoul_l.constprop.0+0xc8>
 800808a:	2322      	movs	r3, #34	@ 0x22
 800808c:	4630      	mov	r0, r6
 800808e:	f8ce 3000 	str.w	r3, [lr]
 8008092:	b932      	cbnz	r2, 80080a2 <_strtoul_l.constprop.0+0xd2>
 8008094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008098:	b107      	cbz	r7, 800809c <_strtoul_l.constprop.0+0xcc>
 800809a:	4240      	negs	r0, r0
 800809c:	2a00      	cmp	r2, #0
 800809e:	d0f9      	beq.n	8008094 <_strtoul_l.constprop.0+0xc4>
 80080a0:	b106      	cbz	r6, 80080a4 <_strtoul_l.constprop.0+0xd4>
 80080a2:	1e69      	subs	r1, r5, #1
 80080a4:	6011      	str	r1, [r2, #0]
 80080a6:	e7f5      	b.n	8008094 <_strtoul_l.constprop.0+0xc4>
 80080a8:	080089b3 	.word	0x080089b3

080080ac <_strtoul_r>:
 80080ac:	f7ff bf90 	b.w	8007fd0 <_strtoul_l.constprop.0>

080080b0 <__ascii_wctomb>:
 80080b0:	4603      	mov	r3, r0
 80080b2:	4608      	mov	r0, r1
 80080b4:	b141      	cbz	r1, 80080c8 <__ascii_wctomb+0x18>
 80080b6:	2aff      	cmp	r2, #255	@ 0xff
 80080b8:	d904      	bls.n	80080c4 <__ascii_wctomb+0x14>
 80080ba:	228a      	movs	r2, #138	@ 0x8a
 80080bc:	f04f 30ff 	mov.w	r0, #4294967295
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	4770      	bx	lr
 80080c4:	2001      	movs	r0, #1
 80080c6:	700a      	strb	r2, [r1, #0]
 80080c8:	4770      	bx	lr
	...

080080cc <fiprintf>:
 80080cc:	b40e      	push	{r1, r2, r3}
 80080ce:	b503      	push	{r0, r1, lr}
 80080d0:	4601      	mov	r1, r0
 80080d2:	ab03      	add	r3, sp, #12
 80080d4:	4805      	ldr	r0, [pc, #20]	@ (80080ec <fiprintf+0x20>)
 80080d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	f000 f83d 	bl	800815c <_vfiprintf_r>
 80080e2:	b002      	add	sp, #8
 80080e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e8:	b003      	add	sp, #12
 80080ea:	4770      	bx	lr
 80080ec:	200000bc 	.word	0x200000bc

080080f0 <abort>:
 80080f0:	2006      	movs	r0, #6
 80080f2:	b508      	push	{r3, lr}
 80080f4:	f000 fa06 	bl	8008504 <raise>
 80080f8:	2001      	movs	r0, #1
 80080fa:	f7fa f834 	bl	8002166 <_exit>

080080fe <_malloc_usable_size_r>:
 80080fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008102:	1f18      	subs	r0, r3, #4
 8008104:	2b00      	cmp	r3, #0
 8008106:	bfbc      	itt	lt
 8008108:	580b      	ldrlt	r3, [r1, r0]
 800810a:	18c0      	addlt	r0, r0, r3
 800810c:	4770      	bx	lr

0800810e <__sfputc_r>:
 800810e:	6893      	ldr	r3, [r2, #8]
 8008110:	b410      	push	{r4}
 8008112:	3b01      	subs	r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	6093      	str	r3, [r2, #8]
 8008118:	da07      	bge.n	800812a <__sfputc_r+0x1c>
 800811a:	6994      	ldr	r4, [r2, #24]
 800811c:	42a3      	cmp	r3, r4
 800811e:	db01      	blt.n	8008124 <__sfputc_r+0x16>
 8008120:	290a      	cmp	r1, #10
 8008122:	d102      	bne.n	800812a <__sfputc_r+0x1c>
 8008124:	bc10      	pop	{r4}
 8008126:	f000 b931 	b.w	800838c <__swbuf_r>
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	1c58      	adds	r0, r3, #1
 800812e:	6010      	str	r0, [r2, #0]
 8008130:	7019      	strb	r1, [r3, #0]
 8008132:	4608      	mov	r0, r1
 8008134:	bc10      	pop	{r4}
 8008136:	4770      	bx	lr

08008138 <__sfputs_r>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	4614      	mov	r4, r2
 8008140:	18d5      	adds	r5, r2, r3
 8008142:	42ac      	cmp	r4, r5
 8008144:	d101      	bne.n	800814a <__sfputs_r+0x12>
 8008146:	2000      	movs	r0, #0
 8008148:	e007      	b.n	800815a <__sfputs_r+0x22>
 800814a:	463a      	mov	r2, r7
 800814c:	4630      	mov	r0, r6
 800814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008152:	f7ff ffdc 	bl	800810e <__sfputc_r>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d1f3      	bne.n	8008142 <__sfputs_r+0xa>
 800815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800815c <_vfiprintf_r>:
 800815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	460d      	mov	r5, r1
 8008162:	4614      	mov	r4, r2
 8008164:	4698      	mov	r8, r3
 8008166:	4606      	mov	r6, r0
 8008168:	b09d      	sub	sp, #116	@ 0x74
 800816a:	b118      	cbz	r0, 8008174 <_vfiprintf_r+0x18>
 800816c:	6a03      	ldr	r3, [r0, #32]
 800816e:	b90b      	cbnz	r3, 8008174 <_vfiprintf_r+0x18>
 8008170:	f7fd fc2a 	bl	80059c8 <__sinit>
 8008174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008176:	07d9      	lsls	r1, r3, #31
 8008178:	d405      	bmi.n	8008186 <_vfiprintf_r+0x2a>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	059a      	lsls	r2, r3, #22
 800817e:	d402      	bmi.n	8008186 <_vfiprintf_r+0x2a>
 8008180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008182:	f7fd fd98 	bl	8005cb6 <__retarget_lock_acquire_recursive>
 8008186:	89ab      	ldrh	r3, [r5, #12]
 8008188:	071b      	lsls	r3, r3, #28
 800818a:	d501      	bpl.n	8008190 <_vfiprintf_r+0x34>
 800818c:	692b      	ldr	r3, [r5, #16]
 800818e:	b99b      	cbnz	r3, 80081b8 <_vfiprintf_r+0x5c>
 8008190:	4629      	mov	r1, r5
 8008192:	4630      	mov	r0, r6
 8008194:	f000 f938 	bl	8008408 <__swsetup_r>
 8008198:	b170      	cbz	r0, 80081b8 <_vfiprintf_r+0x5c>
 800819a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800819c:	07dc      	lsls	r4, r3, #31
 800819e:	d504      	bpl.n	80081aa <_vfiprintf_r+0x4e>
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	b01d      	add	sp, #116	@ 0x74
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	0598      	lsls	r0, r3, #22
 80081ae:	d4f7      	bmi.n	80081a0 <_vfiprintf_r+0x44>
 80081b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081b2:	f7fd fd81 	bl	8005cb8 <__retarget_lock_release_recursive>
 80081b6:	e7f3      	b.n	80081a0 <_vfiprintf_r+0x44>
 80081b8:	2300      	movs	r3, #0
 80081ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80081bc:	2320      	movs	r3, #32
 80081be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081c2:	2330      	movs	r3, #48	@ 0x30
 80081c4:	f04f 0901 	mov.w	r9, #1
 80081c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80081cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008378 <_vfiprintf_r+0x21c>
 80081d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081d4:	4623      	mov	r3, r4
 80081d6:	469a      	mov	sl, r3
 80081d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081dc:	b10a      	cbz	r2, 80081e2 <_vfiprintf_r+0x86>
 80081de:	2a25      	cmp	r2, #37	@ 0x25
 80081e0:	d1f9      	bne.n	80081d6 <_vfiprintf_r+0x7a>
 80081e2:	ebba 0b04 	subs.w	fp, sl, r4
 80081e6:	d00b      	beq.n	8008200 <_vfiprintf_r+0xa4>
 80081e8:	465b      	mov	r3, fp
 80081ea:	4622      	mov	r2, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff ffa2 	bl	8008138 <__sfputs_r>
 80081f4:	3001      	adds	r0, #1
 80081f6:	f000 80a7 	beq.w	8008348 <_vfiprintf_r+0x1ec>
 80081fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081fc:	445a      	add	r2, fp
 80081fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008200:	f89a 3000 	ldrb.w	r3, [sl]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 809f 	beq.w	8008348 <_vfiprintf_r+0x1ec>
 800820a:	2300      	movs	r3, #0
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008214:	f10a 0a01 	add.w	sl, sl, #1
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	9307      	str	r3, [sp, #28]
 800821c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008220:	931a      	str	r3, [sp, #104]	@ 0x68
 8008222:	4654      	mov	r4, sl
 8008224:	2205      	movs	r2, #5
 8008226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822a:	4853      	ldr	r0, [pc, #332]	@ (8008378 <_vfiprintf_r+0x21c>)
 800822c:	f7fd fd45 	bl	8005cba <memchr>
 8008230:	9a04      	ldr	r2, [sp, #16]
 8008232:	b9d8      	cbnz	r0, 800826c <_vfiprintf_r+0x110>
 8008234:	06d1      	lsls	r1, r2, #27
 8008236:	bf44      	itt	mi
 8008238:	2320      	movmi	r3, #32
 800823a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800823e:	0713      	lsls	r3, r2, #28
 8008240:	bf44      	itt	mi
 8008242:	232b      	movmi	r3, #43	@ 0x2b
 8008244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008248:	f89a 3000 	ldrb.w	r3, [sl]
 800824c:	2b2a      	cmp	r3, #42	@ 0x2a
 800824e:	d015      	beq.n	800827c <_vfiprintf_r+0x120>
 8008250:	4654      	mov	r4, sl
 8008252:	2000      	movs	r0, #0
 8008254:	f04f 0c0a 	mov.w	ip, #10
 8008258:	9a07      	ldr	r2, [sp, #28]
 800825a:	4621      	mov	r1, r4
 800825c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008260:	3b30      	subs	r3, #48	@ 0x30
 8008262:	2b09      	cmp	r3, #9
 8008264:	d94b      	bls.n	80082fe <_vfiprintf_r+0x1a2>
 8008266:	b1b0      	cbz	r0, 8008296 <_vfiprintf_r+0x13a>
 8008268:	9207      	str	r2, [sp, #28]
 800826a:	e014      	b.n	8008296 <_vfiprintf_r+0x13a>
 800826c:	eba0 0308 	sub.w	r3, r0, r8
 8008270:	fa09 f303 	lsl.w	r3, r9, r3
 8008274:	4313      	orrs	r3, r2
 8008276:	46a2      	mov	sl, r4
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	e7d2      	b.n	8008222 <_vfiprintf_r+0xc6>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	1d19      	adds	r1, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	9103      	str	r1, [sp, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	bfbb      	ittet	lt
 8008288:	425b      	neglt	r3, r3
 800828a:	f042 0202 	orrlt.w	r2, r2, #2
 800828e:	9307      	strge	r3, [sp, #28]
 8008290:	9307      	strlt	r3, [sp, #28]
 8008292:	bfb8      	it	lt
 8008294:	9204      	strlt	r2, [sp, #16]
 8008296:	7823      	ldrb	r3, [r4, #0]
 8008298:	2b2e      	cmp	r3, #46	@ 0x2e
 800829a:	d10a      	bne.n	80082b2 <_vfiprintf_r+0x156>
 800829c:	7863      	ldrb	r3, [r4, #1]
 800829e:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a0:	d132      	bne.n	8008308 <_vfiprintf_r+0x1ac>
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	3402      	adds	r4, #2
 80082a6:	1d1a      	adds	r2, r3, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	9203      	str	r2, [sp, #12]
 80082ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082b0:	9305      	str	r3, [sp, #20]
 80082b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800837c <_vfiprintf_r+0x220>
 80082b6:	2203      	movs	r2, #3
 80082b8:	4650      	mov	r0, sl
 80082ba:	7821      	ldrb	r1, [r4, #0]
 80082bc:	f7fd fcfd 	bl	8005cba <memchr>
 80082c0:	b138      	cbz	r0, 80082d2 <_vfiprintf_r+0x176>
 80082c2:	2240      	movs	r2, #64	@ 0x40
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	eba0 000a 	sub.w	r0, r0, sl
 80082ca:	4082      	lsls	r2, r0
 80082cc:	4313      	orrs	r3, r2
 80082ce:	3401      	adds	r4, #1
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d6:	2206      	movs	r2, #6
 80082d8:	4829      	ldr	r0, [pc, #164]	@ (8008380 <_vfiprintf_r+0x224>)
 80082da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082de:	f7fd fcec 	bl	8005cba <memchr>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d03f      	beq.n	8008366 <_vfiprintf_r+0x20a>
 80082e6:	4b27      	ldr	r3, [pc, #156]	@ (8008384 <_vfiprintf_r+0x228>)
 80082e8:	bb1b      	cbnz	r3, 8008332 <_vfiprintf_r+0x1d6>
 80082ea:	9b03      	ldr	r3, [sp, #12]
 80082ec:	3307      	adds	r3, #7
 80082ee:	f023 0307 	bic.w	r3, r3, #7
 80082f2:	3308      	adds	r3, #8
 80082f4:	9303      	str	r3, [sp, #12]
 80082f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f8:	443b      	add	r3, r7
 80082fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fc:	e76a      	b.n	80081d4 <_vfiprintf_r+0x78>
 80082fe:	460c      	mov	r4, r1
 8008300:	2001      	movs	r0, #1
 8008302:	fb0c 3202 	mla	r2, ip, r2, r3
 8008306:	e7a8      	b.n	800825a <_vfiprintf_r+0xfe>
 8008308:	2300      	movs	r3, #0
 800830a:	f04f 0c0a 	mov.w	ip, #10
 800830e:	4619      	mov	r1, r3
 8008310:	3401      	adds	r4, #1
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	4620      	mov	r0, r4
 8008316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831a:	3a30      	subs	r2, #48	@ 0x30
 800831c:	2a09      	cmp	r2, #9
 800831e:	d903      	bls.n	8008328 <_vfiprintf_r+0x1cc>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0c6      	beq.n	80082b2 <_vfiprintf_r+0x156>
 8008324:	9105      	str	r1, [sp, #20]
 8008326:	e7c4      	b.n	80082b2 <_vfiprintf_r+0x156>
 8008328:	4604      	mov	r4, r0
 800832a:	2301      	movs	r3, #1
 800832c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008330:	e7f0      	b.n	8008314 <_vfiprintf_r+0x1b8>
 8008332:	ab03      	add	r3, sp, #12
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	462a      	mov	r2, r5
 8008338:	4630      	mov	r0, r6
 800833a:	4b13      	ldr	r3, [pc, #76]	@ (8008388 <_vfiprintf_r+0x22c>)
 800833c:	a904      	add	r1, sp, #16
 800833e:	f7fc fef9 	bl	8005134 <_printf_float>
 8008342:	4607      	mov	r7, r0
 8008344:	1c78      	adds	r0, r7, #1
 8008346:	d1d6      	bne.n	80082f6 <_vfiprintf_r+0x19a>
 8008348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800834a:	07d9      	lsls	r1, r3, #31
 800834c:	d405      	bmi.n	800835a <_vfiprintf_r+0x1fe>
 800834e:	89ab      	ldrh	r3, [r5, #12]
 8008350:	059a      	lsls	r2, r3, #22
 8008352:	d402      	bmi.n	800835a <_vfiprintf_r+0x1fe>
 8008354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008356:	f7fd fcaf 	bl	8005cb8 <__retarget_lock_release_recursive>
 800835a:	89ab      	ldrh	r3, [r5, #12]
 800835c:	065b      	lsls	r3, r3, #25
 800835e:	f53f af1f 	bmi.w	80081a0 <_vfiprintf_r+0x44>
 8008362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008364:	e71e      	b.n	80081a4 <_vfiprintf_r+0x48>
 8008366:	ab03      	add	r3, sp, #12
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	462a      	mov	r2, r5
 800836c:	4630      	mov	r0, r6
 800836e:	4b06      	ldr	r3, [pc, #24]	@ (8008388 <_vfiprintf_r+0x22c>)
 8008370:	a904      	add	r1, sp, #16
 8008372:	f7fd f97d 	bl	8005670 <_printf_i>
 8008376:	e7e4      	b.n	8008342 <_vfiprintf_r+0x1e6>
 8008378:	08008940 	.word	0x08008940
 800837c:	08008946 	.word	0x08008946
 8008380:	0800894a 	.word	0x0800894a
 8008384:	08005135 	.word	0x08005135
 8008388:	08008139 	.word	0x08008139

0800838c <__swbuf_r>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	460e      	mov	r6, r1
 8008390:	4614      	mov	r4, r2
 8008392:	4605      	mov	r5, r0
 8008394:	b118      	cbz	r0, 800839e <__swbuf_r+0x12>
 8008396:	6a03      	ldr	r3, [r0, #32]
 8008398:	b90b      	cbnz	r3, 800839e <__swbuf_r+0x12>
 800839a:	f7fd fb15 	bl	80059c8 <__sinit>
 800839e:	69a3      	ldr	r3, [r4, #24]
 80083a0:	60a3      	str	r3, [r4, #8]
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	071a      	lsls	r2, r3, #28
 80083a6:	d501      	bpl.n	80083ac <__swbuf_r+0x20>
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	b943      	cbnz	r3, 80083be <__swbuf_r+0x32>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 f82a 	bl	8008408 <__swsetup_r>
 80083b4:	b118      	cbz	r0, 80083be <__swbuf_r+0x32>
 80083b6:	f04f 37ff 	mov.w	r7, #4294967295
 80083ba:	4638      	mov	r0, r7
 80083bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	6922      	ldr	r2, [r4, #16]
 80083c2:	b2f6      	uxtb	r6, r6
 80083c4:	1a98      	subs	r0, r3, r2
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	4637      	mov	r7, r6
 80083ca:	4283      	cmp	r3, r0
 80083cc:	dc05      	bgt.n	80083da <__swbuf_r+0x4e>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f7ff fc3d 	bl	8007c50 <_fflush_r>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d1ed      	bne.n	80083b6 <__swbuf_r+0x2a>
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	3b01      	subs	r3, #1
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	701e      	strb	r6, [r3, #0]
 80083e8:	6962      	ldr	r2, [r4, #20]
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d004      	beq.n	80083fa <__swbuf_r+0x6e>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	07db      	lsls	r3, r3, #31
 80083f4:	d5e1      	bpl.n	80083ba <__swbuf_r+0x2e>
 80083f6:	2e0a      	cmp	r6, #10
 80083f8:	d1df      	bne.n	80083ba <__swbuf_r+0x2e>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f7ff fc27 	bl	8007c50 <_fflush_r>
 8008402:	2800      	cmp	r0, #0
 8008404:	d0d9      	beq.n	80083ba <__swbuf_r+0x2e>
 8008406:	e7d6      	b.n	80083b6 <__swbuf_r+0x2a>

08008408 <__swsetup_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4b29      	ldr	r3, [pc, #164]	@ (80084b0 <__swsetup_r+0xa8>)
 800840c:	4605      	mov	r5, r0
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	460c      	mov	r4, r1
 8008412:	b118      	cbz	r0, 800841c <__swsetup_r+0x14>
 8008414:	6a03      	ldr	r3, [r0, #32]
 8008416:	b90b      	cbnz	r3, 800841c <__swsetup_r+0x14>
 8008418:	f7fd fad6 	bl	80059c8 <__sinit>
 800841c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008420:	0719      	lsls	r1, r3, #28
 8008422:	d422      	bmi.n	800846a <__swsetup_r+0x62>
 8008424:	06da      	lsls	r2, r3, #27
 8008426:	d407      	bmi.n	8008438 <__swsetup_r+0x30>
 8008428:	2209      	movs	r2, #9
 800842a:	602a      	str	r2, [r5, #0]
 800842c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	e033      	b.n	80084a0 <__swsetup_r+0x98>
 8008438:	0758      	lsls	r0, r3, #29
 800843a:	d512      	bpl.n	8008462 <__swsetup_r+0x5a>
 800843c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800843e:	b141      	cbz	r1, 8008452 <__swsetup_r+0x4a>
 8008440:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008444:	4299      	cmp	r1, r3
 8008446:	d002      	beq.n	800844e <__swsetup_r+0x46>
 8008448:	4628      	mov	r0, r5
 800844a:	f7fe fa95 	bl	8006978 <_free_r>
 800844e:	2300      	movs	r3, #0
 8008450:	6363      	str	r3, [r4, #52]	@ 0x34
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	2300      	movs	r3, #0
 800845c:	6063      	str	r3, [r4, #4]
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f043 0308 	orr.w	r3, r3, #8
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	b94b      	cbnz	r3, 8008482 <__swsetup_r+0x7a>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008478:	d003      	beq.n	8008482 <__swsetup_r+0x7a>
 800847a:	4621      	mov	r1, r4
 800847c:	4628      	mov	r0, r5
 800847e:	f000 f882 	bl	8008586 <__smakebuf_r>
 8008482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008486:	f013 0201 	ands.w	r2, r3, #1
 800848a:	d00a      	beq.n	80084a2 <__swsetup_r+0x9a>
 800848c:	2200      	movs	r2, #0
 800848e:	60a2      	str	r2, [r4, #8]
 8008490:	6962      	ldr	r2, [r4, #20]
 8008492:	4252      	negs	r2, r2
 8008494:	61a2      	str	r2, [r4, #24]
 8008496:	6922      	ldr	r2, [r4, #16]
 8008498:	b942      	cbnz	r2, 80084ac <__swsetup_r+0xa4>
 800849a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800849e:	d1c5      	bne.n	800842c <__swsetup_r+0x24>
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
 80084a2:	0799      	lsls	r1, r3, #30
 80084a4:	bf58      	it	pl
 80084a6:	6962      	ldrpl	r2, [r4, #20]
 80084a8:	60a2      	str	r2, [r4, #8]
 80084aa:	e7f4      	b.n	8008496 <__swsetup_r+0x8e>
 80084ac:	2000      	movs	r0, #0
 80084ae:	e7f7      	b.n	80084a0 <__swsetup_r+0x98>
 80084b0:	200000bc 	.word	0x200000bc

080084b4 <_raise_r>:
 80084b4:	291f      	cmp	r1, #31
 80084b6:	b538      	push	{r3, r4, r5, lr}
 80084b8:	4605      	mov	r5, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	d904      	bls.n	80084c8 <_raise_r+0x14>
 80084be:	2316      	movs	r3, #22
 80084c0:	6003      	str	r3, [r0, #0]
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084ca:	b112      	cbz	r2, 80084d2 <_raise_r+0x1e>
 80084cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084d0:	b94b      	cbnz	r3, 80084e6 <_raise_r+0x32>
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f830 	bl	8008538 <_getpid_r>
 80084d8:	4622      	mov	r2, r4
 80084da:	4601      	mov	r1, r0
 80084dc:	4628      	mov	r0, r5
 80084de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e2:	f000 b817 	b.w	8008514 <_kill_r>
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d00a      	beq.n	8008500 <_raise_r+0x4c>
 80084ea:	1c59      	adds	r1, r3, #1
 80084ec:	d103      	bne.n	80084f6 <_raise_r+0x42>
 80084ee:	2316      	movs	r3, #22
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	2001      	movs	r0, #1
 80084f4:	e7e7      	b.n	80084c6 <_raise_r+0x12>
 80084f6:	2100      	movs	r1, #0
 80084f8:	4620      	mov	r0, r4
 80084fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084fe:	4798      	blx	r3
 8008500:	2000      	movs	r0, #0
 8008502:	e7e0      	b.n	80084c6 <_raise_r+0x12>

08008504 <raise>:
 8008504:	4b02      	ldr	r3, [pc, #8]	@ (8008510 <raise+0xc>)
 8008506:	4601      	mov	r1, r0
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	f7ff bfd3 	b.w	80084b4 <_raise_r>
 800850e:	bf00      	nop
 8008510:	200000bc 	.word	0x200000bc

08008514 <_kill_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	2300      	movs	r3, #0
 8008518:	4d06      	ldr	r5, [pc, #24]	@ (8008534 <_kill_r+0x20>)
 800851a:	4604      	mov	r4, r0
 800851c:	4608      	mov	r0, r1
 800851e:	4611      	mov	r1, r2
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	f7f9 fe10 	bl	8002146 <_kill>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d102      	bne.n	8008530 <_kill_r+0x1c>
 800852a:	682b      	ldr	r3, [r5, #0]
 800852c:	b103      	cbz	r3, 8008530 <_kill_r+0x1c>
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	bd38      	pop	{r3, r4, r5, pc}
 8008532:	bf00      	nop
 8008534:	20000548 	.word	0x20000548

08008538 <_getpid_r>:
 8008538:	f7f9 bdfe 	b.w	8002138 <_getpid>

0800853c <__swhatbuf_r>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	460c      	mov	r4, r1
 8008540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008544:	4615      	mov	r5, r2
 8008546:	2900      	cmp	r1, #0
 8008548:	461e      	mov	r6, r3
 800854a:	b096      	sub	sp, #88	@ 0x58
 800854c:	da0c      	bge.n	8008568 <__swhatbuf_r+0x2c>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	2100      	movs	r1, #0
 8008552:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008556:	bf14      	ite	ne
 8008558:	2340      	movne	r3, #64	@ 0x40
 800855a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800855e:	2000      	movs	r0, #0
 8008560:	6031      	str	r1, [r6, #0]
 8008562:	602b      	str	r3, [r5, #0]
 8008564:	b016      	add	sp, #88	@ 0x58
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	466a      	mov	r2, sp
 800856a:	f000 f849 	bl	8008600 <_fstat_r>
 800856e:	2800      	cmp	r0, #0
 8008570:	dbed      	blt.n	800854e <__swhatbuf_r+0x12>
 8008572:	9901      	ldr	r1, [sp, #4]
 8008574:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008578:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800857c:	4259      	negs	r1, r3
 800857e:	4159      	adcs	r1, r3
 8008580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008584:	e7eb      	b.n	800855e <__swhatbuf_r+0x22>

08008586 <__smakebuf_r>:
 8008586:	898b      	ldrh	r3, [r1, #12]
 8008588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800858a:	079d      	lsls	r5, r3, #30
 800858c:	4606      	mov	r6, r0
 800858e:	460c      	mov	r4, r1
 8008590:	d507      	bpl.n	80085a2 <__smakebuf_r+0x1c>
 8008592:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008596:	6023      	str	r3, [r4, #0]
 8008598:	6123      	str	r3, [r4, #16]
 800859a:	2301      	movs	r3, #1
 800859c:	6163      	str	r3, [r4, #20]
 800859e:	b003      	add	sp, #12
 80085a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085a2:	466a      	mov	r2, sp
 80085a4:	ab01      	add	r3, sp, #4
 80085a6:	f7ff ffc9 	bl	800853c <__swhatbuf_r>
 80085aa:	9f00      	ldr	r7, [sp, #0]
 80085ac:	4605      	mov	r5, r0
 80085ae:	4639      	mov	r1, r7
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7fe fa53 	bl	8006a5c <_malloc_r>
 80085b6:	b948      	cbnz	r0, 80085cc <__smakebuf_r+0x46>
 80085b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085bc:	059a      	lsls	r2, r3, #22
 80085be:	d4ee      	bmi.n	800859e <__smakebuf_r+0x18>
 80085c0:	f023 0303 	bic.w	r3, r3, #3
 80085c4:	f043 0302 	orr.w	r3, r3, #2
 80085c8:	81a3      	strh	r3, [r4, #12]
 80085ca:	e7e2      	b.n	8008592 <__smakebuf_r+0xc>
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	9b01      	ldr	r3, [sp, #4]
 80085da:	6020      	str	r0, [r4, #0]
 80085dc:	b15b      	cbz	r3, 80085f6 <__smakebuf_r+0x70>
 80085de:	4630      	mov	r0, r6
 80085e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e4:	f000 f81e 	bl	8008624 <_isatty_r>
 80085e8:	b128      	cbz	r0, 80085f6 <__smakebuf_r+0x70>
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	f023 0303 	bic.w	r3, r3, #3
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	431d      	orrs	r5, r3
 80085fa:	81a5      	strh	r5, [r4, #12]
 80085fc:	e7cf      	b.n	800859e <__smakebuf_r+0x18>
	...

08008600 <_fstat_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	2300      	movs	r3, #0
 8008604:	4d06      	ldr	r5, [pc, #24]	@ (8008620 <_fstat_r+0x20>)
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	4611      	mov	r1, r2
 800860c:	602b      	str	r3, [r5, #0]
 800860e:	f7f9 fdf9 	bl	8002204 <_fstat>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d102      	bne.n	800861c <_fstat_r+0x1c>
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	b103      	cbz	r3, 800861c <_fstat_r+0x1c>
 800861a:	6023      	str	r3, [r4, #0]
 800861c:	bd38      	pop	{r3, r4, r5, pc}
 800861e:	bf00      	nop
 8008620:	20000548 	.word	0x20000548

08008624 <_isatty_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	2300      	movs	r3, #0
 8008628:	4d05      	ldr	r5, [pc, #20]	@ (8008640 <_isatty_r+0x1c>)
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	f7f9 fdf7 	bl	8002222 <_isatty>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_isatty_r+0x1a>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_isatty_r+0x1a>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	20000548 	.word	0x20000548

08008644 <_init>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr

08008650 <_fini>:
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	bf00      	nop
 8008654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008656:	bc08      	pop	{r3}
 8008658:	469e      	mov	lr, r3
 800865a:	4770      	bx	lr
