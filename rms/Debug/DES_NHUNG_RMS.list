
DES_NHUNG_RMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba70  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800bb80  0800bb80  0000cb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c104  0800c104  0000e1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c104  0800c104  0000d104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c10c  0800c10c  0000e1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c10c  0800c10c  0000d10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c110  0800c110  0000d110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800c114  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046dc  200001f8  0800c30c  0000e1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048d4  0800c30c  0000e8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192cf  00000000  00000000  0000e221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af6  00000000  00000000  000274f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0002afe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121a  00000000  00000000  0002c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d9  00000000  00000000  0002d932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e90  00000000  00000000  00048b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982df  00000000  00000000  0006299b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000fac7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007600  00000000  00000000  000fad00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00102300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb68 	.word	0x0800bb68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800bb68 	.word	0x0800bb68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <microDelay>:
uint8_t TCD;
uint8_t RHD;
uint8_t RHI;
// Định nghĩa hàm microDelay
void microDelay (uint16_t delay)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0); // Đặt lại bộ đếm của timer
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <microDelay+0x2c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24

  while (__HAL_TIM_GET_COUNTER(&htim1) < delay); // Chờ cho đến khi bộ đếm đạt giá trị delay
 80010e2:	bf00      	nop
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <microDelay+0x2c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3f9      	bcc.n	80010e4 <microDelay+0x14>
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000530 	.word	0x20000530

08001100 <DHT11_Start>:

// Định nghĩa hàm DHT11_Start
uint8_t DHT11_Start (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	482c      	ldr	r0, [pc, #176]	@ (80011e0 <DHT11_Start+0xe0>)
 800112e:	f001 fcf5 	bl	8002b1c <HAL_GPIO_Init>

  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001138:	4829      	ldr	r0, [pc, #164]	@ (80011e0 <DHT11_Start+0xe0>)
 800113a:	f001 fe8a 	bl	8002e52 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 800113e:	2014      	movs	r0, #20
 8001140:	f001 fbe8 	bl	8002914 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114a:	4825      	ldr	r0, [pc, #148]	@ (80011e0 <DHT11_Start+0xe0>)
 800114c:	f001 fe81 	bl	8002e52 <HAL_GPIO_WritePin>
  microDelay (40);   // wait for 40us
 8001150:	2028      	movs	r0, #40	@ 0x28
 8001152:	f7ff ffbd 	bl	80010d0 <microDelay>

  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <DHT11_Start+0xe0>)
 8001164:	f001 fcda 	bl	8002b1c <HAL_GPIO_Init>

  microDelay (40); // wait for 40us
 8001168:	2028      	movs	r0, #40	@ 0x28
 800116a:	f7ff ffb1 	bl	80010d0 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800116e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001172:	481b      	ldr	r0, [pc, #108]	@ (80011e0 <DHT11_Start+0xe0>)
 8001174:	f001 fe56 	bl	8002e24 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <DHT11_Start+0x98>
  {
    microDelay (80); // wait 80us if time very lag --> cannot start
 800117e:	2050      	movs	r0, #80	@ 0x50
 8001180:	f7ff ffa6 	bl	80010d0 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001184:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001188:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <DHT11_Start+0xe0>)
 800118a:	f001 fe4b 	bl	8002e24 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <DHT11_Start+0x98>
    {
      Response = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
    }
  }

  pMillis = HAL_GetTick();
 8001198:	f001 fbb2 	bl	8002900 <HAL_GetTick>
 800119c:	4603      	mov	r3, r0
 800119e:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <DHT11_Start+0xe4>)
 80011a0:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 80011a2:	f001 fbad 	bl	8002900 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <DHT11_Start+0xe8>)
 80011aa:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011ac:	e004      	b.n	80011b8 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 80011ae:	f001 fba7 	bl	8002900 <HAL_GetTick>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <DHT11_Start+0xe8>)
 80011b6:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011bc:	4808      	ldr	r0, [pc, #32]	@ (80011e0 <DHT11_Start+0xe0>)
 80011be:	f001 fe31 	bl	8002e24 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <DHT11_Start+0xd6>
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <DHT11_Start+0xe4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1c9a      	adds	r2, r3, #2
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <DHT11_Start+0xe8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8eb      	bhi.n	80011ae <DHT11_Start+0xae>
  }
  return Response;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	2000021c 	.word	0x2000021c
 80011e8:	20000220 	.word	0x20000220

080011ec <DHT11_Read>:

// Định nghĩa hàm DHT11_Read
uint8_t DHT11_Read (void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e066      	b.n	80012c6 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 80011f8:	f001 fb82 	bl	8002900 <HAL_GetTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a36      	ldr	r2, [pc, #216]	@ (80012d8 <DHT11_Read+0xec>)
 8001200:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001202:	f001 fb7d 	bl	8002900 <HAL_GetTick>
 8001206:	4603      	mov	r3, r0
 8001208:	4a34      	ldr	r2, [pc, #208]	@ (80012dc <DHT11_Read+0xf0>)
 800120a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800120c:	e004      	b.n	8001218 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800120e:	f001 fb77 	bl	8002900 <HAL_GetTick>
 8001212:	4603      	mov	r3, r0
 8001214:	4a31      	ldr	r2, [pc, #196]	@ (80012dc <DHT11_Read+0xf0>)
 8001216:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001218:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121c:	4830      	ldr	r0, [pc, #192]	@ (80012e0 <DHT11_Read+0xf4>)
 800121e:	f001 fe01 	bl	8002e24 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <DHT11_Read+0x4a>
 8001228:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <DHT11_Read+0xec>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1c9a      	adds	r2, r3, #2
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <DHT11_Read+0xf0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d8eb      	bhi.n	800120e <DHT11_Read+0x22>
    }
    microDelay (37);   // wait for 27-70 us
 8001236:	2025      	movs	r0, #37	@ 0x25
 8001238:	f7ff ff4a 	bl	80010d0 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800123c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001240:	4827      	ldr	r0, [pc, #156]	@ (80012e0 <DHT11_Read+0xf4>)
 8001242:	f001 fdef 	bl	8002e24 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10e      	bne.n	800126a <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2201      	movs	r2, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	b25b      	sxtb	r3, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	b25a      	sxtb	r2, r3
 800125e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001262:	4013      	ands	r3, r2
 8001264:	b25b      	sxtb	r3, r3
 8001266:	71bb      	strb	r3, [r7, #6]
 8001268:	e00b      	b.n	8001282 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f1c3 0307 	rsb	r3, r3, #7
 8001270:	2201      	movs	r2, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	b25a      	sxtb	r2, r3
 8001278:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800127c:	4313      	orrs	r3, r2
 800127e:	b25b      	sxtb	r3, r3
 8001280:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001282:	f001 fb3d 	bl	8002900 <HAL_GetTick>
 8001286:	4603      	mov	r3, r0
 8001288:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <DHT11_Read+0xec>)
 800128a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800128c:	f001 fb38 	bl	8002900 <HAL_GetTick>
 8001290:	4603      	mov	r3, r0
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <DHT11_Read+0xf0>)
 8001294:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001296:	e004      	b.n	80012a2 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001298:	f001 fb32 	bl	8002900 <HAL_GetTick>
 800129c:	4603      	mov	r3, r0
 800129e:	4a0f      	ldr	r2, [pc, #60]	@ (80012dc <DHT11_Read+0xf0>)
 80012a0:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a6:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <DHT11_Read+0xf4>)
 80012a8:	f001 fdbc 	bl	8002e24 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <DHT11_Read+0xd4>
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <DHT11_Read+0xec>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1c9a      	adds	r2, r3, #2
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <DHT11_Read+0xf0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8eb      	bhi.n	8001298 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	3301      	adds	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d995      	bls.n	80011f8 <DHT11_Read+0xc>
    }
  }
  return b;
 80012cc:	79bb      	ldrb	r3, [r7, #6]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000021c 	.word	0x2000021c
 80012dc:	20000220 	.word	0x20000220
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <DHT11>:

float DHT11 (void)
{
 80012e4:	b598      	push	{r3, r4, r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if(DHT11_Start())
 80012e8:	f7ff ff0a 	bl	8001100 <DHT11_Start>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8084 	beq.w	80013fc <DHT11+0x118>
	{
	RHI = DHT11_Read(); // Relative humidity integral
 80012f4:	f7ff ff7a 	bl	80011ec <DHT11_Read>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b40      	ldr	r3, [pc, #256]	@ (8001400 <DHT11+0x11c>)
 80012fe:	701a      	strb	r2, [r3, #0]
	RHD = DHT11_Read(); // Relative humidity decimal
 8001300:	f7ff ff74 	bl	80011ec <DHT11_Read>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <DHT11+0x120>)
 800130a:	701a      	strb	r2, [r3, #0]
	TCI = DHT11_Read(); // Celsius integral
 800130c:	f7ff ff6e 	bl	80011ec <DHT11_Read>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4b3c      	ldr	r3, [pc, #240]	@ (8001408 <DHT11+0x124>)
 8001316:	701a      	strb	r2, [r3, #0]
	TCD = DHT11_Read(); // Celsius decimal
 8001318:	f7ff ff68 	bl	80011ec <DHT11_Read>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <DHT11+0x128>)
 8001322:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read(); // Check sum
 8001324:	f7ff ff62 	bl	80011ec <DHT11_Read>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b38      	ldr	r3, [pc, #224]	@ (8001410 <DHT11+0x12c>)
 800132e:	701a      	strb	r2, [r3, #0]
	if (RHI + RHD + TCI + TCD == SUM)
 8001330:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <DHT11+0x11c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b33      	ldr	r3, [pc, #204]	@ (8001404 <DHT11+0x120>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a32      	ldr	r2, [pc, #200]	@ (8001408 <DHT11+0x124>)
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	4413      	add	r3, r2
 8001342:	4a32      	ldr	r2, [pc, #200]	@ (800140c <DHT11+0x128>)
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a31      	ldr	r2, [pc, #196]	@ (8001410 <DHT11+0x12c>)
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	4293      	cmp	r3, r2
 800134e:	d152      	bne.n	80013f6 <DHT11+0x112>
	{
	// Can use RHI and TCI for any purposes if whole number only needed
	tCelsius = (float)TCI + (float)(TCD/10.0);
 8001350:	4b2d      	ldr	r3, [pc, #180]	@ (8001408 <DHT11+0x124>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fc9d 	bl	8000c94 <__aeabi_ui2f>
 800135a:	4604      	mov	r4, r0
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <DHT11+0x128>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f84f 	bl	8000404 <__aeabi_i2d>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <DHT11+0x130>)
 800136c:	f7ff f9de 	bl	800072c <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb86 	bl	8000a88 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff fbd7 	bl	8000b34 <__addsf3>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <DHT11+0x134>)
 800138c:	601a      	str	r2, [r3, #0]
	tFahrenheit = tCelsius * 9/5 + 32;
 800138e:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <DHT11+0x134>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4922      	ldr	r1, [pc, #136]	@ (800141c <DHT11+0x138>)
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fcd5 	bl	8000d44 <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	4920      	ldr	r1, [pc, #128]	@ (8001420 <DHT11+0x13c>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fd84 	bl	8000eac <__aeabi_fdiv>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fbc2 	bl	8000b34 <__addsf3>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <DHT11+0x140>)
 80013b6:	601a      	str	r2, [r3, #0]
	RH = (float)RHI + (float)(RHD/10.0);
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <DHT11+0x11c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fc69 	bl	8000c94 <__aeabi_ui2f>
 80013c2:	4604      	mov	r4, r0
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <DHT11+0x120>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f81b 	bl	8000404 <__aeabi_i2d>
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <DHT11+0x130>)
 80013d4:	f7ff f9aa 	bl	800072c <__aeabi_ddiv>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fb52 	bl	8000a88 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff fba3 	bl	8000b34 <__addsf3>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <DHT11+0x144>)
 80013f4:	601a      	str	r2, [r3, #0]
	// Can use tCelsius, tFahrenheit and RH for any purposes
	}
	return RH;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <DHT11+0x144>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	e7ff      	b.n	80013fc <DHT11+0x118>
	}
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd98      	pop	{r3, r4, r7, pc}
 8001400:	20000214 	.word	0x20000214
 8001404:	20000215 	.word	0x20000215
 8001408:	20000216 	.word	0x20000216
 800140c:	20000217 	.word	0x20000217
 8001410:	20000218 	.word	0x20000218
 8001414:	40240000 	.word	0x40240000
 8001418:	20000224 	.word	0x20000224
 800141c:	41100000 	.word	0x41100000
 8001420:	40a00000 	.word	0x40a00000
 8001424:	20000228 	.word	0x20000228
 8001428:	2000022c 	.word	0x2000022c

0800142c <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <DS1307_Init+0x1c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f806 	bl	800144c <DS1307_SetClockHalt>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000230 	.word	0x20000230

0800144c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <DS1307_SetClockHalt+0x14>
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	e000      	b.n	8001462 <DS1307_SetClockHalt+0x16>
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001464:	2000      	movs	r0, #0
 8001466:	f000 f831 	bl	80014cc <DS1307_GetRegByte>
 800146a:	4603      	mov	r3, r0
 800146c:	b25b      	sxtb	r3, r3
 800146e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001472:	b25a      	sxtb	r2, r3
 8001474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001478:	4313      	orrs	r3, r2
 800147a:	b25b      	sxtb	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	2000      	movs	r0, #0
 8001482:	f000 f805 	bl	8001490 <DS1307_SetRegByte>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af02      	add	r7, sp, #8
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4613      	mov	r3, r2
 800149e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	733b      	strb	r3, [r7, #12]
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80014a8:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <DS1307_SetRegByte+0x38>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f107 020c 	add.w	r2, r7, #12
 80014b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2302      	movs	r3, #2
 80014b8:	21d0      	movs	r1, #208	@ 0xd0
 80014ba:	f001 fe3f 	bl	800313c <HAL_I2C_Master_Transmit>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000230 	.word	0x20000230

080014cc <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <DS1307_GetRegByte+0x40>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	1dfa      	adds	r2, r7, #7
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	21d0      	movs	r1, #208	@ 0xd0
 80014e6:	f001 fe29 	bl	800313c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <DS1307_GetRegByte+0x40>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f107 020f 	add.w	r2, r7, #15
 80014f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	21d0      	movs	r1, #208	@ 0xd0
 80014fc:	f001 ff1c 	bl	8003338 <HAL_I2C_Master_Receive>
	return val;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000230 	.word	0x20000230

08001510 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001514:	2002      	movs	r0, #2
 8001516:	f7ff ffd9 	bl	80014cc <DS1307_GetRegByte>
 800151a:	4603      	mov	r3, r0
 800151c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f81e 	bl	8001564 <DS1307_DecodeBCD>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}

0800152e <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff ffca 	bl	80014cc <DS1307_GetRegByte>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f812 	bl	8001564 <DS1307_DecodeBCD>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}

08001546 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff ffbe 	bl	80014cc <DS1307_GetRegByte>
 8001550:	4603      	mov	r3, r0
 8001552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f803 	bl	8001564 <DS1307_DecodeBCD>
 800155e:	4603      	mov	r3, r0
}
 8001560:	4618      	mov	r0, r3
 8001562:	bd80      	pop	{r7, pc}

08001564 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4413      	add	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4413      	add	r3, r2
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <vApplicationGetIdleTaskMemory+0x28>)
 80015a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80015aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000234 	.word	0x20000234
 80015c0:	200002d4 	.word	0x200002d4

080015c4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80015ce:	4a38      	ldr	r2, [pc, #224]	@ (80016b0 <HD44780_Init+0xec>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80015d4:	4b37      	ldr	r3, [pc, #220]	@ (80016b4 <HD44780_Init+0xf0>)
 80015d6:	2208      	movs	r2, #8
 80015d8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80015da:	4b37      	ldr	r3, [pc, #220]	@ (80016b8 <HD44780_Init+0xf4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80015e0:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <HD44780_Init+0xec>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d907      	bls.n	80015f8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80015e8:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <HD44780_Init+0xf4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <HD44780_Init+0xf4>)
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	e006      	b.n	8001606 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <HD44780_Init+0xf4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <HD44780_Init+0xf4>)
 8001604:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001606:	f000 f985 	bl	8001914 <DelayInit>
  HAL_Delay(50);
 800160a:	2032      	movs	r0, #50	@ 0x32
 800160c:	f001 f982 	bl	8002914 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HD44780_Init+0xf0>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f943 	bl	80018a0 <ExpanderWrite>
  HAL_Delay(1000);
 800161a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800161e:	f001 f979 	bl	8002914 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001622:	2030      	movs	r0, #48	@ 0x30
 8001624:	f000 f92b 	bl	800187e <Write4Bits>
  DelayUS(4500);
 8001628:	f241 1094 	movw	r0, #4500	@ 0x1194
 800162c:	f000 f99a 	bl	8001964 <DelayUS>

  Write4Bits(0x03 << 4);
 8001630:	2030      	movs	r0, #48	@ 0x30
 8001632:	f000 f924 	bl	800187e <Write4Bits>
  DelayUS(4500);
 8001636:	f241 1094 	movw	r0, #4500	@ 0x1194
 800163a:	f000 f993 	bl	8001964 <DelayUS>

  Write4Bits(0x03 << 4);
 800163e:	2030      	movs	r0, #48	@ 0x30
 8001640:	f000 f91d 	bl	800187e <Write4Bits>
  DelayUS(4500);
 8001644:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001648:	f000 f98c 	bl	8001964 <DelayUS>

  Write4Bits(0x02 << 4);
 800164c:	2020      	movs	r0, #32
 800164e:	f000 f916 	bl	800187e <Write4Bits>
  DelayUS(100);
 8001652:	2064      	movs	r0, #100	@ 0x64
 8001654:	f000 f986 	bl	8001964 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <HD44780_Init+0xf4>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f8ce 	bl	8001804 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <HD44780_Init+0xf8>)
 800166a:	2204      	movs	r2, #4
 800166c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800166e:	f000 f875 	bl	800175c <HD44780_Display>
  HD44780_Clear();
 8001672:	f000 f82b 	bl	80016cc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HD44780_Init+0xfc>)
 8001678:	2202      	movs	r2, #2
 800167a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800167c:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <HD44780_Init+0xfc>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f8bc 	bl	8001804 <SendCommand>
  DelayUS(4500);
 800168c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001690:	f000 f968 	bl	8001964 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001694:	490b      	ldr	r1, [pc, #44]	@ (80016c4 <HD44780_Init+0x100>)
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f876 	bl	8001788 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800169c:	490a      	ldr	r1, [pc, #40]	@ (80016c8 <HD44780_Init+0x104>)
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 f872 	bl	8001788 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80016a4:	f000 f81d 	bl	80016e2 <HD44780_Home>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200004d7 	.word	0x200004d7
 80016b4:	200004d8 	.word	0x200004d8
 80016b8:	200004d4 	.word	0x200004d4
 80016bc:	200004d5 	.word	0x200004d5
 80016c0:	200004d6 	.word	0x200004d6
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008

080016cc <HD44780_Clear>:

void HD44780_Clear()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 f897 	bl	8001804 <SendCommand>
  DelayUS(2000);
 80016d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016da:	f000 f943 	bl	8001964 <DelayUS>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HD44780_Home>:

void HD44780_Home()
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80016e6:	2002      	movs	r0, #2
 80016e8:	f000 f88c 	bl	8001804 <SendCommand>
  DelayUS(2000);
 80016ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016f0:	f000 f938 	bl	8001964 <DelayUS>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HD44780_SetCursor+0x5c>)
 800170a:	f107 0408 	add.w	r4, r7, #8
 800170e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <HD44780_SetCursor+0x60>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	79ba      	ldrb	r2, [r7, #6]
 800171a:	429a      	cmp	r2, r3
 800171c:	d303      	bcc.n	8001726 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HD44780_SetCursor+0x60>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	3318      	adds	r3, #24
 800172c:	443b      	add	r3, r7
 800172e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4413      	add	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	b25b      	sxtb	r3, r3
 800173c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001740:	b25b      	sxtb	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f85d 	bl	8001804 <SendCommand>
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	0800bb80 	.word	0x0800bb80
 8001758:	200004d7 	.word	0x200004d7

0800175c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HD44780_Display+0x28>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HD44780_Display+0x28>)
 800176c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800176e:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HD44780_Display+0x28>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f843 	bl	8001804 <SendCommand>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200004d5 	.word	0x200004d5

08001788 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f82a 	bl	8001804 <SendCommand>
  for (int i=0; i<8; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e009      	b.n	80017ca <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f82e 	bl	8001820 <SendChar>
  for (int i=0; i<8; i++)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	ddf2      	ble.n	80017b6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80017e2:	e006      	b.n	80017f2 <HD44780_PrintStr+0x18>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f817 	bl	8001820 <SendChar>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f4      	bne.n	80017e4 <HD44780_PrintStr+0xa>
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f812 	bl	800183c <Send>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2101      	movs	r1, #1
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f804 	bl	800183c <Send>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	460a      	mov	r2, r1
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	4613      	mov	r3, r2
 800184a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f023 030f 	bic.w	r3, r3, #15
 8001852:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	4313      	orrs	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f80b 	bl	800187e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001868:	7bba      	ldrb	r2, [r7, #14]
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	4313      	orrs	r3, r2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f804 	bl	800187e <Write4Bits>
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f808 	bl	80018a0 <ExpanderWrite>
  PulseEnable(value);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f820 	bl	80018d8 <PulseEnable>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <ExpanderWrite+0x30>)
 80018ac:	781a      	ldrb	r2, [r3, #0]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80018b6:	f107 020f 	add.w	r2, r7, #15
 80018ba:	230a      	movs	r3, #10
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2301      	movs	r3, #1
 80018c0:	214e      	movs	r1, #78	@ 0x4e
 80018c2:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <ExpanderWrite+0x34>)
 80018c4:	f001 fc3a 	bl	800313c <HAL_I2C_Master_Transmit>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200004d8 	.word	0x200004d8
 80018d4:	200004dc 	.word	0x200004dc

080018d8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ffd8 	bl	80018a0 <ExpanderWrite>
  DelayUS(20);
 80018f0:	2014      	movs	r0, #20
 80018f2:	f000 f837 	bl	8001964 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ffce 	bl	80018a0 <ExpanderWrite>
  DelayUS(20);
 8001904:	2014      	movs	r0, #20
 8001906:	f000 f82d 	bl	8001964 <DelayUS>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <DelayInit>:

static void DelayInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <DelayInit+0x48>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a0f      	ldr	r2, [pc, #60]	@ (800195c <DelayInit+0x48>)
 800191e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001922:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <DelayInit+0x48>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a0c      	ldr	r2, [pc, #48]	@ (800195c <DelayInit+0x48>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <DelayInit+0x4c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <DelayInit+0x4c>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <DelayInit+0x4c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <DelayInit+0x4c>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <DelayInit+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800194e:	bf00      	nop
  __ASM volatile ("NOP");
 8001950:	bf00      	nop
  __ASM volatile ("NOP");
 8001952:	bf00      	nop
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	e000edf0 	.word	0xe000edf0
 8001960:	e0001000 	.word	0xe0001000

08001964 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <DelayUS+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <DelayUS+0x44>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	0c9a      	lsrs	r2, r3, #18
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001980:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <DelayUS+0x48>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <DelayUS+0x48>)
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	429a      	cmp	r2, r3
 8001996:	d8f6      	bhi.n	8001986 <DelayUS+0x22>
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000020 	.word	0x20000020
 80019a8:	431bde83 	.word	0x431bde83
 80019ac:	e0001000 	.word	0xe0001000

080019b0 <decToBcd>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t decToBcd(uint8_t val) {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  return ((val / 10) << 4) | (val % 10);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <decToBcd+0x44>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	08db      	lsrs	r3, r3, #3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	b258      	sxtb	r0, r3
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <decToBcd+0x44>)
 80019ce:	fba3 1302 	umull	r1, r3, r3, r2
 80019d2:	08d9      	lsrs	r1, r3, #3
 80019d4:	460b      	mov	r3, r1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	4303      	orrs	r3, r0
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	cccccccd 	.word	0xcccccccd

080019f8 <setDS1307Time>:

uint8_t bcdToDec(uint8_t val) {
  return ((val >> 4) * 10) + (val & 0x0F);
}

void setDS1307Time(uint8_t set_hour, uint8_t set_min, uint8_t set_sec) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af04      	add	r7, sp, #16
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	460b      	mov	r3, r1
 8001a04:	71bb      	strb	r3, [r7, #6]
 8001a06:	4613      	mov	r3, r2
 8001a08:	717b      	strb	r3, [r7, #5]
  uint8_t data[3];

  data[0] = decToBcd(set_sec); // Giây
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ffcf 	bl	80019b0 <decToBcd>
 8001a12:	4603      	mov	r3, r0
 8001a14:	733b      	strb	r3, [r7, #12]
  data[1] = decToBcd(set_min); // Phút
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffc9 	bl	80019b0 <decToBcd>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	737b      	strb	r3, [r7, #13]
  data[2] = decToBcd(set_hour); // Giờ
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ffc3 	bl	80019b0 <decToBcd>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73bb      	strb	r3, [r7, #14]

  // Ghi dữ liệu vào DS1307
  HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x00, 1, data, 3, 1000); // Địa chỉ DS1307 là 0xD0
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2303      	movs	r3, #3
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2200      	movs	r2, #0
 8001a42:	21d0      	movs	r1, #208	@ 0xd0
 8001a44:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <setDS1307Time+0x5c>)
 8001a46:	f001 fee3 	bl	8003810 <HAL_I2C_Mem_Write>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200004dc 	.word	0x200004dc

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b0b6      	sub	sp, #216	@ 0xd8
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5e:	f000 ff27 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a62:	f000 f8eb 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a66:	f000 f9d7 	bl	8001e18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a6a:	f000 f92d 	bl	8001cc8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a6e:	f000 f959 	bl	8001d24 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001a72:	f000 f9a7 	bl	8001dc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001a76:	485d      	ldr	r0, [pc, #372]	@ (8001bec <main+0x194>)
 8001a78:	f003 f870 	bl	8004b5c <HAL_TIM_Base_Start>
  HD44780_Init(2);
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f7ff fda1 	bl	80015c4 <HD44780_Init>
  DS1307_Init(&hi2c1);
 8001a82:	485b      	ldr	r0, [pc, #364]	@ (8001bf0 <main+0x198>)
 8001a84:	f7ff fcd2 	bl	800142c <DS1307_Init>
  float t = DHT11();
 8001a88:	f7ff fc2c 	bl	80012e4 <DHT11>
 8001a8c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  if(t != 0)
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001a98:	f7ff fae8 	bl	800106c <__aeabi_fcmpeq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <main+0x52>
  {
	  temp = t;
 8001aa2:	4a54      	ldr	r2, [pc, #336]	@ (8001bf4 <main+0x19c>)
 8001aa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001aa8:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of I2C */
  osMutexDef(I2C);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  I2CHandle = osMutexCreate(osMutex(I2C));
 8001ab6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 ff85 	bl	80059ca <osMutexCreate>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf8 <main+0x1a0>)
 8001ac4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LCD */
  osMessageQDef(LCD, 5, 20);
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <main+0x1a4>)
 8001ac8:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8001acc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LCDHandle = osMessageCreate(osMessageQ(LCD), NULL);
 8001ad2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 f813 	bl	8005b04 <osMessageCreate>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a47      	ldr	r2, [pc, #284]	@ (8001c00 <main+0x1a8>)
 8001ae2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TX */
  osMessageQDef(TX, 10, 50);
 8001ae4:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <main+0x1ac>)
 8001ae6:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  TXHandle = osMessageCreate(osMessageQ(TX), NULL);
 8001af0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 f804 	bl	8005b04 <osMessageCreate>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a42      	ldr	r2, [pc, #264]	@ (8001c08 <main+0x1b0>)
 8001b00:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DHT11 */
  osThreadDef(DHT11, StartDHT11, osPriorityHigh, 0, 512);
 8001b02:	4b42      	ldr	r3, [pc, #264]	@ (8001c0c <main+0x1b4>)
 8001b04:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001b08:	461d      	mov	r5, r3
 8001b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DHT11Handle = osThreadCreate(osThread(DHT11), NULL);
 8001b16:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fef4 	bl	800590a <osThreadCreate>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a3a      	ldr	r2, [pc, #232]	@ (8001c10 <main+0x1b8>)
 8001b26:	6013      	str	r3, [r2, #0]

  /* definition and creation of DS1307 */
  osThreadDef(DS1307, StartIDS1307, osPriorityHigh, 0, 512);
 8001b28:	4b3a      	ldr	r3, [pc, #232]	@ (8001c14 <main+0x1bc>)
 8001b2a:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001b2e:	461d      	mov	r5, r3
 8001b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DS1307Handle = osThreadCreate(osThread(DS1307), NULL);
 8001b3c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fee1 	bl	800590a <osThreadCreate>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a33      	ldr	r2, [pc, #204]	@ (8001c18 <main+0x1c0>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RXTask */
  osThreadDef(RXTask, StartRX, osPriorityHigh, 0, 512);
 8001b4e:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <main+0x1c4>)
 8001b50:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001b54:	461d      	mov	r5, r3
 8001b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RXTaskHandle = osThreadCreate(osThread(RXTask), NULL);
 8001b62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fece 	bl	800590a <osThreadCreate>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <main+0x1c8>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCDTask */
  osThreadDef(LCDTask, StartLCD, osPriorityHigh, 0, 512);
 8001b74:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <main+0x1cc>)
 8001b76:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDTaskHandle = osThreadCreate(osThread(LCDTask), NULL);
 8001b88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 febb 	bl	800590a <osThreadCreate>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a24      	ldr	r2, [pc, #144]	@ (8001c28 <main+0x1d0>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* definition and creation of TXTask */
  osThreadDef(TXTask, StartTX, osPriorityNormal, 0, 512);
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <main+0x1d4>)
 8001b9c:	f107 0420 	add.w	r4, r7, #32
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TXTaskHandle = osThreadCreate(osThread(TXTask), NULL);
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fea8 	bl	800590a <osThreadCreate>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c30 <main+0x1d8>)
 8001bbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCDROW2 */
  osThreadDef(LCDROW2, StartTaskROW2, osPriorityIdle, 0, 512);
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <main+0x1dc>)
 8001bc2:	1d3c      	adds	r4, r7, #4
 8001bc4:	461d      	mov	r5, r3
 8001bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDROW2Handle = osThreadCreate(osThread(LCDROW2), NULL);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fe97 	bl	800590a <osThreadCreate>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4a16      	ldr	r2, [pc, #88]	@ (8001c38 <main+0x1e0>)
 8001be0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001be2:	f003 fe8b 	bl	80058fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001be6:	bf00      	nop
 8001be8:	e7fd      	b.n	8001be6 <main+0x18e>
 8001bea:	bf00      	nop
 8001bec:	20000530 	.word	0x20000530
 8001bf0:	200004dc 	.word	0x200004dc
 8001bf4:	2000001c 	.word	0x2000001c
 8001bf8:	200005e0 	.word	0x200005e0
 8001bfc:	0800bb90 	.word	0x0800bb90
 8001c00:	200005d8 	.word	0x200005d8
 8001c04:	0800bba0 	.word	0x0800bba0
 8001c08:	200005dc 	.word	0x200005dc
 8001c0c:	0800bbb8 	.word	0x0800bbb8
 8001c10:	200005c0 	.word	0x200005c0
 8001c14:	0800bbdc 	.word	0x0800bbdc
 8001c18:	200005c4 	.word	0x200005c4
 8001c1c:	0800bc00 	.word	0x0800bc00
 8001c20:	200005c8 	.word	0x200005c8
 8001c24:	0800bc24 	.word	0x0800bc24
 8001c28:	200005cc 	.word	0x200005cc
 8001c2c:	0800bc48 	.word	0x0800bc48
 8001c30:	200005d0 	.word	0x200005d0
 8001c34:	0800bc6c 	.word	0x0800bc6c
 8001c38:	200005d4 	.word	0x200005d4

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	@ 0x40
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	2228      	movs	r2, #40	@ 0x28
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f007 f9f1 	bl	8009032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	2302      	movs	r3, #2
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c7a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 fad9 	bl	800423c <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c90:	f000 fb98 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c94:	230f      	movs	r3, #15
 8001c96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fd46 	bl	8004740 <HAL_RCC_ClockConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cba:	f000 fb83 	bl	80023c4 <Error_Handler>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3740      	adds	r7, #64	@ 0x40
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cce:	4a13      	ldr	r2, [pc, #76]	@ (8001d1c <MX_I2C1_Init+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cd4:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <MX_I2C1_Init+0x58>)
 8001cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001ce6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001d06:	f001 f8d5 	bl	8002eb4 <HAL_I2C_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d10:	f000 fb58 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200004dc 	.word	0x200004dc
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	000186a0 	.word	0x000186a0

08001d24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d42:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc0 <MX_TIM1_Init+0x9c>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d48:	2247      	movs	r2, #71	@ 0x47
 8001d4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d6c:	4813      	ldr	r0, [pc, #76]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d6e:	f002 fea5 	bl	8004abc <HAL_TIM_Base_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d78:	f000 fb24 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	4619      	mov	r1, r3
 8001d88:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001d8a:	f003 f873 	bl	8004e74 <HAL_TIM_ConfigClockSource>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d94:	f000 fb16 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da0:	463b      	mov	r3, r7
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_TIM1_Init+0x98>)
 8001da6:	f003 fa55 	bl	8005254 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001db0:	f000 fb08 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000530 	.word	0x20000530
 8001dc0:	40012c00 	.word	0x40012c00

08001dc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <MX_USART1_UART_Init+0x50>)
 8001dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dd0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <MX_USART1_UART_Init+0x4c>)
 8001dfc:	f003 fa9a 	bl	8005334 <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e06:	f000 fadd 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000578 	.word	0x20000578
 8001e14:	40013800 	.word	0x40013800

08001e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e32:	f043 0310 	orr.w	r3, r3, #16
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e44:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a27      	ldr	r2, [pc, #156]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e4a:	f043 0320 	orr.w	r3, r3, #32
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <MX_GPIO_Init+0xd0>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e92:	4816      	ldr	r0, [pc, #88]	@ (8001eec <MX_GPIO_Init+0xd4>)
 8001e94:	f000 ffdd 	bl	8002e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e9e:	4814      	ldr	r0, [pc, #80]	@ (8001ef0 <MX_GPIO_Init+0xd8>)
 8001ea0:	f000 ffd7 	bl	8002e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ea4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480b      	ldr	r0, [pc, #44]	@ (8001eec <MX_GPIO_Init+0xd4>)
 8001ebe:	f000 fe2d 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ec2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <MX_GPIO_Init+0xd8>)
 8001edc:	f000 fe1e 	bl	8002b1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40010c00 	.word	0x40010c00

08001ef4 <StartDHT11>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDHT11 */
void StartDHT11(void const * argument)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
//osDelay(1000);
  for(;;)
  {
	  float t = DHT11();
 8001efc:	f7ff f9f2 	bl	80012e4 <DHT11>
 8001f00:	61f8      	str	r0, [r7, #28]
	  if(t != 0)
 8001f02:	f04f 0100 	mov.w	r1, #0
 8001f06:	69f8      	ldr	r0, [r7, #28]
 8001f08:	f7ff f8b0 	bl	800106c <__aeabi_fcmpeq>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <StartDHT11+0x24>
	  {
		  temp = t;
 8001f12:	4a0e      	ldr	r2, [pc, #56]	@ (8001f4c <StartDHT11+0x58>)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	6013      	str	r3, [r2, #0]
	  }
		char Mess[20];
		sprintf(Mess, "H: %0.1fH\n", temp);
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <StartDHT11+0x58>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fa83 	bl	8000428 <__aeabi_f2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	f107 0008 	add.w	r0, r7, #8
 8001f2a:	4909      	ldr	r1, [pc, #36]	@ (8001f50 <StartDHT11+0x5c>)
 8001f2c:	f006 fff2 	bl	8008f14 <siprintf>
		osMessagePut(TXHandle, (uint32_t)Mess, osWaitForever);
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <StartDHT11+0x60>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f107 0108 	add.w	r1, r7, #8
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fe09 	bl	8005b54 <osMessagePut>
      osDelay(5000);
 8001f42:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f46:	f003 fd2c 	bl	80059a2 <osDelay>
  {
 8001f4a:	e7d7      	b.n	8001efc <StartDHT11+0x8>
 8001f4c:	2000001c 	.word	0x2000001c
 8001f50:	0800bc88 	.word	0x0800bc88
 8001f54:	200005dc 	.word	0x200005dc

08001f58 <StartIDS1307>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIDS1307 */
void StartIDS1307(void const * argument)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIDS1307 */
  /* Infinite loop */
  for(;;)
  {
	  if (osMutexWait(I2CHandle, osWaitForever) == osOK)
 8001f60:	4b35      	ldr	r3, [pc, #212]	@ (8002038 <StartIDS1307+0xe0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fd47 	bl	80059fc <osMutexWait>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d15c      	bne.n	800202e <StartIDS1307+0xd6>
	  {
		  if(set_hour < 24 && set_min < 60 && set_sec < 60 && set_hour >= 0 && set_min >= 0 && set_sec >= 0)
 8001f74:	4b31      	ldr	r3, [pc, #196]	@ (800203c <StartIDS1307+0xe4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b17      	cmp	r3, #23
 8001f7a:	dc29      	bgt.n	8001fd0 <StartIDS1307+0x78>
 8001f7c:	4b30      	ldr	r3, [pc, #192]	@ (8002040 <StartIDS1307+0xe8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f82:	dc25      	bgt.n	8001fd0 <StartIDS1307+0x78>
 8001f84:	4b2f      	ldr	r3, [pc, #188]	@ (8002044 <StartIDS1307+0xec>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f8a:	dc21      	bgt.n	8001fd0 <StartIDS1307+0x78>
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <StartIDS1307+0xe4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db1d      	blt.n	8001fd0 <StartIDS1307+0x78>
 8001f94:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <StartIDS1307+0xe8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db19      	blt.n	8001fd0 <StartIDS1307+0x78>
 8001f9c:	4b29      	ldr	r3, [pc, #164]	@ (8002044 <StartIDS1307+0xec>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db15      	blt.n	8001fd0 <StartIDS1307+0x78>
		  {
			  setDS1307Time(set_hour, set_min, set_sec);
 8001fa4:	4b25      	ldr	r3, [pc, #148]	@ (800203c <StartIDS1307+0xe4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4a25      	ldr	r2, [pc, #148]	@ (8002040 <StartIDS1307+0xe8>)
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	b2d1      	uxtb	r1, r2
 8001fb0:	4a24      	ldr	r2, [pc, #144]	@ (8002044 <StartIDS1307+0xec>)
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd1e 	bl	80019f8 <setDS1307Time>
			  set_hour = 0xFF;
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <StartIDS1307+0xe4>)
 8001fbe:	22ff      	movs	r2, #255	@ 0xff
 8001fc0:	601a      	str	r2, [r3, #0]
			  set_min = 0xFF;
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <StartIDS1307+0xe8>)
 8001fc4:	22ff      	movs	r2, #255	@ 0xff
 8001fc6:	601a      	str	r2, [r3, #0]
			  set_sec = 0xFF;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <StartIDS1307+0xec>)
 8001fca:	22ff      	movs	r2, #255	@ 0xff
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e029      	b.n	8002024 <StartIDS1307+0xcc>
		  }
		  else
		  {
			hour = DS1307_GetHour();
 8001fd0:	f7ff fa9e 	bl	8001510 <DS1307_GetHour>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <StartIDS1307+0xf0>)
 8001fda:	701a      	strb	r2, [r3, #0]
			min = DS1307_GetMinute();
 8001fdc:	f7ff faa7 	bl	800152e <DS1307_GetMinute>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <StartIDS1307+0xf4>)
 8001fe6:	701a      	strb	r2, [r3, #0]
			sec = DS1307_GetSecond();
 8001fe8:	f7ff faad 	bl	8001546 <DS1307_GetSecond>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <StartIDS1307+0xf8>)
 8001ff2:	701a      	strb	r2, [r3, #0]
			char Mess[20];
			sprintf(Mess, "Time Now: %02d:%02d:%02d\n", hour, min,sec);
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <StartIDS1307+0xf0>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <StartIDS1307+0xf4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <StartIDS1307+0xf8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	f107 000c 	add.w	r0, r7, #12
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	460b      	mov	r3, r1
 800200c:	4911      	ldr	r1, [pc, #68]	@ (8002054 <StartIDS1307+0xfc>)
 800200e:	f006 ff81 	bl	8008f14 <siprintf>
			  osMessagePut(TXHandle, (uint32_t)Mess, osWaitForever);
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <StartIDS1307+0x100>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f107 010c 	add.w	r1, r7, #12
 800201a:	f04f 32ff 	mov.w	r2, #4294967295
 800201e:	4618      	mov	r0, r3
 8002020:	f003 fd98 	bl	8005b54 <osMessagePut>
		  }
			osMutexRelease(I2CHandle);
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <StartIDS1307+0xe0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f003 fd35 	bl	8005a98 <osMutexRelease>
	  }
	  osDelay(1000);
 800202e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002032:	f003 fcb6 	bl	80059a2 <osDelay>
	  if (osMutexWait(I2CHandle, osWaitForever) == osOK)
 8002036:	e793      	b.n	8001f60 <StartIDS1307+0x8>
 8002038:	200005e0 	.word	0x200005e0
 800203c:	20000010 	.word	0x20000010
 8002040:	20000014 	.word	0x20000014
 8002044:	20000018 	.word	0x20000018
 8002048:	200004d9 	.word	0x200004d9
 800204c:	200004da 	.word	0x200004da
 8002050:	200004db 	.word	0x200004db
 8002054:	0800bc94 	.word	0x0800bc94
 8002058:	200005dc 	.word	0x200005dc

0800205c <StartRX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRX */
void StartRX(void const * argument)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b0a9      	sub	sp, #164	@ 0xa4
 8002060:	af02      	add	r7, sp, #8
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRX */
  /* Infinite loop */
	char Rx_data[50];
  for(;;)
  {
		memset(Rx_data,0,sizeof(Rx_data));
 8002064:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002068:	2232      	movs	r2, #50	@ 0x32
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f006 ffe0 	bl	8009032 <memset>
		HAL_UART_Receive(&huart1, (uint8_t*)Rx_data, sizeof(Rx_data), 500);
 8002072:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8002076:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800207a:	2232      	movs	r2, #50	@ 0x32
 800207c:	485c      	ldr	r0, [pc, #368]	@ (80021f0 <StartRX+0x194>)
 800207e:	f003 fa34 	bl	80054ea <HAL_UART_Receive>
		if(strlen(Rx_data) > 0)
 8002082:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80ab 	beq.w	80021e4 <StartRX+0x188>
		{
			if (Rx_data[0] == 'S' && Rx_data[1] == 'T' && strlen(Rx_data) > 5)
 800208e:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8002092:	2b53      	cmp	r3, #83	@ 0x53
 8002094:	d149      	bne.n	800212a <StartRX+0xce>
 8002096:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800209a:	2b54      	cmp	r3, #84	@ 0x54
 800209c:	d145      	bne.n	800212a <StartRX+0xce>
 800209e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe f854 	bl	8000150 <strlen>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d93d      	bls.n	800212a <StartRX+0xce>
			{
				int set_h, set_m, set_s;
				if (sscanf(Rx_data, "ST%d%d%d", &set_h, &set_m, &set_s) == 3)
 80020ae:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80020b2:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80020b6:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80020ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	460b      	mov	r3, r1
 80020c2:	494c      	ldr	r1, [pc, #304]	@ (80021f4 <StartRX+0x198>)
 80020c4:	f006 ff46 	bl	8008f54 <siscanf>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d11d      	bne.n	800210a <StartRX+0xae>
				{
					set_hour = set_h;
 80020ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020d0:	4a49      	ldr	r2, [pc, #292]	@ (80021f8 <StartRX+0x19c>)
 80020d2:	6013      	str	r3, [r2, #0]
					set_min = set_m;
 80020d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020d6:	4a49      	ldr	r2, [pc, #292]	@ (80021fc <StartRX+0x1a0>)
 80020d8:	6013      	str	r3, [r2, #0]
					set_sec = set_s;
 80020da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020dc:	4a48      	ldr	r2, [pc, #288]	@ (8002200 <StartRX+0x1a4>)
 80020de:	6013      	str	r3, [r2, #0]
					char Mess[] = "Set DS1307\n";
 80020e0:	4a48      	ldr	r2, [pc, #288]	@ (8002204 <StartRX+0x1a8>)
 80020e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					osMessagePut(TXHandle, (uint32_t)Mess, osWaitForever);
 80020ec:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <StartRX+0x1ac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 fd2b 	bl	8005b54 <osMessagePut>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80020fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002102:	4842      	ldr	r0, [pc, #264]	@ (800220c <StartRX+0x1b0>)
 8002104:	f000 febd 	bl	8002e82 <HAL_GPIO_TogglePin>
			{
 8002108:	e06c      	b.n	80021e4 <StartRX+0x188>
				}
				else
				{
					char Mess[] = "Invalid\n";
 800210a:	4a41      	ldr	r2, [pc, #260]	@ (8002210 <StartRX+0x1b4>)
 800210c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002110:	ca07      	ldmia	r2, {r0, r1, r2}
 8002112:	c303      	stmia	r3!, {r0, r1}
 8002114:	701a      	strb	r2, [r3, #0]
					osMessagePut(TXHandle, (uint32_t)Mess, osWaitForever);
 8002116:	4b3c      	ldr	r3, [pc, #240]	@ (8002208 <StartRX+0x1ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800211e:	f04f 32ff 	mov.w	r2, #4294967295
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fd16 	bl	8005b54 <osMessagePut>
			{
 8002128:	e05c      	b.n	80021e4 <StartRX+0x188>
				}
			}
			else if (Rx_data[0] == 'S' && Rx_data[1] == 'P')
 800212a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800212e:	2b53      	cmp	r3, #83	@ 0x53
 8002130:	d121      	bne.n	8002176 <StartRX+0x11a>
 8002132:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8002136:	2b50      	cmp	r3, #80	@ 0x50
 8002138:	d11d      	bne.n	8002176 <StartRX+0x11a>
			{
				char *p = &Rx_data[3];
 800213a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800213e:	3303      	adds	r3, #3
 8002140:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				osMessagePut(LCDHandle, (uint32_t)p, osWaitForever);
 8002144:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <StartRX+0x1b8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	4618      	mov	r0, r3
 8002152:	f003 fcff 	bl	8005b54 <osMessagePut>
				char Mess[] = "Print To LCD\n";
 8002156:	4b30      	ldr	r3, [pc, #192]	@ (8002218 <StartRX+0x1bc>)
 8002158:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800215c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800215e:	c407      	stmia	r4!, {r0, r1, r2}
 8002160:	8023      	strh	r3, [r4, #0]
				osMessagePut(TXHandle, (uint32_t)Mess, osWaitForever);
 8002162:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <StartRX+0x1ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800216a:	f04f 32ff 	mov.w	r2, #4294967295
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fcf0 	bl	8005b54 <osMessagePut>
			{
 8002174:	e036      	b.n	80021e4 <StartRX+0x188>
			}
			else if (Rx_data[0] == 'G')
 8002176:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800217a:	2b47      	cmp	r3, #71	@ 0x47
 800217c:	d118      	bne.n	80021b0 <StartRX+0x154>
			{
				char Mess[20];
				sprintf(Mess, "Time: %02d:%02d:%02d\n", hour, min,sec);
 800217e:	4b27      	ldr	r3, [pc, #156]	@ (800221c <StartRX+0x1c0>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	4b26      	ldr	r3, [pc, #152]	@ (8002220 <StartRX+0x1c4>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	4b26      	ldr	r3, [pc, #152]	@ (8002224 <StartRX+0x1c8>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f107 0018 	add.w	r0, r7, #24
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	460b      	mov	r3, r1
 8002196:	4924      	ldr	r1, [pc, #144]	@ (8002228 <StartRX+0x1cc>)
 8002198:	f006 febc 	bl	8008f14 <siprintf>
				osMessagePut(TXHandle, (uint32_t)Mess, osWaitForever);
 800219c:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <StartRX+0x1ac>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f107 0118 	add.w	r1, r7, #24
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 fcd3 	bl	8005b54 <osMessagePut>
 80021ae:	e019      	b.n	80021e4 <StartRX+0x188>
			}
			else if(strlen(Rx_data)>1)
 80021b0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fd ffcb 	bl	8000150 <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d911      	bls.n	80021e4 <StartRX+0x188>
			{
				char Err[] = "Non_true_form\n";
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <StartRX+0x1d0>)
 80021c2:	f107 0408 	add.w	r4, r7, #8
 80021c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c8:	c407      	stmia	r4!, {r0, r1, r2}
 80021ca:	8023      	strh	r3, [r4, #0]
 80021cc:	3402      	adds	r4, #2
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	7023      	strb	r3, [r4, #0]
				osMessagePut(TXHandle, (uint32_t)Err, osWaitForever);
 80021d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <StartRX+0x1ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f107 0108 	add.w	r1, r7, #8
 80021da:	f04f 32ff 	mov.w	r2, #4294967295
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fcb8 	bl	8005b54 <osMessagePut>
			}
		}
      osDelay(500);
 80021e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80021e8:	f003 fbdb 	bl	80059a2 <osDelay>
		memset(Rx_data,0,sizeof(Rx_data));
 80021ec:	e73a      	b.n	8002064 <StartRX+0x8>
 80021ee:	bf00      	nop
 80021f0:	20000578 	.word	0x20000578
 80021f4:	0800bcb0 	.word	0x0800bcb0
 80021f8:	20000010 	.word	0x20000010
 80021fc:	20000014 	.word	0x20000014
 8002200:	20000018 	.word	0x20000018
 8002204:	0800bcd4 	.word	0x0800bcd4
 8002208:	200005dc 	.word	0x200005dc
 800220c:	40011000 	.word	0x40011000
 8002210:	0800bce0 	.word	0x0800bce0
 8002214:	200005d8 	.word	0x200005d8
 8002218:	0800bcec 	.word	0x0800bcec
 800221c:	200004d9 	.word	0x200004d9
 8002220:	200004da 	.word	0x200004da
 8002224:	200004db 	.word	0x200004db
 8002228:	0800bcbc 	.word	0x0800bcbc
 800222c:	0800bcfc 	.word	0x0800bcfc

08002230 <StartLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD */
void StartLCD(void const * argument)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	@ 0x28
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD */
  /* Infinite loop */
  char LCD_ROW_1[20];
  for(;;)
  {
	  if (osMutexWait(I2CHandle, osWaitForever) == osOK)
 8002238:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <StartLCD+0x94>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	4618      	mov	r0, r3
 8002242:	f003 fbdb 	bl	80059fc <osMutexWait>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d135      	bne.n	80022b8 <StartLCD+0x88>
	  {
		  HD44780_SetCursor(0,0);
 800224c:	2100      	movs	r1, #0
 800224e:	2000      	movs	r0, #0
 8002250:	f7ff fa52 	bl	80016f8 <HD44780_SetCursor>
//		  HD44780_PrintStr("                 ");
		  HD44780_SetCursor(0,0);
 8002254:	2100      	movs	r1, #0
 8002256:	2000      	movs	r0, #0
 8002258:	f7ff fa4e 	bl	80016f8 <HD44780_SetCursor>
		  sprintf(LCD_ROW_1, "%.1f%%", temp);
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <StartLCD+0x98>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f8e1 	bl	8000428 <__aeabi_f2d>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	f107 000c 	add.w	r0, r7, #12
 800226e:	4917      	ldr	r1, [pc, #92]	@ (80022cc <StartLCD+0x9c>)
 8002270:	f006 fe50 	bl	8008f14 <siprintf>
		  HD44780_PrintStr(LCD_ROW_1);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff faae 	bl	80017da <HD44780_PrintStr>
		  sprintf(LCD_ROW_1, "%02d:%02d:%02d   ", hour, min,sec);
 800227e:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <StartLCD+0xa0>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <StartLCD+0xa4>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <StartLCD+0xa8>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f107 000c 	add.w	r0, r7, #12
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	460b      	mov	r3, r1
 8002296:	4911      	ldr	r1, [pc, #68]	@ (80022dc <StartLCD+0xac>)
 8002298:	f006 fe3c 	bl	8008f14 <siprintf>
		  HD44780_SetCursor(8,0);
 800229c:	2100      	movs	r1, #0
 800229e:	2008      	movs	r0, #8
 80022a0:	f7ff fa2a 	bl	80016f8 <HD44780_SetCursor>
		  HD44780_PrintStr(LCD_ROW_1);
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fa96 	bl	80017da <HD44780_PrintStr>
		  osMutexRelease(I2CHandle);
 80022ae:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <StartLCD+0x94>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fbf0 	bl	8005a98 <osMutexRelease>
	  }
	  osDelay(300);
 80022b8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80022bc:	f003 fb71 	bl	80059a2 <osDelay>
	  if (osMutexWait(I2CHandle, osWaitForever) == osOK)
 80022c0:	e7ba      	b.n	8002238 <StartLCD+0x8>
 80022c2:	bf00      	nop
 80022c4:	200005e0 	.word	0x200005e0
 80022c8:	2000001c 	.word	0x2000001c
 80022cc:	0800bd0c 	.word	0x0800bd0c
 80022d0:	200004d9 	.word	0x200004d9
 80022d4:	200004da 	.word	0x200004da
 80022d8:	200004db 	.word	0x200004db
 80022dc:	0800bd14 	.word	0x0800bd14

080022e0 <StartTX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTX */
void StartTX(void const * argument)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTX */
  /* Infinite loop */
	osEvent event;
  for(;;){
	  event = osMessageGet(TXHandle, osWaitForever);
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <StartTX+0x44>)
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fc6d 	bl	8005bd4 <osMessageGet>
	  if (event.status == osEventMessage){
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d10d      	bne.n	800231c <StartTX+0x3c>
		  HAL_UART_Transmit(&huart1, (uint8_t*)event.value.v, strlen((char*)event.value.v), HAL_MAX_DELAY);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	461c      	mov	r4, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ff22 	bl	8000150 <strlen>
 800230c:	4603      	mov	r3, r0
 800230e:	b29a      	uxth	r2, r3
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	4621      	mov	r1, r4
 8002316:	4804      	ldr	r0, [pc, #16]	@ (8002328 <StartTX+0x48>)
 8002318:	f003 f85c 	bl	80053d4 <HAL_UART_Transmit>
	  }
	  osDelay(200);
 800231c:	20c8      	movs	r0, #200	@ 0xc8
 800231e:	f003 fb40 	bl	80059a2 <osDelay>
	  event = osMessageGet(TXHandle, osWaitForever);
 8002322:	e7e1      	b.n	80022e8 <StartTX+0x8>
 8002324:	200005dc 	.word	0x200005dc
 8002328:	20000578 	.word	0x20000578

0800232c <StartTaskROW2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskROW2 */
void StartTaskROW2(void const * argument)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskROW2 */
  /* Infinite loop */
	osEvent event;
  for(;;){
	  event = osMessageGet(LCDHandle, osWaitForever);
 8002334:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <StartTaskROW2+0x68>)
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	4618      	mov	r0, r3
 8002342:	f003 fc47 	bl	8005bd4 <osMessageGet>
	  if (event.status == osEventMessage){
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b10      	cmp	r3, #16
 800234a:	d11d      	bne.n	8002388 <StartTaskROW2+0x5c>
		  if (osMutexWait(I2CHandle, osWaitForever) == osOK){
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <StartTaskROW2+0x6c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	4618      	mov	r0, r3
 8002356:	f003 fb51 	bl	80059fc <osMutexWait>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d113      	bne.n	8002388 <StartTaskROW2+0x5c>
			  HD44780_SetCursor(0,1);
 8002360:	2101      	movs	r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff f9c8 	bl	80016f8 <HD44780_SetCursor>
			  HD44780_PrintStr("                 ");
 8002368:	480c      	ldr	r0, [pc, #48]	@ (800239c <StartTaskROW2+0x70>)
 800236a:	f7ff fa36 	bl	80017da <HD44780_PrintStr>
			  HD44780_SetCursor(0,1);
 800236e:	2101      	movs	r1, #1
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff f9c1 	bl	80016f8 <HD44780_SetCursor>
			  HD44780_PrintStr((char *)event.value.v);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fa2e 	bl	80017da <HD44780_PrintStr>
			  osMutexRelease(I2CHandle);
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <StartTaskROW2+0x6c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fb88 	bl	8005a98 <osMutexRelease>
		  }
	  }
	  osDelay(500);
 8002388:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800238c:	f003 fb09 	bl	80059a2 <osDelay>
	  event = osMessageGet(LCDHandle, osWaitForever);
 8002390:	e7d0      	b.n	8002334 <StartTaskROW2+0x8>
 8002392:	bf00      	nop
 8002394:	200005d8 	.word	0x200005d8
 8002398:	200005e0 	.word	0x200005e0
 800239c:	0800bd28 	.word	0x0800bd28

080023a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023b2:	f000 fa93 	bl	80028dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40000400 	.word	0x40000400

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <Error_Handler+0x8>

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023d6:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <HAL_MspInit+0x68>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a17      	ldr	r2, [pc, #92]	@ (8002438 <HAL_MspInit+0x68>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6193      	str	r3, [r2, #24]
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_MspInit+0x68>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_MspInit+0x68>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <HAL_MspInit+0x68>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	61d3      	str	r3, [r2, #28]
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_MspInit+0x68>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	210f      	movs	r1, #15
 800240a:	f06f 0001 	mvn.w	r0, #1
 800240e:	f000 fb5a 	bl	8002ac6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_MspInit+0x6c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	4a04      	ldr	r2, [pc, #16]	@ (800243c <HAL_MspInit+0x6c>)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40010000 	.word	0x40010000

08002440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a15      	ldr	r2, [pc, #84]	@ (80024b0 <HAL_I2C_MspInit+0x70>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d123      	bne.n	80024a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 8002466:	f043 0308 	orr.w	r3, r3, #8
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002478:	23c0      	movs	r3, #192	@ 0xc0
 800247a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247c:	2312      	movs	r3, #18
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	4619      	mov	r1, r3
 800248a:	480b      	ldr	r0, [pc, #44]	@ (80024b8 <HAL_I2C_MspInit+0x78>)
 800248c:	f000 fb46 	bl	8002b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 8002496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800249a:	61d3      	str	r3, [r2, #28]
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_I2C_MspInit+0x74>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024a8:	bf00      	nop
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010c00 	.word	0x40010c00

080024bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <HAL_TIM_Base_MspInit+0x34>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10b      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_TIM_Base_MspInit+0x38>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	4a08      	ldr	r2, [pc, #32]	@ (80024f4 <HAL_TIM_Base_MspInit+0x38>)
 80024d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024d8:	6193      	str	r3, [r2, #24]
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_TIM_Base_MspInit+0x38>)
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1c      	ldr	r2, [pc, #112]	@ (8002584 <HAL_UART_MspInit+0x8c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d131      	bne.n	800257c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_UART_MspInit+0x90>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a1a      	ldr	r2, [pc, #104]	@ (8002588 <HAL_UART_MspInit+0x90>)
 800251e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_UART_MspInit+0x90>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_UART_MspInit+0x90>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a14      	ldr	r2, [pc, #80]	@ (8002588 <HAL_UART_MspInit+0x90>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_UART_MspInit+0x90>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800254c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	4619      	mov	r1, r3
 800255c:	480b      	ldr	r0, [pc, #44]	@ (800258c <HAL_UART_MspInit+0x94>)
 800255e:	f000 fadd 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	4619      	mov	r1, r3
 8002576:	4805      	ldr	r0, [pc, #20]	@ (800258c <HAL_UART_MspInit+0x94>)
 8002578:	f000 fad0 	bl	8002b1c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800257c:	bf00      	nop
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40013800 	.word	0x40013800
 8002588:	40021000 	.word	0x40021000
 800258c:	40010800 	.word	0x40010800

08002590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	@ 0x38
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80025a6:	4b34      	ldr	r3, [pc, #208]	@ (8002678 <HAL_InitTick+0xe8>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a33      	ldr	r2, [pc, #204]	@ (8002678 <HAL_InitTick+0xe8>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	61d3      	str	r3, [r2, #28]
 80025b2:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <HAL_InitTick+0xe8>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025be:	f107 0210 	add.w	r2, r7, #16
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 fa29 	bl	8004a20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025d8:	f002 f9fa 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 80025dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80025de:	e004      	b.n	80025ea <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025e0:	f002 f9f6 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 80025e4:	4603      	mov	r3, r0
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ec:	4a23      	ldr	r2, [pc, #140]	@ (800267c <HAL_InitTick+0xec>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0c9b      	lsrs	r3, r3, #18
 80025f4:	3b01      	subs	r3, #1
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80025f8:	4b21      	ldr	r3, [pc, #132]	@ (8002680 <HAL_InitTick+0xf0>)
 80025fa:	4a22      	ldr	r2, [pc, #136]	@ (8002684 <HAL_InitTick+0xf4>)
 80025fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80025fe:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <HAL_InitTick+0xf0>)
 8002600:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002604:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002606:	4a1e      	ldr	r2, [pc, #120]	@ (8002680 <HAL_InitTick+0xf0>)
 8002608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800260c:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <HAL_InitTick+0xf0>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <HAL_InitTick+0xf0>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_InitTick+0xf0>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800261e:	4818      	ldr	r0, [pc, #96]	@ (8002680 <HAL_InitTick+0xf0>)
 8002620:	f002 fa4c 	bl	8004abc <HAL_TIM_Base_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800262a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11b      	bne.n	800266a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002632:	4813      	ldr	r0, [pc, #76]	@ (8002680 <HAL_InitTick+0xf0>)
 8002634:	f002 fadc 	bl	8004bf0 <HAL_TIM_Base_Start_IT>
 8002638:	4603      	mov	r3, r0
 800263a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800263e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002642:	2b00      	cmp	r3, #0
 8002644:	d111      	bne.n	800266a <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002646:	201d      	movs	r0, #29
 8002648:	f000 fa59 	bl	8002afe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b0f      	cmp	r3, #15
 8002650:	d808      	bhi.n	8002664 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002652:	2200      	movs	r2, #0
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	201d      	movs	r0, #29
 8002658:	f000 fa35 	bl	8002ac6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800265c:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <HAL_InitTick+0xf8>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e002      	b.n	800266a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800266a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800266e:	4618      	mov	r0, r3
 8002670:	3738      	adds	r7, #56	@ 0x38
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	431bde83 	.word	0x431bde83
 8002680:	200005e4 	.word	0x200005e4
 8002684:	40000400 	.word	0x40000400
 8002688:	20000024 	.word	0x20000024

0800268c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <NMI_Handler+0x4>

08002694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <HardFault_Handler+0x4>

0800269c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <MemManage_Handler+0x4>

080026a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <BusFault_Handler+0x4>

080026ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <UsageFault_Handler+0x4>

080026b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <TIM3_IRQHandler+0x10>)
 80026c6:	f002 fae5 	bl	8004c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200005e4 	.word	0x200005e4

080026d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return 1;
 80026d8:	2301      	movs	r3, #1
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <_kill>:

int _kill(int pid, int sig)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ec:	f006 fd4a 	bl	8009184 <__errno>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2216      	movs	r2, #22
 80026f4:	601a      	str	r2, [r3, #0]
  return -1;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_exit>:

void _exit (int status)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800270a:	f04f 31ff 	mov.w	r1, #4294967295
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffe7 	bl	80026e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <_exit+0x12>

08002718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e00a      	b.n	8002740 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800272a:	f3af 8000 	nop.w
 800272e:	4601      	mov	r1, r0
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	60ba      	str	r2, [r7, #8]
 8002736:	b2ca      	uxtb	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	429a      	cmp	r2, r3
 8002746:	dbf0      	blt.n	800272a <_read+0x12>
  }

  return len;
 8002748:	687b      	ldr	r3, [r7, #4]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e009      	b.n	8002778 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	60ba      	str	r2, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	429a      	cmp	r2, r3
 800277e:	dbf1      	blt.n	8002764 <_write+0x12>
  }
  return len;
 8002780:	687b      	ldr	r3, [r7, #4]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_close>:

int _close(int file)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027b0:	605a      	str	r2, [r3, #4]
  return 0;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <_isatty>:

int _isatty(int file)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
	...

080027ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f4:	4a14      	ldr	r2, [pc, #80]	@ (8002848 <_sbrk+0x5c>)
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <_sbrk+0x60>)
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <_sbrk+0x64>)
 800280a:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <_sbrk+0x68>)
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d207      	bcs.n	800282c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800281c:	f006 fcb2 	bl	8009184 <__errno>
 8002820:	4603      	mov	r3, r0
 8002822:	220c      	movs	r2, #12
 8002824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
 800282a:	e009      	b.n	8002840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <_sbrk+0x64>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	4a05      	ldr	r2, [pc, #20]	@ (8002850 <_sbrk+0x64>)
 800283c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20005000 	.word	0x20005000
 800284c:	00000400 	.word	0x00000400
 8002850:	2000062c 	.word	0x2000062c
 8002854:	200048d8 	.word	0x200048d8

08002858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002864:	f7ff fff8 	bl	8002858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002868:	480b      	ldr	r0, [pc, #44]	@ (8002898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800286a:	490c      	ldr	r1, [pc, #48]	@ (800289c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800286c:	4a0c      	ldr	r2, [pc, #48]	@ (80028a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002870:	e002      	b.n	8002878 <LoopCopyDataInit>

08002872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002876:	3304      	adds	r3, #4

08002878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800287c:	d3f9      	bcc.n	8002872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002880:	4c09      	ldr	r4, [pc, #36]	@ (80028a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002884:	e001      	b.n	800288a <LoopFillZerobss>

08002886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002888:	3204      	adds	r2, #4

0800288a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800288c:	d3fb      	bcc.n	8002886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800288e:	f006 fc7f 	bl	8009190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002892:	f7ff f8e1 	bl	8001a58 <main>
  bx lr
 8002896:	4770      	bx	lr
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800289c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80028a0:	0800c114 	.word	0x0800c114
  ldr r2, =_sbss
 80028a4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80028a8:	200048d4 	.word	0x200048d4

080028ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC1_2_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_Init+0x28>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <HAL_Init+0x28>)
 80028ba:	f043 0310 	orr.w	r3, r3, #16
 80028be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f000 f8f5 	bl	8002ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	200f      	movs	r0, #15
 80028c8:	f7ff fe62 	bl	8002590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f7ff fd80 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40022000 	.word	0x40022000

080028dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_IncTick+0x1c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_IncTick+0x20>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	4a03      	ldr	r2, [pc, #12]	@ (80028fc <HAL_IncTick+0x20>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000028 	.word	0x20000028
 80028fc:	20000630 	.word	0x20000630

08002900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b02      	ldr	r3, [pc, #8]	@ (8002910 <HAL_GetTick+0x10>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000630 	.word	0x20000630

08002914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800291c:	f7ff fff0 	bl	8002900 <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d005      	beq.n	800293a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <HAL_Delay+0x44>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800293a:	bf00      	nop
 800293c:	f7ff ffe0 	bl	8002900 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	429a      	cmp	r2, r3
 800294a:	d8f7      	bhi.n	800293c <HAL_Delay+0x28>
  {
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000028 	.word	0x20000028

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4906      	ldr	r1, [pc, #24]	@ (80029f4 <__NVIC_EnableIRQ+0x34>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0a      	blt.n	8002a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	490c      	ldr	r1, [pc, #48]	@ (8002a44 <__NVIC_SetPriority+0x4c>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a20:	e00a      	b.n	8002a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4908      	ldr	r1, [pc, #32]	@ (8002a48 <__NVIC_SetPriority+0x50>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	440b      	add	r3, r1
 8002a36:	761a      	strb	r2, [r3, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	@ 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f1c3 0307 	rsb	r3, r3, #7
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	bf28      	it	cs
 8002a6a:	2304      	movcs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d902      	bls.n	8002a7c <NVIC_EncodePriority+0x30>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b03      	subs	r3, #3
 8002a7a:	e000      	b.n	8002a7e <NVIC_EncodePriority+0x32>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a94:	f04f 31ff 	mov.w	r1, #4294967295
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	4313      	orrs	r3, r2
         );
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ff4f 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad8:	f7ff ff64 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	6978      	ldr	r0, [r7, #20]
 8002ae4:	f7ff ffb2 	bl	8002a4c <NVIC_EncodePriority>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff81 	bl	80029f8 <__NVIC_SetPriority>
}
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff57 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b08b      	sub	sp, #44	@ 0x2c
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2e:	e169      	b.n	8002e04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b30:	2201      	movs	r2, #1
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f040 8158 	bne.w	8002dfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a9a      	ldr	r2, [pc, #616]	@ (8002dbc <HAL_GPIO_Init+0x2a0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d05e      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b58:	4a98      	ldr	r2, [pc, #608]	@ (8002dbc <HAL_GPIO_Init+0x2a0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d875      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b5e:	4a98      	ldr	r2, [pc, #608]	@ (8002dc0 <HAL_GPIO_Init+0x2a4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d058      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b64:	4a96      	ldr	r2, [pc, #600]	@ (8002dc0 <HAL_GPIO_Init+0x2a4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d86f      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b6a:	4a96      	ldr	r2, [pc, #600]	@ (8002dc4 <HAL_GPIO_Init+0x2a8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d052      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b70:	4a94      	ldr	r2, [pc, #592]	@ (8002dc4 <HAL_GPIO_Init+0x2a8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d869      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b76:	4a94      	ldr	r2, [pc, #592]	@ (8002dc8 <HAL_GPIO_Init+0x2ac>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d04c      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b7c:	4a92      	ldr	r2, [pc, #584]	@ (8002dc8 <HAL_GPIO_Init+0x2ac>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d863      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b82:	4a92      	ldr	r2, [pc, #584]	@ (8002dcc <HAL_GPIO_Init+0x2b0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d046      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
 8002b88:	4a90      	ldr	r2, [pc, #576]	@ (8002dcc <HAL_GPIO_Init+0x2b0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d85d      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b8e:	2b12      	cmp	r3, #18
 8002b90:	d82a      	bhi.n	8002be8 <HAL_GPIO_Init+0xcc>
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d859      	bhi.n	8002c4a <HAL_GPIO_Init+0x12e>
 8002b96:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <HAL_GPIO_Init+0x80>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002c17 	.word	0x08002c17
 8002ba0:	08002bf1 	.word	0x08002bf1
 8002ba4:	08002c03 	.word	0x08002c03
 8002ba8:	08002c45 	.word	0x08002c45
 8002bac:	08002c4b 	.word	0x08002c4b
 8002bb0:	08002c4b 	.word	0x08002c4b
 8002bb4:	08002c4b 	.word	0x08002c4b
 8002bb8:	08002c4b 	.word	0x08002c4b
 8002bbc:	08002c4b 	.word	0x08002c4b
 8002bc0:	08002c4b 	.word	0x08002c4b
 8002bc4:	08002c4b 	.word	0x08002c4b
 8002bc8:	08002c4b 	.word	0x08002c4b
 8002bcc:	08002c4b 	.word	0x08002c4b
 8002bd0:	08002c4b 	.word	0x08002c4b
 8002bd4:	08002c4b 	.word	0x08002c4b
 8002bd8:	08002c4b 	.word	0x08002c4b
 8002bdc:	08002c4b 	.word	0x08002c4b
 8002be0:	08002bf9 	.word	0x08002bf9
 8002be4:	08002c0d 	.word	0x08002c0d
 8002be8:	4a79      	ldr	r2, [pc, #484]	@ (8002dd0 <HAL_GPIO_Init+0x2b4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bee:	e02c      	b.n	8002c4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	623b      	str	r3, [r7, #32]
          break;
 8002bf6:	e029      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	623b      	str	r3, [r7, #32]
          break;
 8002c00:	e024      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	3308      	adds	r3, #8
 8002c08:	623b      	str	r3, [r7, #32]
          break;
 8002c0a:	e01f      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	330c      	adds	r3, #12
 8002c12:	623b      	str	r3, [r7, #32]
          break;
 8002c14:	e01a      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	623b      	str	r3, [r7, #32]
          break;
 8002c22:	e013      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	611a      	str	r2, [r3, #16]
          break;
 8002c36:	e009      	b.n	8002c4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	615a      	str	r2, [r3, #20]
          break;
 8002c42:	e003      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
          break;
 8002c48:	e000      	b.n	8002c4c <HAL_GPIO_Init+0x130>
          break;
 8002c4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2bff      	cmp	r3, #255	@ 0xff
 8002c50:	d801      	bhi.n	8002c56 <HAL_GPIO_Init+0x13a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	e001      	b.n	8002c5a <HAL_GPIO_Init+0x13e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2bff      	cmp	r3, #255	@ 0xff
 8002c60:	d802      	bhi.n	8002c68 <HAL_GPIO_Init+0x14c>
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	e002      	b.n	8002c6e <HAL_GPIO_Init+0x152>
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	3b08      	subs	r3, #8
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	210f      	movs	r1, #15
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	401a      	ands	r2, r3
 8002c80:	6a39      	ldr	r1, [r7, #32]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80b1 	beq.w	8002dfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a4c      	ldr	r2, [pc, #304]	@ (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd4 <HAL_GPIO_Init+0x2b8>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cb4:	4a48      	ldr	r2, [pc, #288]	@ (8002dd8 <HAL_GPIO_Init+0x2bc>)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220f      	movs	r2, #15
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a40      	ldr	r2, [pc, #256]	@ (8002ddc <HAL_GPIO_Init+0x2c0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_GPIO_Init+0x1ec>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3f      	ldr	r2, [pc, #252]	@ (8002de0 <HAL_GPIO_Init+0x2c4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00d      	beq.n	8002d04 <HAL_GPIO_Init+0x1e8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3e      	ldr	r2, [pc, #248]	@ (8002de4 <HAL_GPIO_Init+0x2c8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <HAL_GPIO_Init+0x1e4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8002de8 <HAL_GPIO_Init+0x2cc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_GPIO_Init+0x1e0>
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e006      	b.n	8002d0a <HAL_GPIO_Init+0x1ee>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e004      	b.n	8002d0a <HAL_GPIO_Init+0x1ee>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e002      	b.n	8002d0a <HAL_GPIO_Init+0x1ee>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_GPIO_Init+0x1ee>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	f002 0203 	and.w	r2, r2, #3
 8002d10:	0092      	lsls	r2, r2, #2
 8002d12:	4093      	lsls	r3, r2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d1a:	492f      	ldr	r1, [pc, #188]	@ (8002dd8 <HAL_GPIO_Init+0x2bc>)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d006      	beq.n	8002d42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d34:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	492c      	ldr	r1, [pc, #176]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]
 8002d40:	e006      	b.n	8002d50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d42:	4b2a      	ldr	r3, [pc, #168]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	4928      	ldr	r1, [pc, #160]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d5c:	4b23      	ldr	r3, [pc, #140]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	4922      	ldr	r1, [pc, #136]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d6a:	4b20      	ldr	r3, [pc, #128]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	491e      	ldr	r1, [pc, #120]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d84:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4918      	ldr	r1, [pc, #96]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
 8002d90:	e006      	b.n	8002da0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4914      	ldr	r1, [pc, #80]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d021      	beq.n	8002df0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	490e      	ldr	r1, [pc, #56]	@ (8002dec <HAL_GPIO_Init+0x2d0>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e021      	b.n	8002dfe <HAL_GPIO_Init+0x2e2>
 8002dba:	bf00      	nop
 8002dbc:	10320000 	.word	0x10320000
 8002dc0:	10310000 	.word	0x10310000
 8002dc4:	10220000 	.word	0x10220000
 8002dc8:	10210000 	.word	0x10210000
 8002dcc:	10120000 	.word	0x10120000
 8002dd0:	10110000 	.word	0x10110000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40010800 	.word	0x40010800
 8002de0:	40010c00 	.word	0x40010c00
 8002de4:	40011000 	.word	0x40011000
 8002de8:	40011400 	.word	0x40011400
 8002dec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_GPIO_Init+0x304>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	4909      	ldr	r1, [pc, #36]	@ (8002e20 <HAL_GPIO_Init+0x304>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	3301      	adds	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f47f ae8e 	bne.w	8002b30 <HAL_GPIO_Init+0x14>
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	372c      	adds	r7, #44	@ 0x2c
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40010400 	.word	0x40010400

08002e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e001      	b.n	8002e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	807b      	strh	r3, [r7, #2]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e62:	787b      	ldrb	r3, [r7, #1]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e6e:	e003      	b.n	8002e78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	041a      	lsls	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	611a      	str	r2, [r3, #16]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e94:	887a      	ldrh	r2, [r7, #2]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	041a      	lsls	r2, r3, #16
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	43d9      	mvns	r1, r3
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	611a      	str	r2, [r3, #16]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e12b      	b.n	800311e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fab0 	bl	8002440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	@ 0x24
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f18:	f001 fd5a 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a81      	ldr	r2, [pc, #516]	@ (8003128 <HAL_I2C_Init+0x274>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d807      	bhi.n	8002f38 <HAL_I2C_Init+0x84>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a80      	ldr	r2, [pc, #512]	@ (800312c <HAL_I2C_Init+0x278>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e006      	b.n	8002f46 <HAL_I2C_Init+0x92>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a7d      	ldr	r2, [pc, #500]	@ (8003130 <HAL_I2C_Init+0x27c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0e7      	b.n	800311e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a78      	ldr	r2, [pc, #480]	@ (8003134 <HAL_I2C_Init+0x280>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9b      	lsrs	r3, r3, #18
 8002f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8003128 <HAL_I2C_Init+0x274>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d802      	bhi.n	8002f88 <HAL_I2C_Init+0xd4>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	3301      	adds	r3, #1
 8002f86:	e009      	b.n	8002f9c <HAL_I2C_Init+0xe8>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	4a69      	ldr	r2, [pc, #420]	@ (8003138 <HAL_I2C_Init+0x284>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	495c      	ldr	r1, [pc, #368]	@ (8003128 <HAL_I2C_Init+0x274>)
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d819      	bhi.n	8002ff0 <HAL_I2C_Init+0x13c>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e59      	subs	r1, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fca:	1c59      	adds	r1, r3, #1
 8002fcc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_I2C_Init+0x138>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1e59      	subs	r1, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	e051      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8002fec:	2304      	movs	r3, #4
 8002fee:	e04f      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <HAL_I2C_Init+0x168>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e58      	subs	r0, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	440b      	add	r3, r1
 8003006:	fbb0 f3f3 	udiv	r3, r0, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e012      	b.n	8003042 <HAL_I2C_Init+0x18e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	0099      	lsls	r1, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x196>
 8003046:	2301      	movs	r3, #1
 8003048:	e022      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10e      	bne.n	8003070 <HAL_I2C_Init+0x1bc>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1e58      	subs	r0, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	440b      	add	r3, r1
 8003060:	fbb0 f3f3 	udiv	r3, r0, r3
 8003064:	3301      	adds	r3, #1
 8003066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800306e:	e00f      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	0099      	lsls	r1, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	fbb0 f3f3 	udiv	r3, r0, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	6809      	ldr	r1, [r1, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6911      	ldr	r1, [r2, #16]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	4311      	orrs	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	000186a0 	.word	0x000186a0
 800312c:	001e847f 	.word	0x001e847f
 8003130:	003d08ff 	.word	0x003d08ff
 8003134:	431bde83 	.word	0x431bde83
 8003138:	10624dd3 	.word	0x10624dd3

0800313c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	461a      	mov	r2, r3
 8003148:	460b      	mov	r3, r1
 800314a:	817b      	strh	r3, [r7, #10]
 800314c:	4613      	mov	r3, r2
 800314e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff fbd6 	bl	8002900 <HAL_GetTick>
 8003154:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	f040 80e0 	bne.w	8003324 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2319      	movs	r3, #25
 800316a:	2201      	movs	r2, #1
 800316c:	4970      	ldr	r1, [pc, #448]	@ (8003330 <HAL_I2C_Master_Transmit+0x1f4>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fe2e 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
 800317c:	e0d3      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2C_Master_Transmit+0x50>
 8003188:	2302      	movs	r3, #2
 800318a:	e0cc      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d007      	beq.n	80031b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2221      	movs	r2, #33	@ 0x21
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2210      	movs	r2, #16
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a50      	ldr	r2, [pc, #320]	@ (8003334 <HAL_I2C_Master_Transmit+0x1f8>)
 80031f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fc02 	bl	8003a04 <I2C_MasterRequestWrite>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e08d      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003220:	e066      	b.n	80032f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	6a39      	ldr	r1, [r7, #32]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 feec 	bl	8004004 <I2C_WaitOnTXEFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2b04      	cmp	r3, #4
 8003238:	d107      	bne.n	800324a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06b      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	781a      	ldrb	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b04      	cmp	r3, #4
 800328a:	d11b      	bne.n	80032c4 <HAL_I2C_Master_Transmit+0x188>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	6a39      	ldr	r1, [r7, #32]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fee3 	bl	8004094 <I2C_WaitOnBTFFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d107      	bne.n	80032ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e01a      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d194      	bne.n	8003222 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	00100002 	.word	0x00100002
 8003334:	ffff0000 	.word	0xffff0000

08003338 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	@ 0x30
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	461a      	mov	r2, r3
 8003344:	460b      	mov	r3, r1
 8003346:	817b      	strh	r3, [r7, #10]
 8003348:	4613      	mov	r3, r2
 800334a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7ff fad6 	bl	8002900 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	f040 824b 	bne.w	80037fa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2319      	movs	r3, #25
 800336a:	2201      	movs	r2, #1
 800336c:	497f      	ldr	r1, [pc, #508]	@ (800356c <HAL_I2C_Master_Receive+0x234>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fd2e 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	e23e      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_I2C_Master_Receive+0x54>
 8003388:	2302      	movs	r3, #2
 800338a:	e237      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d007      	beq.n	80033b2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2222      	movs	r2, #34	@ 0x22
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2210      	movs	r2, #16
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	893a      	ldrh	r2, [r7, #8]
 80033e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4a5f      	ldr	r2, [pc, #380]	@ (8003570 <HAL_I2C_Master_Receive+0x238>)
 80033f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033f4:	8979      	ldrh	r1, [r7, #10]
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fb84 	bl	8003b08 <I2C_MasterRequestRead>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e1f8      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d113      	bne.n	800343a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e1cc      	b.n	80037d4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343e:	2b01      	cmp	r3, #1
 8003440:	d11e      	bne.n	8003480 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003450:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003452:	b672      	cpsid	i
}
 8003454:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800347c:	b662      	cpsie	i
}
 800347e:	e035      	b.n	80034ec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003484:	2b02      	cmp	r3, #2
 8003486:	d11e      	bne.n	80034c6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003496:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003498:	b672      	cpsid	i
}
 800349a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034c2:	b662      	cpsie	i
}
 80034c4:	e012      	b.n	80034ec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034ec:	e172      	b.n	80037d4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	f200 811f 	bhi.w	8003736 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d123      	bne.n	8003548 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003502:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fe0d 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e173      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003546:	e145      	b.n	80037d4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354c:	2b02      	cmp	r3, #2
 800354e:	d152      	bne.n	80035f6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	2200      	movs	r2, #0
 8003558:	4906      	ldr	r1, [pc, #24]	@ (8003574 <HAL_I2C_Master_Receive+0x23c>)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fc38 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e148      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
 800356a:	bf00      	nop
 800356c:	00100002 	.word	0x00100002
 8003570:	ffff0000 	.word	0xffff0000
 8003574:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003578:	b672      	cpsid	i
}
 800357a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035be:	b662      	cpsie	i
}
 80035c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035f4:	e0ee      	b.n	80037d4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	2200      	movs	r2, #0
 80035fe:	4981      	ldr	r1, [pc, #516]	@ (8003804 <HAL_I2C_Master_Receive+0x4cc>)
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fbe5 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0f5      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003620:	b672      	cpsid	i
}
 8003622:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003656:	4b6c      	ldr	r3, [pc, #432]	@ (8003808 <HAL_I2C_Master_Receive+0x4d0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	08db      	lsrs	r3, r3, #3
 800365c:	4a6b      	ldr	r2, [pc, #428]	@ (800380c <HAL_I2C_Master_Receive+0x4d4>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0a1a      	lsrs	r2, r3, #8
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	00da      	lsls	r2, r3, #3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	3b01      	subs	r3, #1
 8003674:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d118      	bne.n	80036ae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	f043 0220 	orr.w	r2, r3, #32
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800369e:	b662      	cpsie	i
}
 80036a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0a6      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d1d9      	bne.n	8003670 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036fe:	b662      	cpsie	i
}
 8003700:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003734:	e04e      	b.n	80037d4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003738:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fcf2 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e058      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d124      	bne.n	80037d4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	2b03      	cmp	r3, #3
 8003790:	d107      	bne.n	80037a2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f ae88 	bne.w	80034ee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3728      	adds	r7, #40	@ 0x28
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	00010004 	.word	0x00010004
 8003808:	20000020 	.word	0x20000020
 800380c:	14f8b589 	.word	0x14f8b589

08003810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800382a:	f7ff f869 	bl	8002900 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	f040 80d9 	bne.w	80039f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2319      	movs	r3, #25
 8003844:	2201      	movs	r2, #1
 8003846:	496d      	ldr	r1, [pc, #436]	@ (80039fc <HAL_I2C_Mem_Write+0x1ec>)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fac1 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
 8003856:	e0cc      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_I2C_Mem_Write+0x56>
 8003862:	2302      	movs	r3, #2
 8003864:	e0c5      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d007      	beq.n	800388c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2221      	movs	r2, #33	@ 0x21
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2240      	movs	r2, #64	@ 0x40
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003a00 <HAL_I2C_Mem_Write+0x1f0>)
 80038cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ce:	88f8      	ldrh	r0, [r7, #6]
 80038d0:	893a      	ldrh	r2, [r7, #8]
 80038d2:	8979      	ldrh	r1, [r7, #10]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4603      	mov	r3, r0
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f9e0 	bl	8003ca4 <I2C_RequestMemoryWrite>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d052      	beq.n	8003990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e081      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fb86 	bl	8004004 <I2C_WaitOnTXEFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	2b04      	cmp	r3, #4
 8003904:	d107      	bne.n	8003916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e06b      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d11b      	bne.n	8003990 <HAL_I2C_Mem_Write+0x180>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d017      	beq.n	8003990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	781a      	ldrb	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1aa      	bne.n	80038ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fb79 	bl	8004094 <I2C_WaitOnBTFFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d107      	bne.n	80039c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e016      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	00100002 	.word	0x00100002
 8003a00:	ffff0000 	.word	0xffff0000

08003a04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	460b      	mov	r3, r1
 8003a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d006      	beq.n	8003a2e <I2C_MasterRequestWrite+0x2a>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d003      	beq.n	8003a2e <I2C_MasterRequestWrite+0x2a>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a2c:	d108      	bne.n	8003a40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e00b      	b.n	8003a58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	2b12      	cmp	r3, #18
 8003a46:	d107      	bne.n	8003a58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f9b3 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7e:	d103      	bne.n	8003a88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e035      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a94:	d108      	bne.n	8003aa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	e01b      	b.n	8003ae0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003aa8:	897b      	ldrh	r3, [r7, #10]
 8003aaa:	11db      	asrs	r3, r3, #7
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 0306 	and.w	r3, r3, #6
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f063 030f 	orn	r3, r3, #15
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	490e      	ldr	r1, [pc, #56]	@ (8003b00 <I2C_MasterRequestWrite+0xfc>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f9fc 	bl	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e010      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ad6:	897b      	ldrh	r3, [r7, #10]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4907      	ldr	r1, [pc, #28]	@ (8003b04 <I2C_MasterRequestWrite+0x100>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f9ec 	bl	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	00010008 	.word	0x00010008
 8003b04:	00010002 	.word	0x00010002

08003b08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	460b      	mov	r3, r1
 8003b16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d006      	beq.n	8003b42 <I2C_MasterRequestRead+0x3a>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d003      	beq.n	8003b42 <I2C_MasterRequestRead+0x3a>
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b40:	d108      	bne.n	8003b54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e00b      	b.n	8003b6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	2b11      	cmp	r3, #17
 8003b5a:	d107      	bne.n	8003b6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f929 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b92:	d103      	bne.n	8003b9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e079      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ba8:	d108      	bne.n	8003bbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	611a      	str	r2, [r3, #16]
 8003bba:	e05f      	b.n	8003c7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bbc:	897b      	ldrh	r3, [r7, #10]
 8003bbe:	11db      	asrs	r3, r3, #7
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f063 030f 	orn	r3, r3, #15
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4930      	ldr	r1, [pc, #192]	@ (8003c9c <I2C_MasterRequestRead+0x194>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f972 	bl	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e054      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bea:	897b      	ldrh	r3, [r7, #10]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4929      	ldr	r1, [pc, #164]	@ (8003ca0 <I2C_MasterRequestRead+0x198>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f962 	bl	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e044      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f8c7 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00d      	beq.n	8003c64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c56:	d103      	bne.n	8003c60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e017      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c64:	897b      	ldrh	r3, [r7, #10]
 8003c66:	11db      	asrs	r3, r3, #7
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f003 0306 	and.w	r3, r3, #6
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f063 030e 	orn	r3, r3, #14
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4907      	ldr	r1, [pc, #28]	@ (8003ca0 <I2C_MasterRequestRead+0x198>)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f91e 	bl	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00010008 	.word	0x00010008
 8003ca0:	00010002 	.word	0x00010002

08003ca4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f878 	bl	8003dd0 <I2C_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf4:	d103      	bne.n	8003cfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e05f      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	492d      	ldr	r1, [pc, #180]	@ (8003dcc <I2C_RequestMemoryWrite+0x128>)
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f8d3 	bl	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e04c      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f95e 	bl	8004004 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e02b      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d70:	893b      	ldrh	r3, [r7, #8]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	611a      	str	r2, [r3, #16]
 8003d7a:	e021      	b.n	8003dc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8c:	6a39      	ldr	r1, [r7, #32]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f938 	bl	8004004 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d107      	bne.n	8003db2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e005      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db6:	893b      	ldrh	r3, [r7, #8]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	00010002 	.word	0x00010002

08003dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de0:	e048      	b.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d044      	beq.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dea:	f7fe fd89 	bl	8002900 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d302      	bcc.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d139      	bne.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d10d      	bne.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	43da      	mvns	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	e00c      	b.n	8003e40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d116      	bne.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e023      	b.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10d      	bne.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	43da      	mvns	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	e00c      	b.n	8003eb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d093      	beq.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed2:	e071      	b.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee2:	d123      	bne.n	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003efc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	f043 0204 	orr.w	r2, r3, #4
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e067      	b.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d041      	beq.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f34:	f7fe fce4 	bl	8002900 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d302      	bcc.n	8003f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d136      	bne.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10c      	bne.n	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e00b      	b.n	8003f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	43da      	mvns	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e021      	b.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	0c1b      	lsrs	r3, r3, #16
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d10c      	bne.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e00b      	b.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f47f af6d 	bne.w	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004010:	e034      	b.n	800407c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f8e3 	bl	80041de <I2C_IsAcknowledgeFailed>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e034      	b.n	800408c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d028      	beq.n	800407c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402a:	f7fe fc69 	bl	8002900 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	d302      	bcc.n	8004040 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d11d      	bne.n	800407c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404a:	2b80      	cmp	r3, #128	@ 0x80
 800404c:	d016      	beq.n	800407c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e007      	b.n	800408c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004086:	2b80      	cmp	r3, #128	@ 0x80
 8004088:	d1c3      	bne.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040a0:	e034      	b.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f89b 	bl	80041de <I2C_IsAcknowledgeFailed>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e034      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d028      	beq.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe fc21 	bl	8002900 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11d      	bne.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d016      	beq.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b04      	cmp	r3, #4
 8004118:	d1c3      	bne.n	80040a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004130:	e049      	b.n	80041c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	d119      	bne.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0210 	mvn.w	r2, #16
 8004148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e030      	b.n	80041d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fe fbc4 	bl	8002900 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11d      	bne.n	80041c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d016      	beq.n	80041c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e007      	b.n	80041d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	d1ae      	bne.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f4:	d11b      	bne.n	800422e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f043 0204 	orr.w	r2, r3, #4
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
	...

0800423c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e272      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8087 	beq.w	800436a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800425c:	4b92      	ldr	r3, [pc, #584]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b04      	cmp	r3, #4
 8004266:	d00c      	beq.n	8004282 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004268:	4b8f      	ldr	r3, [pc, #572]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d112      	bne.n	800429a <HAL_RCC_OscConfig+0x5e>
 8004274:	4b8c      	ldr	r3, [pc, #560]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004280:	d10b      	bne.n	800429a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004282:	4b89      	ldr	r3, [pc, #548]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d06c      	beq.n	8004368 <HAL_RCC_OscConfig+0x12c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d168      	bne.n	8004368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e24c      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x76>
 80042a4:	4b80      	ldr	r3, [pc, #512]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a7f      	ldr	r2, [pc, #508]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e02e      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x98>
 80042ba:	4b7b      	ldr	r3, [pc, #492]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a7a      	ldr	r2, [pc, #488]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b78      	ldr	r3, [pc, #480]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a77      	ldr	r2, [pc, #476]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e01d      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0xbc>
 80042de:	4b72      	ldr	r3, [pc, #456]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a71      	ldr	r2, [pc, #452]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b6f      	ldr	r3, [pc, #444]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a6e      	ldr	r2, [pc, #440]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042f8:	4b6b      	ldr	r3, [pc, #428]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a6a      	ldr	r2, [pc, #424]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b68      	ldr	r3, [pc, #416]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a67      	ldr	r2, [pc, #412]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800430a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fe faf2 	bl	8002900 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7fe faee 	bl	8002900 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	@ 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e200      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	4b5d      	ldr	r3, [pc, #372]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0xe4>
 800433e:	e014      	b.n	800436a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fe fade 	bl	8002900 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe fada 	bl	8002900 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	@ 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1ec      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	4b53      	ldr	r3, [pc, #332]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x10c>
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d063      	beq.n	800443e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004376:	4b4c      	ldr	r3, [pc, #304]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004382:	4b49      	ldr	r3, [pc, #292]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b08      	cmp	r3, #8
 800438c:	d11c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x18c>
 800438e:	4b46      	ldr	r3, [pc, #280]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d116      	bne.n	80043c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	4b43      	ldr	r3, [pc, #268]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x176>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e1c0      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4b3d      	ldr	r3, [pc, #244]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4939      	ldr	r1, [pc, #228]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	e03a      	b.n	800443e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d0:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <HAL_RCC_OscConfig+0x270>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d6:	f7fe fa93 	bl	8002900 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7fe fa8f 	bl	8002900 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e1a1      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	4b2a      	ldr	r3, [pc, #168]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4927      	ldr	r1, [pc, #156]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
 8004410:	e015      	b.n	800443e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004412:	4b26      	ldr	r3, [pc, #152]	@ (80044ac <HAL_RCC_OscConfig+0x270>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fe fa72 	bl	8002900 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004420:	f7fe fa6e 	bl	8002900 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e180      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	4b1d      	ldr	r3, [pc, #116]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03a      	beq.n	80044c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d019      	beq.n	8004486 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004452:	4b17      	ldr	r3, [pc, #92]	@ (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004458:	f7fe fa52 	bl	8002900 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004460:	f7fe fa4e 	bl	8002900 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e160      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800447e:	2001      	movs	r0, #1
 8004480:	f000 fafe 	bl	8004a80 <RCC_Delay>
 8004484:	e01c      	b.n	80044c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448c:	f7fe fa38 	bl	8002900 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004492:	e00f      	b.n	80044b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fe fa34 	bl	8002900 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d908      	bls.n	80044b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e146      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	42420000 	.word	0x42420000
 80044b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	4b92      	ldr	r3, [pc, #584]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e9      	bne.n	8004494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80a6 	beq.w	800461a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b88      	ldr	r3, [pc, #544]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4a87      	ldr	r2, [pc, #540]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	61d3      	str	r3, [r2, #28]
 80044ea:	4b85      	ldr	r3, [pc, #532]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	4b82      	ldr	r3, [pc, #520]	@ (8004704 <HAL_RCC_OscConfig+0x4c8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004506:	4b7f      	ldr	r3, [pc, #508]	@ (8004704 <HAL_RCC_OscConfig+0x4c8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7e      	ldr	r2, [pc, #504]	@ (8004704 <HAL_RCC_OscConfig+0x4c8>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fe f9f5 	bl	8002900 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fe f9f1 	bl	8002900 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b64      	cmp	r3, #100	@ 0x64
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e103      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	4b75      	ldr	r3, [pc, #468]	@ (8004704 <HAL_RCC_OscConfig+0x4c8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x312>
 8004540:	4b6f      	ldr	r3, [pc, #444]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	4a6e      	ldr	r2, [pc, #440]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6213      	str	r3, [r2, #32]
 800454c:	e02d      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x334>
 8004556:	4b6a      	ldr	r3, [pc, #424]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4a69      	ldr	r2, [pc, #420]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6213      	str	r3, [r2, #32]
 8004562:	4b67      	ldr	r3, [pc, #412]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	4a66      	ldr	r2, [pc, #408]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6213      	str	r3, [r2, #32]
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x356>
 8004578:	4b61      	ldr	r3, [pc, #388]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4a60      	ldr	r2, [pc, #384]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6213      	str	r3, [r2, #32]
 8004584:	4b5e      	ldr	r3, [pc, #376]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a5d      	ldr	r2, [pc, #372]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6213      	str	r3, [r2, #32]
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 8004592:	4b5b      	ldr	r3, [pc, #364]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a5a      	ldr	r2, [pc, #360]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6213      	str	r3, [r2, #32]
 800459e:	4b58      	ldr	r3, [pc, #352]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a57      	ldr	r2, [pc, #348]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b2:	f7fe f9a5 	bl	8002900 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe f9a1 	bl	8002900 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0b1      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x37e>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fe f98f 	bl	8002900 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fe f98b 	bl	8002900 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e09b      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b40      	ldr	r3, [pc, #256]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b3c      	ldr	r3, [pc, #240]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	4a3b      	ldr	r2, [pc, #236]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004618:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8087 	beq.w	8004732 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b36      	ldr	r3, [pc, #216]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d061      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d146      	bne.n	80046c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b33      	ldr	r3, [pc, #204]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe f95f 	bl	8002900 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe f95b 	bl	8002900 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e06d      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004658:	4b29      	ldr	r3, [pc, #164]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800466c:	d108      	bne.n	8004680 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800466e:	4b24      	ldr	r3, [pc, #144]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4921      	ldr	r1, [pc, #132]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004680:	4b1f      	ldr	r3, [pc, #124]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a19      	ldr	r1, [r3, #32]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	430b      	orrs	r3, r1
 8004692:	491b      	ldr	r1, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004698:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fe f92f 	bl	8002900 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fe f92b 	bl	8002900 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e03d      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b8:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x46a>
 80046c4:	e035      	b.n	8004732 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <HAL_RCC_OscConfig+0x4cc>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fe f918 	bl	8002900 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fe f914 	bl	8002900 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e026      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e6:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x498>
 80046f2:	e01e      	b.n	8004732 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e019      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
 8004700:	40021000 	.word	0x40021000
 8004704:	40007000 	.word	0x40007000
 8004708:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800470c:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <HAL_RCC_OscConfig+0x500>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	429a      	cmp	r2, r3
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000

08004740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0d0      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b6a      	ldr	r3, [pc, #424]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d910      	bls.n	8004784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b67      	ldr	r3, [pc, #412]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 0207 	bic.w	r2, r3, #7
 800476a:	4965      	ldr	r1, [pc, #404]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b63      	ldr	r3, [pc, #396]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0b8      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d020      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800479c:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a58      	ldr	r2, [pc, #352]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b4:	4b53      	ldr	r3, [pc, #332]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a52      	ldr	r2, [pc, #328]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c0:	4b50      	ldr	r3, [pc, #320]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	494d      	ldr	r1, [pc, #308]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d040      	beq.n	8004860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b47      	ldr	r3, [pc, #284]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d115      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e07f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b41      	ldr	r3, [pc, #260]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e073      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480e:	4b3d      	ldr	r3, [pc, #244]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e06b      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481e:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4936      	ldr	r1, [pc, #216]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004830:	f7fe f866 	bl	8002900 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fe f862 	bl	8002900 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e053      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	4b2d      	ldr	r3, [pc, #180]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 020c 	and.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	429a      	cmp	r2, r3
 800485e:	d1eb      	bne.n	8004838 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004860:	4b27      	ldr	r3, [pc, #156]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d210      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b24      	ldr	r3, [pc, #144]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 0207 	bic.w	r2, r3, #7
 8004876:	4922      	ldr	r1, [pc, #136]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b20      	ldr	r3, [pc, #128]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e032      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4916      	ldr	r1, [pc, #88]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ba:	4b12      	ldr	r3, [pc, #72]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	490e      	ldr	r1, [pc, #56]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ce:	f000 f821 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	490a      	ldr	r1, [pc, #40]	@ (8004908 <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	5ccb      	ldrb	r3, [r1, r3]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a09      	ldr	r2, [pc, #36]	@ (800490c <HAL_RCC_ClockConfig+0x1cc>)
 80048e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ea:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <HAL_RCC_ClockConfig+0x1d0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fe4e 	bl	8002590 <HAL_InitTick>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40022000 	.word	0x40022000
 8004904:	40021000 	.word	0x40021000
 8004908:	0800bd50 	.word	0x0800bd50
 800490c:	20000020 	.word	0x20000020
 8004910:	20000024 	.word	0x20000024

08004914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800492e:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b04      	cmp	r3, #4
 800493c:	d002      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x30>
 800493e:	2b08      	cmp	r3, #8
 8004940:	d003      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x36>
 8004942:	e027      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004944:	4b19      	ldr	r3, [pc, #100]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004946:	613b      	str	r3, [r7, #16]
      break;
 8004948:	e027      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	0c9b      	lsrs	r3, r3, #18
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	4a17      	ldr	r2, [pc, #92]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004954:	5cd3      	ldrb	r3, [r2, r3]
 8004956:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d010      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004962:	4b11      	ldr	r3, [pc, #68]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	0c5b      	lsrs	r3, r3, #17
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	4a11      	ldr	r2, [pc, #68]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800496e:	5cd3      	ldrb	r3, [r2, r3]
 8004970:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a0d      	ldr	r2, [pc, #52]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004976:	fb03 f202 	mul.w	r2, r3, r2
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e004      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0c      	ldr	r2, [pc, #48]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	613b      	str	r3, [r7, #16]
      break;
 8004992:	e002      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004996:	613b      	str	r3, [r7, #16]
      break;
 8004998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499a:	693b      	ldr	r3, [r7, #16]
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
 80049ac:	007a1200 	.word	0x007a1200
 80049b0:	0800bd68 	.word	0x0800bd68
 80049b4:	0800bd78 	.word	0x0800bd78
 80049b8:	003d0900 	.word	0x003d0900

080049bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c0:	4b02      	ldr	r3, [pc, #8]	@ (80049cc <HAL_RCC_GetHCLKFreq+0x10>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	20000020 	.word	0x20000020

080049d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049d4:	f7ff fff2 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	@ (80049f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000
 80049f4:	0800bd60 	.word	0x0800bd60

080049f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049fc:	f7ff ffde 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	0adb      	lsrs	r3, r3, #11
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	@ (8004a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	0800bd60 	.word	0x0800bd60

08004a20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a30:	4b11      	ldr	r3, [pc, #68]	@ (8004a78 <HAL_RCC_GetClockConfig+0x58>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0203 	and.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a78 <HAL_RCC_GetClockConfig+0x58>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a48:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <HAL_RCC_GetClockConfig+0x58>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a54:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <HAL_RCC_GetClockConfig+0x58>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	08db      	lsrs	r3, r3, #3
 8004a5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <HAL_RCC_GetClockConfig+0x5c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40022000 	.word	0x40022000

08004a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a88:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab4 <RCC_Delay+0x34>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <RCC_Delay+0x38>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0a5b      	lsrs	r3, r3, #9
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a9c:	bf00      	nop
  }
  while (Delay --);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	60fa      	str	r2, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f9      	bne.n	8004a9c <RCC_Delay+0x1c>
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	20000020 	.word	0x20000020
 8004ab8:	10624dd3 	.word	0x10624dd3

08004abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e041      	b.n	8004b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fd fcea 	bl	80024bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f000 faa6 	bl	800504c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d001      	beq.n	8004b74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e032      	b.n	8004bda <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a18      	ldr	r2, [pc, #96]	@ (8004be4 <HAL_TIM_Base_Start+0x88>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x48>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x48>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a14      	ldr	r2, [pc, #80]	@ (8004be8 <HAL_TIM_Base_Start+0x8c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x48>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a13      	ldr	r2, [pc, #76]	@ (8004bec <HAL_TIM_Base_Start+0x90>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d111      	bne.n	8004bc8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d010      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc6:	e007      	b.n	8004bd8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800

08004bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d001      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e03a      	b.n	8004c7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a18      	ldr	r2, [pc, #96]	@ (8004c88 <HAL_TIM_Base_Start_IT+0x98>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00e      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x58>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c32:	d009      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x58>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <HAL_TIM_Base_Start_IT+0x9c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x58>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a13      	ldr	r2, [pc, #76]	@ (8004c90 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d111      	bne.n	8004c6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d010      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6a:	e007      	b.n	8004c7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800

08004c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d020      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0202 	mvn.w	r2, #2
 8004cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f998 	bl	8005014 <HAL_TIM_IC_CaptureCallback>
 8004ce4:	e005      	b.n	8004cf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f98b 	bl	8005002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f99a 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d020      	beq.n	8004d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01b      	beq.n	8004d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0204 	mvn.w	r2, #4
 8004d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f972 	bl	8005014 <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f965 	bl	8005002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f974 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d020      	beq.n	8004d90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0208 	mvn.w	r2, #8
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f94c 	bl	8005014 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f93f 	bl	8005002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f94e 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d020      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01b      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0210 	mvn.w	r2, #16
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2208      	movs	r2, #8
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f926 	bl	8005014 <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f919 	bl	8005002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f928 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0201 	mvn.w	r2, #1
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fd fad0 	bl	80023a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa7f 	bl	8005322 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f8f8 	bl	8005038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0220 	mvn.w	r2, #32
 8004e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa52 	bl	8005310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_TIM_ConfigClockSource+0x1c>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e0b4      	b.n	8004ffa <HAL_TIM_ConfigClockSource+0x186>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec8:	d03e      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0xd4>
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ece:	f200 8087 	bhi.w	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed6:	f000 8086 	beq.w	8004fe6 <HAL_TIM_ConfigClockSource+0x172>
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	d87f      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b70      	cmp	r3, #112	@ 0x70
 8004ee2:	d01a      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0xa6>
 8004ee4:	2b70      	cmp	r3, #112	@ 0x70
 8004ee6:	d87b      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b60      	cmp	r3, #96	@ 0x60
 8004eea:	d050      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0x11a>
 8004eec:	2b60      	cmp	r3, #96	@ 0x60
 8004eee:	d877      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b50      	cmp	r3, #80	@ 0x50
 8004ef2:	d03c      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0xfa>
 8004ef4:	2b50      	cmp	r3, #80	@ 0x50
 8004ef6:	d873      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b40      	cmp	r3, #64	@ 0x40
 8004efa:	d058      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x13a>
 8004efc:	2b40      	cmp	r3, #64	@ 0x40
 8004efe:	d86f      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d064      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x15a>
 8004f04:	2b30      	cmp	r3, #48	@ 0x30
 8004f06:	d86b      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d060      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d867      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d05c      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x15a>
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d05a      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x15a>
 8004f18:	e062      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f2a:	f000 f974 	bl	8005216 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	609a      	str	r2, [r3, #8]
      break;
 8004f46:	e04f      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f58:	f000 f95d 	bl	8005216 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f6a:	609a      	str	r2, [r3, #8]
      break;
 8004f6c:	e03c      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f000 f8d4 	bl	8005128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2150      	movs	r1, #80	@ 0x50
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f92b 	bl	80051e2 <TIM_ITRx_SetConfig>
      break;
 8004f8c:	e02c      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f000 f8f2 	bl	8005184 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2160      	movs	r1, #96	@ 0x60
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f91b 	bl	80051e2 <TIM_ITRx_SetConfig>
      break;
 8004fac:	e01c      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f000 f8b4 	bl	8005128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2140      	movs	r1, #64	@ 0x40
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f90b 	bl	80051e2 <TIM_ITRx_SetConfig>
      break;
 8004fcc:	e00c      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f000 f902 	bl	80051e2 <TIM_ITRx_SetConfig>
      break;
 8004fde:	e003      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe4:	e000      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr

08005038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
	...

0800504c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a2f      	ldr	r2, [pc, #188]	@ (800511c <TIM_Base_SetConfig+0xd0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00b      	beq.n	800507c <TIM_Base_SetConfig+0x30>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800506a:	d007      	beq.n	800507c <TIM_Base_SetConfig+0x30>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2c      	ldr	r2, [pc, #176]	@ (8005120 <TIM_Base_SetConfig+0xd4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_Base_SetConfig+0x30>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2b      	ldr	r2, [pc, #172]	@ (8005124 <TIM_Base_SetConfig+0xd8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d108      	bne.n	800508e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a22      	ldr	r2, [pc, #136]	@ (800511c <TIM_Base_SetConfig+0xd0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00b      	beq.n	80050ae <TIM_Base_SetConfig+0x62>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509c:	d007      	beq.n	80050ae <TIM_Base_SetConfig+0x62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005120 <TIM_Base_SetConfig+0xd4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_Base_SetConfig+0x62>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005124 <TIM_Base_SetConfig+0xd8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d108      	bne.n	80050c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a0d      	ldr	r2, [pc, #52]	@ (800511c <TIM_Base_SetConfig+0xd0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d103      	bne.n	80050f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	611a      	str	r2, [r3, #16]
  }
}
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800

08005128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f023 0201 	bic.w	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f023 030a 	bic.w	r3, r3, #10
 8005164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0210 	bic.w	r2, r3, #16
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	031b      	lsls	r3, r3, #12
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	621a      	str	r2, [r3, #32]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr

080051e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	f043 0307 	orr.w	r3, r3, #7
 8005204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	609a      	str	r2, [r3, #8]
}
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr

08005216 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005216:	b480      	push	{r7}
 8005218:	b087      	sub	sp, #28
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005230:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	021a      	lsls	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	431a      	orrs	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4313      	orrs	r3, r2
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	609a      	str	r2, [r3, #8]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005268:	2302      	movs	r3, #2
 800526a:	e046      	b.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a16      	ldr	r2, [pc, #88]	@ (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b8:	d009      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a12      	ldr	r2, [pc, #72]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a10      	ldr	r2, [pc, #64]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10c      	bne.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800

08005310 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e042      	b.n	80053cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fd f8cc 	bl	80024f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2224      	movs	r2, #36	@ 0x24
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa09 	bl	8005790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800538c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695a      	ldr	r2, [r3, #20]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800539c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	@ 0x28
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d175      	bne.n	80054e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_UART_Transmit+0x2c>
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e06e      	b.n	80054e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2221      	movs	r2, #33	@ 0x21
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005412:	f7fd fa75 	bl	8002900 <HAL_GetTick>
 8005416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	88fa      	ldrh	r2, [r7, #6]
 800541c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	88fa      	ldrh	r2, [r7, #6]
 8005422:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800542c:	d108      	bne.n	8005440 <HAL_UART_Transmit+0x6c>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e003      	b.n	8005448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005448:	e02e      	b.n	80054a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	2180      	movs	r1, #128	@ 0x80
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f8df 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e03a      	b.n	80054e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	3302      	adds	r3, #2
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e007      	b.n	800549a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	781a      	ldrb	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	3301      	adds	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1cb      	bne.n	800544a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2140      	movs	r1, #64	@ 0x40
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f8ab 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e006      	b.n	80054e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b08a      	sub	sp, #40	@ 0x28
 80054ee:	af02      	add	r7, sp, #8
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	603b      	str	r3, [r7, #0]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b20      	cmp	r3, #32
 8005508:	f040 8081 	bne.w	800560e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_UART_Receive+0x2e>
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e079      	b.n	8005610 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2222      	movs	r2, #34	@ 0x22
 8005526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005530:	f7fd f9e6 	bl	8002900 <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554a:	d108      	bne.n	800555e <HAL_UART_Receive+0x74>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	e003      	b.n	8005566 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005566:	e047      	b.n	80055f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2200      	movs	r2, #0
 8005570:	2120      	movs	r1, #32
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f850 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e042      	b.n	8005610 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10c      	bne.n	80055aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559c:	b29a      	uxth	r2, r3
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	3302      	adds	r3, #2
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	e01f      	b.n	80055ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b2:	d007      	beq.n	80055c4 <HAL_UART_Receive+0xda>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <HAL_UART_Receive+0xe8>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e008      	b.n	80055e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3301      	adds	r3, #1
 80055e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1b2      	bne.n	8005568 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e000      	b.n	8005610 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800560e:	2302      	movs	r3, #2
  }
}
 8005610:	4618      	mov	r0, r3
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	4613      	mov	r3, r2
 8005626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005628:	e03b      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d037      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fd f965 	bl	8002900 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <UART_WaitOnFlagUntilTimeout+0x30>
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e03a      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d023      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b80      	cmp	r3, #128	@ 0x80
 800565e:	d020      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b40      	cmp	r3, #64	@ 0x40
 8005664:	d01d      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b08      	cmp	r3, #8
 8005672:	d116      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f81d 	bl	80056ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2208      	movs	r2, #8
 8005694:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e00f      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	bf0c      	ite	eq
 80056b2:	2301      	moveq	r3, #1
 80056b4:	2300      	movne	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d0b4      	beq.n	800562a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b095      	sub	sp, #84	@ 0x54
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80056f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3314      	adds	r3, #20
 800570c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	61fb      	str	r3, [r7, #28]
   return(result);
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800572c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e5      	bne.n	8005706 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	2b01      	cmp	r3, #1
 8005740:	d119      	bne.n	8005776 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	60bb      	str	r3, [r7, #8]
   return(result);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f023 0310 	bic.w	r3, r3, #16
 8005758:	647b      	str	r3, [r7, #68]	@ 0x44
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005762:	61ba      	str	r2, [r7, #24]
 8005764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6979      	ldr	r1, [r7, #20]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	613b      	str	r3, [r7, #16]
   return(result);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e5      	bne.n	8005742 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005784:	bf00      	nop
 8005786:	3754      	adds	r7, #84	@ 0x54
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
	...

08005790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80057ca:	f023 030c 	bic.w	r3, r3, #12
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	430b      	orrs	r3, r1
 80057d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a2c      	ldr	r2, [pc, #176]	@ (80058a4 <UART_SetConfig+0x114>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d103      	bne.n	8005800 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7ff f8fe 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	e002      	b.n	8005806 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005800:	f7ff f8e6 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8005804:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009a      	lsls	r2, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	4a22      	ldr	r2, [pc, #136]	@ (80058a8 <UART_SetConfig+0x118>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	0119      	lsls	r1, r3, #4
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009a      	lsls	r2, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	fbb2 f2f3 	udiv	r2, r2, r3
 800583c:	4b1a      	ldr	r3, [pc, #104]	@ (80058a8 <UART_SetConfig+0x118>)
 800583e:	fba3 0302 	umull	r0, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2064      	movs	r0, #100	@ 0x64
 8005846:	fb00 f303 	mul.w	r3, r0, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	3332      	adds	r3, #50	@ 0x32
 8005850:	4a15      	ldr	r2, [pc, #84]	@ (80058a8 <UART_SetConfig+0x118>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800585c:	4419      	add	r1, r3
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009a      	lsls	r2, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	fbb2 f2f3 	udiv	r2, r2, r3
 8005874:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <UART_SetConfig+0x118>)
 8005876:	fba3 0302 	umull	r0, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	2064      	movs	r0, #100	@ 0x64
 800587e:	fb00 f303 	mul.w	r3, r0, r3
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	3332      	adds	r3, #50	@ 0x32
 8005888:	4a07      	ldr	r2, [pc, #28]	@ (80058a8 <UART_SetConfig+0x118>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	f003 020f 	and.w	r2, r3, #15
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	440a      	add	r2, r1
 800589a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40013800 	.word	0x40013800
 80058a8:	51eb851f 	.word	0x51eb851f

080058ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058be:	2b84      	cmp	r3, #132	@ 0x84
 80058c0:	d005      	beq.n	80058ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	3303      	adds	r3, #3
 80058cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058ce:	68fb      	ldr	r3, [r7, #12]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr

080058da <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e0:	f3ef 8305 	mrs	r3, IPSR
 80058e4:	607b      	str	r3, [r7, #4]
  return(result);
 80058e6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005900:	f001 fbca 	bl	8007098 <vTaskStartScheduler>
  
  return osOK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	bd80      	pop	{r7, pc}

0800590a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800590a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590c:	b089      	sub	sp, #36	@ 0x24
 800590e:	af04      	add	r7, sp, #16
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d020      	beq.n	800595e <osThreadCreate+0x54>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01c      	beq.n	800595e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685c      	ldr	r4, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691e      	ldr	r6, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ffb8 	bl	80058ac <makeFreeRtosPriority>
 800593c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005946:	9202      	str	r2, [sp, #8]
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	9100      	str	r1, [sp, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	4632      	mov	r2, r6
 8005950:	4629      	mov	r1, r5
 8005952:	4620      	mov	r0, r4
 8005954:	f001 f9bb 	bl	8006cce <xTaskCreateStatic>
 8005958:	4603      	mov	r3, r0
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e01c      	b.n	8005998 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685c      	ldr	r4, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800596a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff ff9a 	bl	80058ac <makeFreeRtosPriority>
 8005978:	4602      	mov	r2, r0
 800597a:	f107 030c 	add.w	r3, r7, #12
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	9200      	str	r2, [sp, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	4632      	mov	r2, r6
 8005986:	4629      	mov	r1, r5
 8005988:	4620      	mov	r0, r4
 800598a:	f001 fa00 	bl	8006d8e <xTaskCreate>
 800598e:	4603      	mov	r3, r0
 8005990:	2b01      	cmp	r3, #1
 8005992:	d001      	beq.n	8005998 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <osDelay+0x16>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	e000      	b.n	80059ba <osDelay+0x18>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fb36 	bl	800702c <vTaskDelay>
  
  return osOK;
 80059c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4619      	mov	r1, r3
 80059e0:	2001      	movs	r0, #1
 80059e2:	f000 fb8e 	bl	8006102 <xQueueCreateMutexStatic>
 80059e6:	4603      	mov	r3, r0
 80059e8:	e003      	b.n	80059f2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80059ea:	2001      	movs	r0, #1
 80059ec:	f000 fb71 	bl	80060d2 <xQueueCreateMutex>
 80059f0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a06:	2300      	movs	r3, #0
 8005a08:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <osMutexWait+0x18>
    return osErrorParameter;
 8005a10:	2380      	movs	r3, #128	@ 0x80
 8005a12:	e03a      	b.n	8005a8a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d103      	bne.n	8005a28 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e009      	b.n	8005a3c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <osMutexWait+0x40>
      ticks = 1;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a3c:	f7ff ff4d 	bl	80058da <inHandlerMode>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d017      	beq.n	8005a76 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a46:	f107 0308 	add.w	r3, r7, #8
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 ff94 	bl	800697c <xQueueReceiveFromISR>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d001      	beq.n	8005a5e <osMutexWait+0x62>
      return osErrorOS;
 8005a5a:	23ff      	movs	r3, #255	@ 0xff
 8005a5c:	e015      	b.n	8005a8a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <osMutexWait+0x8c>
 8005a64:	4b0b      	ldr	r3, [pc, #44]	@ (8005a94 <osMutexWait+0x98>)
 8005a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	e008      	b.n	8005a88 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fe6f 	bl	800675c <xQueueSemaphoreTake>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d001      	beq.n	8005a88 <osMutexWait+0x8c>
    return osErrorOS;
 8005a84:	23ff      	movs	r3, #255	@ 0xff
 8005a86:	e000      	b.n	8005a8a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	e000ed04 	.word	0xe000ed04

08005a98 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005aa8:	f7ff ff17 	bl	80058da <inHandlerMode>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005ab2:	f107 0308 	add.w	r3, r7, #8
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fcdd 	bl	8006478 <xQueueGiveFromISR>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d001      	beq.n	8005ac8 <osMutexRelease+0x30>
      return osErrorOS;
 8005ac4:	23ff      	movs	r3, #255	@ 0xff
 8005ac6:	e017      	b.n	8005af8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d013      	beq.n	8005af6 <osMutexRelease+0x5e>
 8005ace:	4b0c      	ldr	r3, [pc, #48]	@ (8005b00 <osMutexRelease+0x68>)
 8005ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	e00a      	b.n	8005af6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb26 	bl	8006138 <xQueueGenericSend>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d001      	beq.n	8005af6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005af2:	23ff      	movs	r3, #255	@ 0xff
 8005af4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005af6:	68fb      	ldr	r3, [r7, #12]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005b04:	b590      	push	{r4, r7, lr}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d011      	beq.n	8005b3a <osMessageCreate+0x36>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6859      	ldr	r1, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2400      	movs	r4, #0
 8005b30:	9400      	str	r4, [sp, #0]
 8005b32:	f000 f9dd 	bl	8005ef0 <xQueueGenericCreateStatic>
 8005b36:	4603      	mov	r3, r0
 8005b38:	e008      	b.n	8005b4c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	4619      	mov	r1, r3
 8005b46:	f000 fa50 	bl	8005fea <xQueueGenericCreate>
 8005b4a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd90      	pop	{r4, r7, pc}

08005b54 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <osMessagePut+0x1e>
    ticks = 1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005b72:	f7ff feb2 	bl	80058da <inHandlerMode>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d018      	beq.n	8005bae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005b7c:	f107 0210 	add.w	r2, r7, #16
 8005b80:	f107 0108 	add.w	r1, r7, #8
 8005b84:	2300      	movs	r3, #0
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fbd8 	bl	800633c <xQueueGenericSendFromISR>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d001      	beq.n	8005b96 <osMessagePut+0x42>
      return osErrorOS;
 8005b92:	23ff      	movs	r3, #255	@ 0xff
 8005b94:	e018      	b.n	8005bc8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d014      	beq.n	8005bc6 <osMessagePut+0x72>
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <osMessagePut+0x7c>)
 8005b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	e00b      	b.n	8005bc6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005bae:	f107 0108 	add.w	r1, r7, #8
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fabe 	bl	8006138 <xQueueGenericSend>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d001      	beq.n	8005bc6 <osMessagePut+0x72>
      return osErrorOS;
 8005bc2:	23ff      	movs	r3, #255	@ 0xff
 8005bc4:	e000      	b.n	8005bc8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b08b      	sub	sp, #44	@ 0x2c
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005bee:	2380      	movs	r3, #128	@ 0x80
 8005bf0:	617b      	str	r3, [r7, #20]
    return event;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	461c      	mov	r4, r3
 8005bf6:	f107 0314 	add.w	r3, r7, #20
 8005bfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005bfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c02:	e054      	b.n	8005cae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d103      	bne.n	8005c1c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c1a:	e009      	b.n	8005c30 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d006      	beq.n	8005c30 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <osMessageGet+0x5c>
      ticks = 1;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005c30:	f7ff fe53 	bl	80058da <inHandlerMode>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01c      	beq.n	8005c74 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005c3a:	f107 0220 	add.w	r2, r7, #32
 8005c3e:	f107 0314 	add.w	r3, r7, #20
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	68b8      	ldr	r0, [r7, #8]
 8005c48:	f000 fe98 	bl	800697c <xQueueReceiveFromISR>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d102      	bne.n	8005c58 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005c52:	2310      	movs	r3, #16
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e001      	b.n	8005c5c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01d      	beq.n	8005c9e <osMessageGet+0xca>
 8005c62:	4b15      	ldr	r3, [pc, #84]	@ (8005cb8 <osMessageGet+0xe4>)
 8005c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	e014      	b.n	8005c9e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005c74:	f107 0314 	add.w	r3, r7, #20
 8005c78:	3304      	adds	r3, #4
 8005c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	68b8      	ldr	r0, [r7, #8]
 8005c80:	f000 fc8a 	bl	8006598 <xQueueReceive>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d102      	bne.n	8005c90 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005c8a:	2310      	movs	r3, #16
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e006      	b.n	8005c9e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <osMessageGet+0xc6>
 8005c96:	2300      	movs	r3, #0
 8005c98:	e000      	b.n	8005c9c <osMessageGet+0xc8>
 8005c9a:	2340      	movs	r3, #64	@ 0x40
 8005c9c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	461c      	mov	r4, r3
 8005ca2:	f107 0314 	add.w	r3, r7, #20
 8005ca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	372c      	adds	r7, #44	@ 0x2c
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd90      	pop	{r4, r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f103 0208 	add.w	r2, r3, #8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f103 0208 	add.w	r2, r3, #8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f103 0208 	add.w	r2, r3, #8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr

08005d12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr

08005d58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d103      	bne.n	8005d78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e00c      	b.n	8005d92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e002      	b.n	8005d86 <vListInsert+0x2e>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d2f6      	bcs.n	8005d80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6892      	ldr	r2, [r2, #8]
 8005dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6852      	ldr	r2, [r2, #4]
 8005de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d103      	bne.n	8005dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	1e5a      	subs	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr
	...

08005e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e48:	f002 f858 	bl	8007efc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	441a      	add	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	441a      	add	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	22ff      	movs	r2, #255	@ 0xff
 8005e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	22ff      	movs	r2, #255	@ 0xff
 8005e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d114      	bne.n	8005ec8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01a      	beq.n	8005edc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3310      	adds	r3, #16
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fb4c 	bl	8007548 <xTaskRemoveFromEventList>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d012      	beq.n	8005edc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <xQueueGenericReset+0xd0>)
 8005eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	e009      	b.n	8005edc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3310      	adds	r3, #16
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fef5 	bl	8005cbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3324      	adds	r3, #36	@ 0x24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fef0 	bl	8005cbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005edc:	f002 f83e 	bl	8007f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ee0:	2301      	movs	r3, #1
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	e000ed04 	.word	0xe000ed04

08005ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	@ 0x38
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <xQueueGenericCreateStatic+0x56>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <xQueueGenericCreateStatic+0x5a>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <xQueueGenericCreateStatic+0x5c>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	623b      	str	r3, [r7, #32]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <xQueueGenericCreateStatic+0x84>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <xQueueGenericCreateStatic+0x88>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <xQueueGenericCreateStatic+0x8a>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	61fb      	str	r3, [r7, #28]
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	e7fd      	b.n	8005f92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f96:	2348      	movs	r3, #72	@ 0x48
 8005f98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b48      	cmp	r3, #72	@ 0x48
 8005f9e:	d00b      	beq.n	8005fb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	61bb      	str	r3, [r7, #24]
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00d      	beq.n	8005fe0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fcc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f840 	bl	8006060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3730      	adds	r7, #48	@ 0x30
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b08a      	sub	sp, #40	@ 0x28
 8005fee:	af02      	add	r7, sp, #8
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	613b      	str	r3, [r7, #16]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	fb02 f303 	mul.w	r3, r2, r3
 800601e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3348      	adds	r3, #72	@ 0x48
 8006024:	4618      	mov	r0, r3
 8006026:	f002 f86b 	bl	8008100 <pvPortMalloc>
 800602a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d011      	beq.n	8006056 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	3348      	adds	r3, #72	@ 0x48
 800603a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006044:	79fa      	ldrb	r2, [r7, #7]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f805 	bl	8006060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006056:	69bb      	ldr	r3, [r7, #24]
	}
 8006058:	4618      	mov	r0, r3
 800605a:	3720      	adds	r7, #32
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d103      	bne.n	800607c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e002      	b.n	8006082 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800608e:	2101      	movs	r1, #1
 8006090:	69b8      	ldr	r0, [r7, #24]
 8006092:	f7ff fec3 	bl	8005e1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00e      	beq.n	80060ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80060be:	2300      	movs	r3, #0
 80060c0:	2200      	movs	r2, #0
 80060c2:	2100      	movs	r1, #0
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f837 	bl	8006138 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	4603      	mov	r3, r0
 80060da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	461a      	mov	r2, r3
 80060e8:	6939      	ldr	r1, [r7, #16]
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f7ff ff7d 	bl	8005fea <xQueueGenericCreate>
 80060f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff ffd3 	bl	800609e <prvInitialiseMutex>

		return xNewQueue;
 80060f8:	68fb      	ldr	r3, [r7, #12]
	}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006102:	b580      	push	{r7, lr}
 8006104:	b088      	sub	sp, #32
 8006106:	af02      	add	r7, sp, #8
 8006108:	4603      	mov	r3, r0
 800610a:	6039      	str	r1, [r7, #0]
 800610c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800610e:	2301      	movs	r3, #1
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2200      	movs	r2, #0
 800611e:	6939      	ldr	r1, [r7, #16]
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	f7ff fee5 	bl	8005ef0 <xQueueGenericCreateStatic>
 8006126:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff ffb8 	bl	800609e <prvInitialiseMutex>

		return xNewQueue;
 800612e:	68fb      	ldr	r3, [r7, #12]
	}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	@ 0x38
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006146:	2300      	movs	r3, #0
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <xQueueGenericSend+0x34>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	e7fd      	b.n	8006168 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <xQueueGenericSend+0x42>
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <xQueueGenericSend+0x46>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <xQueueGenericSend+0x48>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <xQueueGenericSend+0x64>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d103      	bne.n	80061aa <xQueueGenericSend+0x72>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <xQueueGenericSend+0x76>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <xQueueGenericSend+0x78>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <xQueueGenericSend+0x94>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	623b      	str	r3, [r7, #32]
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061cc:	f001 fb82 	bl	80078d4 <xTaskGetSchedulerState>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <xQueueGenericSend+0xa4>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <xQueueGenericSend+0xa8>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <xQueueGenericSend+0xaa>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <xQueueGenericSend+0xc6>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	61fb      	str	r3, [r7, #28]
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	e7fd      	b.n	80061fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061fe:	f001 fe7d 	bl	8007efc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <xQueueGenericSend+0xdc>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d129      	bne.n	8006268 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800621a:	f000 fc48 	bl	8006aae <prvCopyDataToQueue>
 800621e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	3324      	adds	r3, #36	@ 0x24
 800622c:	4618      	mov	r0, r3
 800622e:	f001 f98b 	bl	8007548 <xTaskRemoveFromEventList>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006238:	4b3f      	ldr	r3, [pc, #252]	@ (8006338 <xQueueGenericSend+0x200>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	e00a      	b.n	8006260 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800624a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006250:	4b39      	ldr	r3, [pc, #228]	@ (8006338 <xQueueGenericSend+0x200>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006260:	f001 fe7c 	bl	8007f5c <vPortExitCritical>
				return pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	e063      	b.n	8006330 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800626e:	f001 fe75 	bl	8007f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006272:	2300      	movs	r3, #0
 8006274:	e05c      	b.n	8006330 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	4618      	mov	r0, r3
 8006282:	f001 f9c5 	bl	8007610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006286:	2301      	movs	r3, #1
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800628a:	f001 fe67 	bl	8007f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800628e:	f000 ff6d 	bl	800716c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006292:	f001 fe33 	bl	8007efc <vPortEnterCritical>
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800629c:	b25b      	sxtb	r3, r3
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d103      	bne.n	80062ac <xQueueGenericSend+0x174>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSend+0x18a>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062c2:	f001 fe4b 	bl	8007f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c6:	1d3a      	adds	r2, r7, #4
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 f9b4 	bl	800763c <xTaskCheckForTimeOut>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d124      	bne.n	8006324 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062dc:	f000 fcdf 	bl	8006c9e <prvIsQueueFull>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d018      	beq.n	8006318 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	3310      	adds	r3, #16
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 f904 	bl	80074fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062f6:	f000 fc6a 	bl	8006bce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062fa:	f000 ff45 	bl	8007188 <xTaskResumeAll>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f47f af7c 	bne.w	80061fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006306:	4b0c      	ldr	r3, [pc, #48]	@ (8006338 <xQueueGenericSend+0x200>)
 8006308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	e772      	b.n	80061fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800631a:	f000 fc58 	bl	8006bce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800631e:	f000 ff33 	bl	8007188 <xTaskResumeAll>
 8006322:	e76c      	b.n	80061fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006326:	f000 fc52 	bl	8006bce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800632a:	f000 ff2d 	bl	8007188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800632e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006330:	4618      	mov	r0, r3
 8006332:	3738      	adds	r7, #56	@ 0x38
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b090      	sub	sp, #64	@ 0x40
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006366:	bf00      	nop
 8006368:	bf00      	nop
 800636a:	e7fd      	b.n	8006368 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d103      	bne.n	800637a <xQueueGenericSendFromISR+0x3e>
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <xQueueGenericSendFromISR+0x42>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <xQueueGenericSendFromISR+0x44>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d103      	bne.n	80063aa <xQueueGenericSendFromISR+0x6e>
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <xQueueGenericSendFromISR+0x72>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <xQueueGenericSendFromISR+0x74>
 80063ae:	2300      	movs	r3, #0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	623b      	str	r3, [r7, #32]
}
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
 80063ca:	e7fd      	b.n	80063c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063cc:	f001 fe58 	bl	8008080 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063d0:	f3ef 8211 	mrs	r2, BASEPRI
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	61fa      	str	r2, [r7, #28]
 80063e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d302      	bcc.n	80063fe <xQueueGenericSendFromISR+0xc2>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d12f      	bne.n	800645e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006414:	f000 fb4b 	bl	8006aae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006418:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d112      	bne.n	8006448 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	3324      	adds	r3, #36	@ 0x24
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f88a 	bl	8007548 <xTaskRemoveFromEventList>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e007      	b.n	8006458 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800644c:	3301      	adds	r3, #1
 800644e:	b2db      	uxtb	r3, r3
 8006450:	b25a      	sxtb	r2, r3
 8006452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006458:	2301      	movs	r3, #1
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800645c:	e001      	b.n	8006462 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800645e:	2300      	movs	r3, #0
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006464:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800646c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800646e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006470:	4618      	mov	r0, r3
 8006472:	3740      	adds	r7, #64	@ 0x40
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08e      	sub	sp, #56	@ 0x38
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623b      	str	r3, [r7, #32]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	61fb      	str	r3, [r7, #28]
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <xQueueGiveFromISR+0x5c>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <xQueueGiveFromISR+0x60>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <xQueueGiveFromISR+0x62>
 80064d8:	2300      	movs	r3, #0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	61bb      	str	r3, [r7, #24]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064f6:	f001 fdc3 	bl	8008080 <vPortValidateInterruptPriority>
	__asm volatile
 80064fa:	f3ef 8211 	mrs	r2, BASEPRI
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	617a      	str	r2, [r7, #20]
 8006510:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006512:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006522:	429a      	cmp	r2, r3
 8006524:	d22b      	bcs.n	800657e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800652c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006538:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d112      	bne.n	8006568 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d016      	beq.n	8006578 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	3324      	adds	r3, #36	@ 0x24
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fffa 	bl	8007548 <xTaskRemoveFromEventList>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e007      	b.n	8006578 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800656c:	3301      	adds	r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	b25a      	sxtb	r2, r3
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006578:	2301      	movs	r3, #1
 800657a:	637b      	str	r3, [r7, #52]	@ 0x34
 800657c:	e001      	b.n	8006582 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800657e:	2300      	movs	r3, #0
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f383 8811 	msr	BASEPRI, r3
}
 800658c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800658e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006590:	4618      	mov	r0, r3
 8006592:	3738      	adds	r7, #56	@ 0x38
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	@ 0x30
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <xQueueReceive+0x32>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	623b      	str	r3, [r7, #32]
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <xQueueReceive+0x40>
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <xQueueReceive+0x44>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <xQueueReceive+0x46>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <xQueueReceive+0x62>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	61fb      	str	r3, [r7, #28]
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	e7fd      	b.n	80065f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065fa:	f001 f96b 	bl	80078d4 <xTaskGetSchedulerState>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <xQueueReceive+0x72>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <xQueueReceive+0x76>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <xQueueReceive+0x78>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10b      	bne.n	800662c <xQueueReceive+0x94>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	61bb      	str	r3, [r7, #24]
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	e7fd      	b.n	8006628 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800662c:	f001 fc66 	bl	8007efc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01f      	beq.n	800667c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006640:	f000 fa9f 	bl	8006b82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	1e5a      	subs	r2, r3, #1
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00f      	beq.n	8006674 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006656:	3310      	adds	r3, #16
 8006658:	4618      	mov	r0, r3
 800665a:	f000 ff75 	bl	8007548 <xTaskRemoveFromEventList>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006664:	4b3c      	ldr	r3, [pc, #240]	@ (8006758 <xQueueReceive+0x1c0>)
 8006666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006674:	f001 fc72 	bl	8007f5c <vPortExitCritical>
				return pdPASS;
 8006678:	2301      	movs	r3, #1
 800667a:	e069      	b.n	8006750 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006682:	f001 fc6b 	bl	8007f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006686:	2300      	movs	r3, #0
 8006688:	e062      	b.n	8006750 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006690:	f107 0310 	add.w	r3, r7, #16
 8006694:	4618      	mov	r0, r3
 8006696:	f000 ffbb 	bl	8007610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800669a:	2301      	movs	r3, #1
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800669e:	f001 fc5d 	bl	8007f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066a2:	f000 fd63 	bl	800716c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066a6:	f001 fc29 	bl	8007efc <vPortEnterCritical>
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066b0:	b25b      	sxtb	r3, r3
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d103      	bne.n	80066c0 <xQueueReceive+0x128>
 80066b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d103      	bne.n	80066d6 <xQueueReceive+0x13e>
 80066ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066d6:	f001 fc41 	bl	8007f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066da:	1d3a      	adds	r2, r7, #4
 80066dc:	f107 0310 	add.w	r3, r7, #16
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 ffaa 	bl	800763c <xTaskCheckForTimeOut>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d123      	bne.n	8006736 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f0:	f000 fabf 	bl	8006c72 <prvIsQueueEmpty>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d017      	beq.n	800672a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	3324      	adds	r3, #36	@ 0x24
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4611      	mov	r1, r2
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fefa 	bl	80074fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800670a:	f000 fa60 	bl	8006bce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800670e:	f000 fd3b 	bl	8007188 <xTaskResumeAll>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d189      	bne.n	800662c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006718:	4b0f      	ldr	r3, [pc, #60]	@ (8006758 <xQueueReceive+0x1c0>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	e780      	b.n	800662c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800672a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800672c:	f000 fa4f 	bl	8006bce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006730:	f000 fd2a 	bl	8007188 <xTaskResumeAll>
 8006734:	e77a      	b.n	800662c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006738:	f000 fa49 	bl	8006bce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800673c:	f000 fd24 	bl	8007188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006740:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006742:	f000 fa96 	bl	8006c72 <prvIsQueueEmpty>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	f43f af6f 	beq.w	800662c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800674e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006750:	4618      	mov	r0, r3
 8006752:	3730      	adds	r7, #48	@ 0x30
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08e      	sub	sp, #56	@ 0x38
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800676e:	2300      	movs	r3, #0
 8006770:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10b      	bne.n	8006790 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	623b      	str	r3, [r7, #32]
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	e7fd      	b.n	800678c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	61fb      	str	r3, [r7, #28]
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b0:	f001 f890 	bl	80078d4 <xTaskGetSchedulerState>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <xQueueSemaphoreTake+0x64>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <xQueueSemaphoreTake+0x68>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <xQueueSemaphoreTake+0x6a>
 80067c4:	2300      	movs	r3, #0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	61bb      	str	r3, [r7, #24]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067e2:	f001 fb8b 	bl	8007efc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d024      	beq.n	800683c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f4:	1e5a      	subs	r2, r3, #1
 80067f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006802:	f001 fa13 	bl	8007c2c <pvTaskIncrementMutexHeldCount>
 8006806:	4602      	mov	r2, r0
 8006808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00f      	beq.n	8006834 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006816:	3310      	adds	r3, #16
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fe95 	bl	8007548 <xTaskRemoveFromEventList>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006824:	4b54      	ldr	r3, [pc, #336]	@ (8006978 <xQueueSemaphoreTake+0x21c>)
 8006826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006834:	f001 fb92 	bl	8007f5c <vPortExitCritical>
				return pdPASS;
 8006838:	2301      	movs	r3, #1
 800683a:	e098      	b.n	800696e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d112      	bne.n	8006868 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	617b      	str	r3, [r7, #20]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006860:	f001 fb7c 	bl	8007f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006864:	2300      	movs	r3, #0
 8006866:	e082      	b.n	800696e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800686e:	f107 030c 	add.w	r3, r7, #12
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fecc 	bl	8007610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006878:	2301      	movs	r3, #1
 800687a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800687c:	f001 fb6e 	bl	8007f5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006880:	f000 fc74 	bl	800716c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006884:	f001 fb3a 	bl	8007efc <vPortEnterCritical>
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800688e:	b25b      	sxtb	r3, r3
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006894:	d103      	bne.n	800689e <xQueueSemaphoreTake+0x142>
 8006896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d103      	bne.n	80068b4 <xQueueSemaphoreTake+0x158>
 80068ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068b4:	f001 fb52 	bl	8007f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068b8:	463a      	mov	r2, r7
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	4611      	mov	r1, r2
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 febb 	bl	800763c <xTaskCheckForTimeOut>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d132      	bne.n	8006932 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068ce:	f000 f9d0 	bl	8006c72 <prvIsQueueEmpty>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d026      	beq.n	8006926 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80068e0:	f001 fb0c 	bl	8007efc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f811 	bl	8007910 <xTaskPriorityInherit>
 80068ee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80068f0:	f001 fb34 	bl	8007f5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	3324      	adds	r3, #36	@ 0x24
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fdfd 	bl	80074fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006902:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006904:	f000 f963 	bl	8006bce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006908:	f000 fc3e 	bl	8007188 <xTaskResumeAll>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	f47f af67 	bne.w	80067e2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006914:	4b18      	ldr	r3, [pc, #96]	@ (8006978 <xQueueSemaphoreTake+0x21c>)
 8006916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	e75d      	b.n	80067e2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006926:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006928:	f000 f951 	bl	8006bce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800692c:	f000 fc2c 	bl	8007188 <xTaskResumeAll>
 8006930:	e757      	b.n	80067e2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006932:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006934:	f000 f94b 	bl	8006bce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006938:	f000 fc26 	bl	8007188 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800693c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800693e:	f000 f998 	bl	8006c72 <prvIsQueueEmpty>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	f43f af4c 	beq.w	80067e2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00d      	beq.n	800696c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006950:	f001 fad4 	bl	8007efc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006954:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006956:	f000 f893 	bl	8006a80 <prvGetDisinheritPriorityAfterTimeout>
 800695a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006962:	4618      	mov	r0, r3
 8006964:	f001 f8d2 	bl	8007b0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006968:	f001 faf8 	bl	8007f5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800696c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800696e:	4618      	mov	r0, r3
 8006970:	3738      	adds	r7, #56	@ 0x38
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08e      	sub	sp, #56	@ 0x38
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10b      	bne.n	80069aa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	623b      	str	r3, [r7, #32]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d103      	bne.n	80069b8 <xQueueReceiveFromISR+0x3c>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <xQueueReceiveFromISR+0x40>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e000      	b.n	80069be <xQueueReceiveFromISR+0x42>
 80069bc:	2300      	movs	r3, #0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10b      	bne.n	80069da <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	61fb      	str	r3, [r7, #28]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069da:	f001 fb51 	bl	8008080 <vPortValidateInterruptPriority>
	__asm volatile
 80069de:	f3ef 8211 	mrs	r2, BASEPRI
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	61ba      	str	r2, [r7, #24]
 80069f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d02f      	beq.n	8006a66 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a14:	f000 f8b5 	bl	8006b82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1a:	1e5a      	subs	r2, r3, #1
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a28:	d112      	bne.n	8006a50 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d016      	beq.n	8006a60 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	3310      	adds	r3, #16
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fd86 	bl	8007548 <xTaskRemoveFromEventList>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00e      	beq.n	8006a60 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e007      	b.n	8006a60 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a54:	3301      	adds	r3, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	b25a      	sxtb	r2, r3
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006a60:	2301      	movs	r3, #1
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a64:	e001      	b.n	8006a6a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3738      	adds	r7, #56	@ 0x38
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d006      	beq.n	8006a9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1c3 0307 	rsb	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	e001      	b.n	8006aa2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
	}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b086      	sub	sp, #24
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10d      	bne.n	8006ae8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d14d      	bne.n	8006b70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ff8f 	bl	80079fc <xTaskPriorityDisinherit>
 8006ade:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	609a      	str	r2, [r3, #8]
 8006ae6:	e043      	b.n	8006b70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d119      	bne.n	8006b22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6858      	ldr	r0, [r3, #4]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af6:	461a      	mov	r2, r3
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	f002 fb7e 	bl	80091fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b06:	441a      	add	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d32b      	bcc.n	8006b70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	e026      	b.n	8006b70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	68d8      	ldr	r0, [r3, #12]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	f002 fb64 	bl	80091fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	425b      	negs	r3, r3
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d207      	bcs.n	8006b5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	425b      	negs	r3, r3
 8006b58:	441a      	add	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d105      	bne.n	8006b70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006b78:	697b      	ldr	r3, [r7, #20]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d018      	beq.n	8006bc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9c:	441a      	add	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d303      	bcc.n	8006bb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68d9      	ldr	r1, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6838      	ldr	r0, [r7, #0]
 8006bc2:	f002 fb1a 	bl	80091fa <memcpy>
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bd6:	f001 f991 	bl	8007efc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006be0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006be2:	e011      	b.n	8006c08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d012      	beq.n	8006c12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3324      	adds	r3, #36	@ 0x24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fca9 	bl	8007548 <xTaskRemoveFromEventList>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006bfc:	f000 fd82 	bl	8007704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dce9      	bgt.n	8006be4 <prvUnlockQueue+0x16>
 8006c10:	e000      	b.n	8006c14 <prvUnlockQueue+0x46>
					break;
 8006c12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	22ff      	movs	r2, #255	@ 0xff
 8006c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006c1c:	f001 f99e 	bl	8007f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c20:	f001 f96c 	bl	8007efc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c2c:	e011      	b.n	8006c52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d012      	beq.n	8006c5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3310      	adds	r3, #16
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fc84 	bl	8007548 <xTaskRemoveFromEventList>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c46:	f000 fd5d 	bl	8007704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dce9      	bgt.n	8006c2e <prvUnlockQueue+0x60>
 8006c5a:	e000      	b.n	8006c5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	22ff      	movs	r2, #255	@ 0xff
 8006c62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006c66:	f001 f979 	bl	8007f5c <vPortExitCritical>
}
 8006c6a:	bf00      	nop
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c7a:	f001 f93f 	bl	8007efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d102      	bne.n	8006c8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c86:	2301      	movs	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e001      	b.n	8006c90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c90:	f001 f964 	bl	8007f5c <vPortExitCritical>

	return xReturn;
 8006c94:	68fb      	ldr	r3, [r7, #12]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ca6:	f001 f929 	bl	8007efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d102      	bne.n	8006cbc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	e001      	b.n	8006cc0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cc0:	f001 f94c 	bl	8007f5c <vPortExitCritical>

	return xReturn;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b08e      	sub	sp, #56	@ 0x38
 8006cd2:	af04      	add	r7, sp, #16
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <xTaskCreateStatic+0x2c>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	623b      	str	r3, [r7, #32]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	61fb      	str	r3, [r7, #28]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d18:	23a0      	movs	r3, #160	@ 0xa0
 8006d1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006d20:	d00b      	beq.n	8006d3a <xTaskCreateStatic+0x6c>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	61bb      	str	r3, [r7, #24]
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	e7fd      	b.n	8006d36 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01e      	beq.n	8006d80 <xTaskCreateStatic+0xb2>
 8006d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d50:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	9303      	str	r3, [sp, #12]
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	9302      	str	r3, [sp, #8]
 8006d62:	f107 0314 	add.w	r3, r7, #20
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f850 	bl	8006e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d7a:	f000 f8ed 	bl	8006f58 <prvAddNewTaskToReadyList>
 8006d7e:	e001      	b.n	8006d84 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d84:	697b      	ldr	r3, [r7, #20]
	}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3728      	adds	r7, #40	@ 0x28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b08c      	sub	sp, #48	@ 0x30
 8006d92:	af04      	add	r7, sp, #16
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	603b      	str	r3, [r7, #0]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f9ac 	bl	8008100 <pvPortMalloc>
 8006da8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00e      	beq.n	8006dce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006db0:	20a0      	movs	r0, #160	@ 0xa0
 8006db2:	f001 f9a5 	bl	8008100 <pvPortMalloc>
 8006db6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dc4:	e005      	b.n	8006dd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dc6:	6978      	ldr	r0, [r7, #20]
 8006dc8:	f001 fa68 	bl	800829c <vPortFree>
 8006dcc:	e001      	b.n	8006dd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d017      	beq.n	8006e08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006de0:	88fa      	ldrh	r2, [r7, #6]
 8006de2:	2300      	movs	r3, #0
 8006de4:	9303      	str	r3, [sp, #12]
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	9302      	str	r3, [sp, #8]
 8006dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f80e 	bl	8006e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dfc:	69f8      	ldr	r0, [r7, #28]
 8006dfe:	f000 f8ab 	bl	8006f58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e02:	2301      	movs	r3, #1
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	e002      	b.n	8006e0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
	}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e30:	3b01      	subs	r3, #1
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f023 0307 	bic.w	r3, r3, #7
 8006e3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	617b      	str	r3, [r7, #20]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01f      	beq.n	8006ea8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	e012      	b.n	8006e94 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	7819      	ldrb	r1, [r3, #0]
 8006e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3334      	adds	r3, #52	@ 0x34
 8006e7e:	460a      	mov	r2, r1
 8006e80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d006      	beq.n	8006e9c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	3301      	adds	r3, #1
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	d9e9      	bls.n	8006e6e <prvInitialiseNewTask+0x56>
 8006e9a:	e000      	b.n	8006e9e <prvInitialiseNewTask+0x86>
			{
				break;
 8006e9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ea6:	e003      	b.n	8006eb0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb2:	2b06      	cmp	r3, #6
 8006eb4:	d901      	bls.n	8006eba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006eb6:	2306      	movs	r3, #6
 8006eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ec4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	2200      	movs	r2, #0
 8006eca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe ff12 	bl	8005cfa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	3318      	adds	r3, #24
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe ff0d 	bl	8005cfa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	f1c3 0207 	rsb	r2, r3, #7
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	334c      	adds	r3, #76	@ 0x4c
 8006f0a:	224c      	movs	r2, #76	@ 0x4c
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f002 f88f 	bl	8009032 <memset>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	4a0d      	ldr	r2, [pc, #52]	@ (8006f4c <prvInitialiseNewTask+0x134>)
 8006f18:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006f50 <prvInitialiseNewTask+0x138>)
 8006f1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	4a0c      	ldr	r2, [pc, #48]	@ (8006f54 <prvInitialiseNewTask+0x13c>)
 8006f24:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	69b8      	ldr	r0, [r7, #24]
 8006f2c:	f000 fef8 	bl	8007d20 <pxPortInitialiseStack>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f42:	bf00      	nop
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20004788 	.word	0x20004788
 8006f50:	200047f0 	.word	0x200047f0
 8006f54:	20004858 	.word	0x20004858

08006f58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f60:	f000 ffcc 	bl	8007efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f64:	4b2a      	ldr	r3, [pc, #168]	@ (8007010 <prvAddNewTaskToReadyList+0xb8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	4a29      	ldr	r2, [pc, #164]	@ (8007010 <prvAddNewTaskToReadyList+0xb8>)
 8006f6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f6e:	4b29      	ldr	r3, [pc, #164]	@ (8007014 <prvAddNewTaskToReadyList+0xbc>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f76:	4a27      	ldr	r2, [pc, #156]	@ (8007014 <prvAddNewTaskToReadyList+0xbc>)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f7c:	4b24      	ldr	r3, [pc, #144]	@ (8007010 <prvAddNewTaskToReadyList+0xb8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d110      	bne.n	8006fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f84:	f000 fbe2 	bl	800774c <prvInitialiseTaskLists>
 8006f88:	e00d      	b.n	8006fa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f8a:	4b23      	ldr	r3, [pc, #140]	@ (8007018 <prvAddNewTaskToReadyList+0xc0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f92:	4b20      	ldr	r3, [pc, #128]	@ (8007014 <prvAddNewTaskToReadyList+0xbc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d802      	bhi.n	8006fa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8007014 <prvAddNewTaskToReadyList+0xbc>)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800701c <prvAddNewTaskToReadyList+0xc4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	4a1b      	ldr	r2, [pc, #108]	@ (800701c <prvAddNewTaskToReadyList+0xc4>)
 8006fae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	409a      	lsls	r2, r3
 8006fb8:	4b19      	ldr	r3, [pc, #100]	@ (8007020 <prvAddNewTaskToReadyList+0xc8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	4a18      	ldr	r2, [pc, #96]	@ (8007020 <prvAddNewTaskToReadyList+0xc8>)
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4a15      	ldr	r2, [pc, #84]	@ (8007024 <prvAddNewTaskToReadyList+0xcc>)
 8006fd0:	441a      	add	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fe fe9a 	bl	8005d12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fde:	f000 ffbd 	bl	8007f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <prvAddNewTaskToReadyList+0xc0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00e      	beq.n	8007008 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fea:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <prvAddNewTaskToReadyList+0xbc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d207      	bcs.n	8007008 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8007028 <prvAddNewTaskToReadyList+0xd0>)
 8006ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20000734 	.word	0x20000734
 8007014:	20000634 	.word	0x20000634
 8007018:	20000740 	.word	0x20000740
 800701c:	20000750 	.word	0x20000750
 8007020:	2000073c 	.word	0x2000073c
 8007024:	20000638 	.word	0x20000638
 8007028:	e000ed04 	.word	0xe000ed04

0800702c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d018      	beq.n	8007070 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800703e:	4b14      	ldr	r3, [pc, #80]	@ (8007090 <vTaskDelay+0x64>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <vTaskDelay+0x32>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	60bb      	str	r3, [r7, #8]
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	e7fd      	b.n	800705a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800705e:	f000 f885 	bl	800716c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007062:	2100      	movs	r1, #0
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fdf5 	bl	8007c54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800706a:	f000 f88d 	bl	8007188 <xTaskResumeAll>
 800706e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d107      	bne.n	8007086 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007076:	4b07      	ldr	r3, [pc, #28]	@ (8007094 <vTaskDelay+0x68>)
 8007078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	2000075c 	.word	0x2000075c
 8007094:	e000ed04 	.word	0xe000ed04

08007098 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	@ 0x28
 800709c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070a6:	463a      	mov	r2, r7
 80070a8:	1d39      	adds	r1, r7, #4
 80070aa:	f107 0308 	add.w	r3, r7, #8
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fa fa70 	bl	8001594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	9202      	str	r2, [sp, #8]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	2300      	movs	r3, #0
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	2300      	movs	r3, #0
 80070c4:	460a      	mov	r2, r1
 80070c6:	4921      	ldr	r1, [pc, #132]	@ (800714c <vTaskStartScheduler+0xb4>)
 80070c8:	4821      	ldr	r0, [pc, #132]	@ (8007150 <vTaskStartScheduler+0xb8>)
 80070ca:	f7ff fe00 	bl	8006cce <xTaskCreateStatic>
 80070ce:	4603      	mov	r3, r0
 80070d0:	4a20      	ldr	r2, [pc, #128]	@ (8007154 <vTaskStartScheduler+0xbc>)
 80070d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070d4:	4b1f      	ldr	r3, [pc, #124]	@ (8007154 <vTaskStartScheduler+0xbc>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070dc:	2301      	movs	r3, #1
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e001      	b.n	80070e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d11b      	bne.n	8007124 <vTaskStartScheduler+0x8c>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	613b      	str	r3, [r7, #16]
}
 80070fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007100:	4b15      	ldr	r3, [pc, #84]	@ (8007158 <vTaskStartScheduler+0xc0>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	334c      	adds	r3, #76	@ 0x4c
 8007106:	4a15      	ldr	r2, [pc, #84]	@ (800715c <vTaskStartScheduler+0xc4>)
 8007108:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800710a:	4b15      	ldr	r3, [pc, #84]	@ (8007160 <vTaskStartScheduler+0xc8>)
 800710c:	f04f 32ff 	mov.w	r2, #4294967295
 8007110:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007112:	4b14      	ldr	r3, [pc, #80]	@ (8007164 <vTaskStartScheduler+0xcc>)
 8007114:	2201      	movs	r2, #1
 8007116:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007118:	4b13      	ldr	r3, [pc, #76]	@ (8007168 <vTaskStartScheduler+0xd0>)
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800711e:	f000 fe7b 	bl	8007e18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007122:	e00f      	b.n	8007144 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712a:	d10b      	bne.n	8007144 <vTaskStartScheduler+0xac>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60fb      	str	r3, [r7, #12]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <vTaskStartScheduler+0xa8>
}
 8007144:	bf00      	nop
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	0800bd3c 	.word	0x0800bd3c
 8007150:	0800771d 	.word	0x0800771d
 8007154:	20000758 	.word	0x20000758
 8007158:	20000634 	.word	0x20000634
 800715c:	2000003c 	.word	0x2000003c
 8007160:	20000754 	.word	0x20000754
 8007164:	20000740 	.word	0x20000740
 8007168:	20000738 	.word	0x20000738

0800716c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007170:	4b04      	ldr	r3, [pc, #16]	@ (8007184 <vTaskSuspendAll+0x18>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	4a03      	ldr	r2, [pc, #12]	@ (8007184 <vTaskSuspendAll+0x18>)
 8007178:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800717a:	bf00      	nop
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	2000075c 	.word	0x2000075c

08007188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007192:	2300      	movs	r3, #0
 8007194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007196:	4b42      	ldr	r3, [pc, #264]	@ (80072a0 <xTaskResumeAll+0x118>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10b      	bne.n	80071b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	603b      	str	r3, [r7, #0]
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071b6:	f000 fea1 	bl	8007efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071ba:	4b39      	ldr	r3, [pc, #228]	@ (80072a0 <xTaskResumeAll+0x118>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3b01      	subs	r3, #1
 80071c0:	4a37      	ldr	r2, [pc, #220]	@ (80072a0 <xTaskResumeAll+0x118>)
 80071c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c4:	4b36      	ldr	r3, [pc, #216]	@ (80072a0 <xTaskResumeAll+0x118>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d161      	bne.n	8007290 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071cc:	4b35      	ldr	r3, [pc, #212]	@ (80072a4 <xTaskResumeAll+0x11c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d05d      	beq.n	8007290 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071d4:	e02e      	b.n	8007234 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d6:	4b34      	ldr	r3, [pc, #208]	@ (80072a8 <xTaskResumeAll+0x120>)
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3318      	adds	r3, #24
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fdf0 	bl	8005dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe fdeb 	bl	8005dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	2201      	movs	r2, #1
 80071f8:	409a      	lsls	r2, r3
 80071fa:	4b2c      	ldr	r3, [pc, #176]	@ (80072ac <xTaskResumeAll+0x124>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4313      	orrs	r3, r2
 8007200:	4a2a      	ldr	r2, [pc, #168]	@ (80072ac <xTaskResumeAll+0x124>)
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4a27      	ldr	r2, [pc, #156]	@ (80072b0 <xTaskResumeAll+0x128>)
 8007212:	441a      	add	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f7fe fd79 	bl	8005d12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007224:	4b23      	ldr	r3, [pc, #140]	@ (80072b4 <xTaskResumeAll+0x12c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722a:	429a      	cmp	r2, r3
 800722c:	d302      	bcc.n	8007234 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800722e:	4b22      	ldr	r3, [pc, #136]	@ (80072b8 <xTaskResumeAll+0x130>)
 8007230:	2201      	movs	r2, #1
 8007232:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007234:	4b1c      	ldr	r3, [pc, #112]	@ (80072a8 <xTaskResumeAll+0x120>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1cc      	bne.n	80071d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007242:	f000 fb27 	bl	8007894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007246:	4b1d      	ldr	r3, [pc, #116]	@ (80072bc <xTaskResumeAll+0x134>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d010      	beq.n	8007274 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007252:	f000 f837 	bl	80072c4 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800725c:	4b16      	ldr	r3, [pc, #88]	@ (80072b8 <xTaskResumeAll+0x130>)
 800725e:	2201      	movs	r2, #1
 8007260:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3b01      	subs	r3, #1
 8007266:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f1      	bne.n	8007252 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800726e:	4b13      	ldr	r3, [pc, #76]	@ (80072bc <xTaskResumeAll+0x134>)
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007274:	4b10      	ldr	r3, [pc, #64]	@ (80072b8 <xTaskResumeAll+0x130>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007280:	4b0f      	ldr	r3, [pc, #60]	@ (80072c0 <xTaskResumeAll+0x138>)
 8007282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007290:	f000 fe64 	bl	8007f5c <vPortExitCritical>

	return xAlreadyYielded;
 8007294:	68bb      	ldr	r3, [r7, #8]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000075c 	.word	0x2000075c
 80072a4:	20000734 	.word	0x20000734
 80072a8:	200006f4 	.word	0x200006f4
 80072ac:	2000073c 	.word	0x2000073c
 80072b0:	20000638 	.word	0x20000638
 80072b4:	20000634 	.word	0x20000634
 80072b8:	20000748 	.word	0x20000748
 80072bc:	20000744 	.word	0x20000744
 80072c0:	e000ed04 	.word	0xe000ed04

080072c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ce:	4b4f      	ldr	r3, [pc, #316]	@ (800740c <xTaskIncrementTick+0x148>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 808f 	bne.w	80073f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007410 <xTaskIncrementTick+0x14c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072e0:	4a4b      	ldr	r2, [pc, #300]	@ (8007410 <xTaskIncrementTick+0x14c>)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d121      	bne.n	8007330 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80072ec:	4b49      	ldr	r3, [pc, #292]	@ (8007414 <xTaskIncrementTick+0x150>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <xTaskIncrementTick+0x4a>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	603b      	str	r3, [r7, #0]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <xTaskIncrementTick+0x46>
 800730e:	4b41      	ldr	r3, [pc, #260]	@ (8007414 <xTaskIncrementTick+0x150>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	4b40      	ldr	r3, [pc, #256]	@ (8007418 <xTaskIncrementTick+0x154>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a3e      	ldr	r2, [pc, #248]	@ (8007414 <xTaskIncrementTick+0x150>)
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	4a3e      	ldr	r2, [pc, #248]	@ (8007418 <xTaskIncrementTick+0x154>)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	4b3e      	ldr	r3, [pc, #248]	@ (800741c <xTaskIncrementTick+0x158>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3301      	adds	r3, #1
 8007328:	4a3c      	ldr	r2, [pc, #240]	@ (800741c <xTaskIncrementTick+0x158>)
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	f000 fab2 	bl	8007894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007330:	4b3b      	ldr	r3, [pc, #236]	@ (8007420 <xTaskIncrementTick+0x15c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	429a      	cmp	r2, r3
 8007338:	d348      	bcc.n	80073cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800733a:	4b36      	ldr	r3, [pc, #216]	@ (8007414 <xTaskIncrementTick+0x150>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007344:	4b36      	ldr	r3, [pc, #216]	@ (8007420 <xTaskIncrementTick+0x15c>)
 8007346:	f04f 32ff 	mov.w	r2, #4294967295
 800734a:	601a      	str	r2, [r3, #0]
					break;
 800734c:	e03e      	b.n	80073cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800734e:	4b31      	ldr	r3, [pc, #196]	@ (8007414 <xTaskIncrementTick+0x150>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d203      	bcs.n	800736e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007366:	4a2e      	ldr	r2, [pc, #184]	@ (8007420 <xTaskIncrementTick+0x15c>)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800736c:	e02e      	b.n	80073cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	3304      	adds	r3, #4
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fd28 	bl	8005dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	3318      	adds	r3, #24
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe fd1f 	bl	8005dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	2201      	movs	r2, #1
 8007390:	409a      	lsls	r2, r3
 8007392:	4b24      	ldr	r3, [pc, #144]	@ (8007424 <xTaskIncrementTick+0x160>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	4a22      	ldr	r2, [pc, #136]	@ (8007424 <xTaskIncrementTick+0x160>)
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007428 <xTaskIncrementTick+0x164>)
 80073aa:	441a      	add	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fe fcad 	bl	8005d12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073bc:	4b1b      	ldr	r3, [pc, #108]	@ (800742c <xTaskIncrementTick+0x168>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d3b9      	bcc.n	800733a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80073c6:	2301      	movs	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ca:	e7b6      	b.n	800733a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073cc:	4b17      	ldr	r3, [pc, #92]	@ (800742c <xTaskIncrementTick+0x168>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d2:	4915      	ldr	r1, [pc, #84]	@ (8007428 <xTaskIncrementTick+0x164>)
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d901      	bls.n	80073e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073e8:	4b11      	ldr	r3, [pc, #68]	@ (8007430 <xTaskIncrementTick+0x16c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80073f0:	2301      	movs	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	e004      	b.n	8007400 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007434 <xTaskIncrementTick+0x170>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3301      	adds	r3, #1
 80073fc:	4a0d      	ldr	r2, [pc, #52]	@ (8007434 <xTaskIncrementTick+0x170>)
 80073fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007400:	697b      	ldr	r3, [r7, #20]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	2000075c 	.word	0x2000075c
 8007410:	20000738 	.word	0x20000738
 8007414:	200006ec 	.word	0x200006ec
 8007418:	200006f0 	.word	0x200006f0
 800741c:	2000074c 	.word	0x2000074c
 8007420:	20000754 	.word	0x20000754
 8007424:	2000073c 	.word	0x2000073c
 8007428:	20000638 	.word	0x20000638
 800742c:	20000634 	.word	0x20000634
 8007430:	20000748 	.word	0x20000748
 8007434:	20000744 	.word	0x20000744

08007438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800743e:	4b29      	ldr	r3, [pc, #164]	@ (80074e4 <vTaskSwitchContext+0xac>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007446:	4b28      	ldr	r3, [pc, #160]	@ (80074e8 <vTaskSwitchContext+0xb0>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800744c:	e045      	b.n	80074da <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800744e:	4b26      	ldr	r3, [pc, #152]	@ (80074e8 <vTaskSwitchContext+0xb0>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007454:	4b25      	ldr	r3, [pc, #148]	@ (80074ec <vTaskSwitchContext+0xb4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	fab3 f383 	clz	r3, r3
 8007460:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	f1c3 031f 	rsb	r3, r3, #31
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	4921      	ldr	r1, [pc, #132]	@ (80074f0 <vTaskSwitchContext+0xb8>)
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <vTaskSwitchContext+0x5e>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <vTaskSwitchContext+0x5a>
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4a13      	ldr	r2, [pc, #76]	@ (80074f0 <vTaskSwitchContext+0xb8>)
 80074a2:	4413      	add	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	605a      	str	r2, [r3, #4]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	3308      	adds	r3, #8
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d104      	bne.n	80074c6 <vTaskSwitchContext+0x8e>
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4a09      	ldr	r2, [pc, #36]	@ (80074f4 <vTaskSwitchContext+0xbc>)
 80074ce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074d0:	4b08      	ldr	r3, [pc, #32]	@ (80074f4 <vTaskSwitchContext+0xbc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	334c      	adds	r3, #76	@ 0x4c
 80074d6:	4a08      	ldr	r2, [pc, #32]	@ (80074f8 <vTaskSwitchContext+0xc0>)
 80074d8:	6013      	str	r3, [r2, #0]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr
 80074e4:	2000075c 	.word	0x2000075c
 80074e8:	20000748 	.word	0x20000748
 80074ec:	2000073c 	.word	0x2000073c
 80074f0:	20000638 	.word	0x20000638
 80074f4:	20000634 	.word	0x20000634
 80074f8:	2000003c 	.word	0x2000003c

080074fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10b      	bne.n	8007524 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	60fb      	str	r3, [r7, #12]
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	e7fd      	b.n	8007520 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007524:	4b07      	ldr	r3, [pc, #28]	@ (8007544 <vTaskPlaceOnEventList+0x48>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3318      	adds	r3, #24
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7fe fc13 	bl	8005d58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007532:	2101      	movs	r1, #1
 8007534:	6838      	ldr	r0, [r7, #0]
 8007536:	f000 fb8d 	bl	8007c54 <prvAddCurrentTaskToDelayedList>
}
 800753a:	bf00      	nop
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000634 	.word	0x20000634

08007548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10b      	bne.n	8007576 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	60fb      	str	r3, [r7, #12]
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	e7fd      	b.n	8007572 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	3318      	adds	r3, #24
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fc24 	bl	8005dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007580:	4b1d      	ldr	r3, [pc, #116]	@ (80075f8 <xTaskRemoveFromEventList+0xb0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d11c      	bne.n	80075c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	3304      	adds	r3, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe fc1b 	bl	8005dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	2201      	movs	r2, #1
 8007598:	409a      	lsls	r2, r3
 800759a:	4b18      	ldr	r3, [pc, #96]	@ (80075fc <xTaskRemoveFromEventList+0xb4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4313      	orrs	r3, r2
 80075a0:	4a16      	ldr	r2, [pc, #88]	@ (80075fc <xTaskRemoveFromEventList+0xb4>)
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4a13      	ldr	r2, [pc, #76]	@ (8007600 <xTaskRemoveFromEventList+0xb8>)
 80075b2:	441a      	add	r2, r3
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fe fba9 	bl	8005d12 <vListInsertEnd>
 80075c0:	e005      	b.n	80075ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	3318      	adds	r3, #24
 80075c6:	4619      	mov	r1, r3
 80075c8:	480e      	ldr	r0, [pc, #56]	@ (8007604 <xTaskRemoveFromEventList+0xbc>)
 80075ca:	f7fe fba2 	bl	8005d12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <xTaskRemoveFromEventList+0xc0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d905      	bls.n	80075e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075e0:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <xTaskRemoveFromEventList+0xc4>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	e001      	b.n	80075ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075ec:	697b      	ldr	r3, [r7, #20]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	2000075c 	.word	0x2000075c
 80075fc:	2000073c 	.word	0x2000073c
 8007600:	20000638 	.word	0x20000638
 8007604:	200006f4 	.word	0x200006f4
 8007608:	20000634 	.word	0x20000634
 800760c:	20000748 	.word	0x20000748

08007610 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007618:	4b06      	ldr	r3, [pc, #24]	@ (8007634 <vTaskInternalSetTimeOutState+0x24>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <vTaskInternalSetTimeOutState+0x28>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	605a      	str	r2, [r3, #4]
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	2000074c 	.word	0x2000074c
 8007638:	20000738 	.word	0x20000738

0800763c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	613b      	str	r3, [r7, #16]
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10b      	bne.n	8007682 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	60fb      	str	r3, [r7, #12]
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	e7fd      	b.n	800767e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007682:	f000 fc3b 	bl	8007efc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007686:	4b1d      	ldr	r3, [pc, #116]	@ (80076fc <xTaskCheckForTimeOut+0xc0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769e:	d102      	bne.n	80076a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	e023      	b.n	80076ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b15      	ldr	r3, [pc, #84]	@ (8007700 <xTaskCheckForTimeOut+0xc4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d007      	beq.n	80076c2 <xTaskCheckForTimeOut+0x86>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d302      	bcc.n	80076c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076bc:	2301      	movs	r3, #1
 80076be:	61fb      	str	r3, [r7, #28]
 80076c0:	e015      	b.n	80076ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d20b      	bcs.n	80076e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	1ad2      	subs	r2, r2, r3
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ff99 	bl	8007610 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	e004      	b.n	80076ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076ee:	f000 fc35 	bl	8007f5c <vPortExitCritical>

	return xReturn;
 80076f2:	69fb      	ldr	r3, [r7, #28]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000738 	.word	0x20000738
 8007700:	2000074c 	.word	0x2000074c

08007704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007708:	4b03      	ldr	r3, [pc, #12]	@ (8007718 <vTaskMissedYield+0x14>)
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
}
 800770e:	bf00      	nop
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	20000748 	.word	0x20000748

0800771c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007724:	f000 f852 	bl	80077cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007728:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <prvIdleTask+0x28>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d9f9      	bls.n	8007724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007730:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <prvIdleTask+0x2c>)
 8007732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007740:	e7f0      	b.n	8007724 <prvIdleTask+0x8>
 8007742:	bf00      	nop
 8007744:	20000638 	.word	0x20000638
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	e00c      	b.n	8007772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4a12      	ldr	r2, [pc, #72]	@ (80077ac <prvInitialiseTaskLists+0x60>)
 8007764:	4413      	add	r3, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe faa8 	bl	8005cbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3301      	adds	r3, #1
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b06      	cmp	r3, #6
 8007776:	d9ef      	bls.n	8007758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007778:	480d      	ldr	r0, [pc, #52]	@ (80077b0 <prvInitialiseTaskLists+0x64>)
 800777a:	f7fe fa9f 	bl	8005cbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800777e:	480d      	ldr	r0, [pc, #52]	@ (80077b4 <prvInitialiseTaskLists+0x68>)
 8007780:	f7fe fa9c 	bl	8005cbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007784:	480c      	ldr	r0, [pc, #48]	@ (80077b8 <prvInitialiseTaskLists+0x6c>)
 8007786:	f7fe fa99 	bl	8005cbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800778a:	480c      	ldr	r0, [pc, #48]	@ (80077bc <prvInitialiseTaskLists+0x70>)
 800778c:	f7fe fa96 	bl	8005cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007790:	480b      	ldr	r0, [pc, #44]	@ (80077c0 <prvInitialiseTaskLists+0x74>)
 8007792:	f7fe fa93 	bl	8005cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007796:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <prvInitialiseTaskLists+0x78>)
 8007798:	4a05      	ldr	r2, [pc, #20]	@ (80077b0 <prvInitialiseTaskLists+0x64>)
 800779a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800779c:	4b0a      	ldr	r3, [pc, #40]	@ (80077c8 <prvInitialiseTaskLists+0x7c>)
 800779e:	4a05      	ldr	r2, [pc, #20]	@ (80077b4 <prvInitialiseTaskLists+0x68>)
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000638 	.word	0x20000638
 80077b0:	200006c4 	.word	0x200006c4
 80077b4:	200006d8 	.word	0x200006d8
 80077b8:	200006f4 	.word	0x200006f4
 80077bc:	20000708 	.word	0x20000708
 80077c0:	20000720 	.word	0x20000720
 80077c4:	200006ec 	.word	0x200006ec
 80077c8:	200006f0 	.word	0x200006f0

080077cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077d2:	e019      	b.n	8007808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077d4:	f000 fb92 	bl	8007efc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d8:	4b10      	ldr	r3, [pc, #64]	@ (800781c <prvCheckTasksWaitingTermination+0x50>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe faef 	bl	8005dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007820 <prvCheckTasksWaitingTermination+0x54>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007820 <prvCheckTasksWaitingTermination+0x54>)
 80077f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <prvCheckTasksWaitingTermination+0x58>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007824 <prvCheckTasksWaitingTermination+0x58>)
 80077fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077fe:	f000 fbad 	bl	8007f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f810 	bl	8007828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007808:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <prvCheckTasksWaitingTermination+0x58>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e1      	bne.n	80077d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000708 	.word	0x20000708
 8007820:	20000734 	.word	0x20000734
 8007824:	2000071c 	.word	0x2000071c

08007828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	334c      	adds	r3, #76	@ 0x4c
 8007834:	4618      	mov	r0, r3
 8007836:	f001 fc19 	bl	800906c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007840:	2b00      	cmp	r3, #0
 8007842:	d108      	bne.n	8007856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fd27 	bl	800829c <vPortFree>
				vPortFree( pxTCB );
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fd24 	bl	800829c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007854:	e019      	b.n	800788a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800785c:	2b01      	cmp	r3, #1
 800785e:	d103      	bne.n	8007868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fd1b 	bl	800829c <vPortFree>
	}
 8007866:	e010      	b.n	800788a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800786e:	2b02      	cmp	r3, #2
 8007870:	d00b      	beq.n	800788a <prvDeleteTCB+0x62>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	60fb      	str	r3, [r7, #12]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <prvDeleteTCB+0x5e>
	}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800789a:	4b0c      	ldr	r3, [pc, #48]	@ (80078cc <prvResetNextTaskUnblockTime+0x38>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078a4:	4b0a      	ldr	r3, [pc, #40]	@ (80078d0 <prvResetNextTaskUnblockTime+0x3c>)
 80078a6:	f04f 32ff 	mov.w	r2, #4294967295
 80078aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078ac:	e008      	b.n	80078c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ae:	4b07      	ldr	r3, [pc, #28]	@ (80078cc <prvResetNextTaskUnblockTime+0x38>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	4a04      	ldr	r2, [pc, #16]	@ (80078d0 <prvResetNextTaskUnblockTime+0x3c>)
 80078be:	6013      	str	r3, [r2, #0]
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	200006ec 	.word	0x200006ec
 80078d0:	20000754 	.word	0x20000754

080078d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078da:	4b0b      	ldr	r3, [pc, #44]	@ (8007908 <xTaskGetSchedulerState+0x34>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078e2:	2301      	movs	r3, #1
 80078e4:	607b      	str	r3, [r7, #4]
 80078e6:	e008      	b.n	80078fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e8:	4b08      	ldr	r3, [pc, #32]	@ (800790c <xTaskGetSchedulerState+0x38>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078f0:	2302      	movs	r3, #2
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	e001      	b.n	80078fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078f6:	2300      	movs	r3, #0
 80078f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078fa:	687b      	ldr	r3, [r7, #4]
	}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000740 	.word	0x20000740
 800790c:	2000075c 	.word	0x2000075c

08007910 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d05e      	beq.n	80079e4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792a:	4b31      	ldr	r3, [pc, #196]	@ (80079f0 <xTaskPriorityInherit+0xe0>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	429a      	cmp	r2, r3
 8007932:	d24e      	bcs.n	80079d2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	db06      	blt.n	800794a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793c:	4b2c      	ldr	r3, [pc, #176]	@ (80079f0 <xTaskPriorityInherit+0xe0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007942:	f1c3 0207 	rsb	r2, r3, #7
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6959      	ldr	r1, [r3, #20]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4a26      	ldr	r2, [pc, #152]	@ (80079f4 <xTaskPriorityInherit+0xe4>)
 800795c:	4413      	add	r3, r2
 800795e:	4299      	cmp	r1, r3
 8007960:	d12f      	bne.n	80079c2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3304      	adds	r3, #4
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fa2e 	bl	8005dc8 <uxListRemove>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007976:	2201      	movs	r2, #1
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	43da      	mvns	r2, r3
 800797e:	4b1e      	ldr	r3, [pc, #120]	@ (80079f8 <xTaskPriorityInherit+0xe8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4013      	ands	r3, r2
 8007984:	4a1c      	ldr	r2, [pc, #112]	@ (80079f8 <xTaskPriorityInherit+0xe8>)
 8007986:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007988:	4b19      	ldr	r3, [pc, #100]	@ (80079f0 <xTaskPriorityInherit+0xe0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007996:	2201      	movs	r2, #1
 8007998:	409a      	lsls	r2, r3
 800799a:	4b17      	ldr	r3, [pc, #92]	@ (80079f8 <xTaskPriorityInherit+0xe8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4313      	orrs	r3, r2
 80079a0:	4a15      	ldr	r2, [pc, #84]	@ (80079f8 <xTaskPriorityInherit+0xe8>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4a10      	ldr	r2, [pc, #64]	@ (80079f4 <xTaskPriorityInherit+0xe4>)
 80079b2:	441a      	add	r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe f9a9 	bl	8005d12 <vListInsertEnd>
 80079c0:	e004      	b.n	80079cc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079c2:	4b0b      	ldr	r3, [pc, #44]	@ (80079f0 <xTaskPriorityInherit+0xe0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e008      	b.n	80079e4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079d6:	4b06      	ldr	r3, [pc, #24]	@ (80079f0 <xTaskPriorityInherit+0xe0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d201      	bcs.n	80079e4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079e4:	68fb      	ldr	r3, [r7, #12]
	}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20000634 	.word	0x20000634
 80079f4:	20000638 	.word	0x20000638
 80079f8:	2000073c 	.word	0x2000073c

080079fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d070      	beq.n	8007af4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a12:	4b3b      	ldr	r3, [pc, #236]	@ (8007b00 <xTaskPriorityDisinherit+0x104>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d00b      	beq.n	8007a34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	60fb      	str	r3, [r7, #12]
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	e7fd      	b.n	8007a30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10b      	bne.n	8007a54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	60bb      	str	r3, [r7, #8]
}
 8007a4e:	bf00      	nop
 8007a50:	bf00      	nop
 8007a52:	e7fd      	b.n	8007a50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a58:	1e5a      	subs	r2, r3, #1
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d044      	beq.n	8007af4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d140      	bne.n	8007af4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe f9a6 	bl	8005dc8 <uxListRemove>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d115      	bne.n	8007aae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a86:	491f      	ldr	r1, [pc, #124]	@ (8007b04 <xTaskPriorityDisinherit+0x108>)
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <xTaskPriorityDisinherit+0xb2>
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	43da      	mvns	r2, r3
 8007aa4:	4b18      	ldr	r3, [pc, #96]	@ (8007b08 <xTaskPriorityDisinherit+0x10c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	4a17      	ldr	r2, [pc, #92]	@ (8007b08 <xTaskPriorityDisinherit+0x10c>)
 8007aac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	f1c3 0207 	rsb	r2, r3, #7
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	409a      	lsls	r2, r3
 8007aca:	4b0f      	ldr	r3, [pc, #60]	@ (8007b08 <xTaskPriorityDisinherit+0x10c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8007b08 <xTaskPriorityDisinherit+0x10c>)
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4a08      	ldr	r2, [pc, #32]	@ (8007b04 <xTaskPriorityDisinherit+0x108>)
 8007ae2:	441a      	add	r2, r3
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	f7fe f911 	bl	8005d12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007af0:	2301      	movs	r3, #1
 8007af2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007af4:	697b      	ldr	r3, [r7, #20]
	}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000634 	.word	0x20000634
 8007b04:	20000638 	.word	0x20000638
 8007b08:	2000073c 	.word	0x2000073c

08007b0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d079      	beq.n	8007c18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10b      	bne.n	8007b44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	60fb      	str	r3, [r7, #12]
}
 8007b3e:	bf00      	nop
 8007b40:	bf00      	nop
 8007b42:	e7fd      	b.n	8007b40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d902      	bls.n	8007b54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	61fb      	str	r3, [r7, #28]
 8007b52:	e002      	b.n	8007b5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d059      	beq.n	8007c18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d154      	bne.n	8007c18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007c20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d10b      	bne.n	8007b90 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	60bb      	str	r3, [r7, #8]
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	db04      	blt.n	8007bae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	f1c3 0207 	rsb	r2, r3, #7
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	6959      	ldr	r1, [r3, #20]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4a19      	ldr	r2, [pc, #100]	@ (8007c24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007bbe:	4413      	add	r3, r2
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	d129      	bne.n	8007c18 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fe f8fd 	bl	8005dc8 <uxListRemove>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd8:	2201      	movs	r2, #1
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	43da      	mvns	r2, r3
 8007be0:	4b11      	ldr	r3, [pc, #68]	@ (8007c28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4013      	ands	r3, r2
 8007be6:	4a10      	ldr	r2, [pc, #64]	@ (8007c28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007be8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bee:	2201      	movs	r2, #1
 8007bf0:	409a      	lsls	r2, r3
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8007c28 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4a06      	ldr	r2, [pc, #24]	@ (8007c24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c0a:	441a      	add	r2, r3
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f7fe f87d 	bl	8005d12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c18:	bf00      	nop
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	20000634 	.word	0x20000634
 8007c24:	20000638 	.word	0x20000638
 8007c28:	2000073c 	.word	0x2000073c

08007c2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c30:	4b07      	ldr	r3, [pc, #28]	@ (8007c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c38:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c3e:	3201      	adds	r2, #1
 8007c40:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007c42:	4b03      	ldr	r3, [pc, #12]	@ (8007c50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c44:	681b      	ldr	r3, [r3, #0]
	}
 8007c46:	4618      	mov	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	20000634 	.word	0x20000634

08007c54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c5e:	4b29      	ldr	r3, [pc, #164]	@ (8007d04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c64:	4b28      	ldr	r3, [pc, #160]	@ (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe f8ac 	bl	8005dc8 <uxListRemove>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10b      	bne.n	8007c8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c76:	4b24      	ldr	r3, [pc, #144]	@ (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43da      	mvns	r2, r3
 8007c84:	4b21      	ldr	r3, [pc, #132]	@ (8007d0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	4a20      	ldr	r2, [pc, #128]	@ (8007d0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d10a      	bne.n	8007cac <prvAddCurrentTaskToDelayedList+0x58>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d007      	beq.n	8007cac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	481a      	ldr	r0, [pc, #104]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ca6:	f7fe f834 	bl	8005d12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007caa:	e026      	b.n	8007cfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cb4:	4b14      	ldr	r3, [pc, #80]	@ (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d209      	bcs.n	8007cd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc4:	4b13      	ldr	r3, [pc, #76]	@ (8007d14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fe f841 	bl	8005d58 <vListInsert>
}
 8007cd6:	e010      	b.n	8007cfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7fe f837 	bl	8005d58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cea:	4b0c      	ldr	r3, [pc, #48]	@ (8007d1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d202      	bcs.n	8007cfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007cf4:	4a09      	ldr	r2, [pc, #36]	@ (8007d1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6013      	str	r3, [r2, #0]
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000738 	.word	0x20000738
 8007d08:	20000634 	.word	0x20000634
 8007d0c:	2000073c 	.word	0x2000073c
 8007d10:	20000720 	.word	0x20000720
 8007d14:	200006f0 	.word	0x200006f0
 8007d18:	200006ec 	.word	0x200006ec
 8007d1c:	20000754 	.word	0x20000754

08007d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3b04      	subs	r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f023 0201 	bic.w	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3b04      	subs	r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d50:	4a08      	ldr	r2, [pc, #32]	@ (8007d74 <pxPortInitialiseStack+0x54>)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3b14      	subs	r3, #20
 8007d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3b20      	subs	r3, #32
 8007d66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d68:	68fb      	ldr	r3, [r7, #12]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bc80      	pop	{r7}
 8007d72:	4770      	bx	lr
 8007d74:	08007d79 	.word	0x08007d79

08007d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d82:	4b12      	ldr	r3, [pc, #72]	@ (8007dcc <prvTaskExitError+0x54>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d00b      	beq.n	8007da4 <prvTaskExitError+0x2c>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60fb      	str	r3, [r7, #12]
}
 8007d9e:	bf00      	nop
 8007da0:	bf00      	nop
 8007da2:	e7fd      	b.n	8007da0 <prvTaskExitError+0x28>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	60bb      	str	r3, [r7, #8]
}
 8007db6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007db8:	bf00      	nop
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0fc      	beq.n	8007dba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr
 8007dcc:	2000002c 	.word	0x2000002c

08007dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007dd0:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <pxCurrentTCBConst2>)
 8007dd2:	6819      	ldr	r1, [r3, #0]
 8007dd4:	6808      	ldr	r0, [r1, #0]
 8007dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007dda:	f380 8809 	msr	PSP, r0
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f380 8811 	msr	BASEPRI, r0
 8007dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dee:	4770      	bx	lr

08007df0 <pxCurrentTCBConst2>:
 8007df0:	20000634 	.word	0x20000634
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007df8:	4806      	ldr	r0, [pc, #24]	@ (8007e14 <prvPortStartFirstTask+0x1c>)
 8007dfa:	6800      	ldr	r0, [r0, #0]
 8007dfc:	6800      	ldr	r0, [r0, #0]
 8007dfe:	f380 8808 	msr	MSP, r0
 8007e02:	b662      	cpsie	i
 8007e04:	b661      	cpsie	f
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	df00      	svc	0
 8007e10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e12:	bf00      	nop
 8007e14:	e000ed08 	.word	0xe000ed08

08007e18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e1e:	4b32      	ldr	r3, [pc, #200]	@ (8007ee8 <xPortStartScheduler+0xd0>)
 8007e20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	22ff      	movs	r2, #255	@ 0xff
 8007e2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	4b2a      	ldr	r3, [pc, #168]	@ (8007eec <xPortStartScheduler+0xd4>)
 8007e44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e46:	4b2a      	ldr	r3, [pc, #168]	@ (8007ef0 <xPortStartScheduler+0xd8>)
 8007e48:	2207      	movs	r2, #7
 8007e4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e4c:	e009      	b.n	8007e62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e4e:	4b28      	ldr	r3, [pc, #160]	@ (8007ef0 <xPortStartScheduler+0xd8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	4a26      	ldr	r2, [pc, #152]	@ (8007ef0 <xPortStartScheduler+0xd8>)
 8007e56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e6a:	2b80      	cmp	r3, #128	@ 0x80
 8007e6c:	d0ef      	beq.n	8007e4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e6e:	4b20      	ldr	r3, [pc, #128]	@ (8007ef0 <xPortStartScheduler+0xd8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f1c3 0307 	rsb	r3, r3, #7
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d00b      	beq.n	8007e92 <xPortStartScheduler+0x7a>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	60bb      	str	r3, [r7, #8]
}
 8007e8c:	bf00      	nop
 8007e8e:	bf00      	nop
 8007e90:	e7fd      	b.n	8007e8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e92:	4b17      	ldr	r3, [pc, #92]	@ (8007ef0 <xPortStartScheduler+0xd8>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	4a15      	ldr	r2, [pc, #84]	@ (8007ef0 <xPortStartScheduler+0xd8>)
 8007e9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e9c:	4b14      	ldr	r3, [pc, #80]	@ (8007ef0 <xPortStartScheduler+0xd8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ea4:	4a12      	ldr	r2, [pc, #72]	@ (8007ef0 <xPortStartScheduler+0xd8>)
 8007ea6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eb0:	4b10      	ldr	r3, [pc, #64]	@ (8007ef4 <xPortStartScheduler+0xdc>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8007ef4 <xPortStartScheduler+0xdc>)
 8007eb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007eba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef4 <xPortStartScheduler+0xdc>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef4 <xPortStartScheduler+0xdc>)
 8007ec2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ec6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ec8:	f000 f8b8 	bl	800803c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef8 <xPortStartScheduler+0xe0>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ed2:	f7ff ff91 	bl	8007df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ed6:	f7ff faaf 	bl	8007438 <vTaskSwitchContext>
	prvTaskExitError();
 8007eda:	f7ff ff4d 	bl	8007d78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	e000e400 	.word	0xe000e400
 8007eec:	20000760 	.word	0x20000760
 8007ef0:	20000764 	.word	0x20000764
 8007ef4:	e000ed20 	.word	0xe000ed20
 8007ef8:	2000002c 	.word	0x2000002c

08007efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	607b      	str	r3, [r7, #4]
}
 8007f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f16:	4b0f      	ldr	r3, [pc, #60]	@ (8007f54 <vPortEnterCritical+0x58>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8007f54 <vPortEnterCritical+0x58>)
 8007f1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f20:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <vPortEnterCritical+0x58>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d110      	bne.n	8007f4a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f28:	4b0b      	ldr	r3, [pc, #44]	@ (8007f58 <vPortEnterCritical+0x5c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <vPortEnterCritical+0x4e>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	603b      	str	r3, [r7, #0]
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop
 8007f48:	e7fd      	b.n	8007f46 <vPortEnterCritical+0x4a>
	}
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr
 8007f54:	2000002c 	.word	0x2000002c
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f62:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <vPortExitCritical+0x50>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10b      	bne.n	8007f82 <vPortExitCritical+0x26>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	607b      	str	r3, [r7, #4]
}
 8007f7c:	bf00      	nop
 8007f7e:	bf00      	nop
 8007f80:	e7fd      	b.n	8007f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f82:	4b0a      	ldr	r3, [pc, #40]	@ (8007fac <vPortExitCritical+0x50>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	4a08      	ldr	r2, [pc, #32]	@ (8007fac <vPortExitCritical+0x50>)
 8007f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f8c:	4b07      	ldr	r3, [pc, #28]	@ (8007fac <vPortExitCritical+0x50>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <vPortExitCritical+0x44>
 8007f94:	2300      	movs	r3, #0
 8007f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	f383 8811 	msr	BASEPRI, r3
}
 8007f9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	2000002c 	.word	0x2000002c

08007fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fb0:	f3ef 8009 	mrs	r0, PSP
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff0 <pxCurrentTCBConst>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fc0:	6010      	str	r0, [r2, #0]
 8007fc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007fc6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007fca:	f380 8811 	msr	BASEPRI, r0
 8007fce:	f7ff fa33 	bl	8007438 <vTaskSwitchContext>
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	6808      	ldr	r0, [r1, #0]
 8007fe2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fe6:	f380 8809 	msr	PSP, r0
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	4770      	bx	lr

08007ff0 <pxCurrentTCBConst>:
 8007ff0:	20000634 	.word	0x20000634
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop

08007ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	607b      	str	r3, [r7, #4]
}
 8008010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008012:	f7ff f957 	bl	80072c4 <xTaskIncrementTick>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800801c:	4b06      	ldr	r3, [pc, #24]	@ (8008038 <SysTick_Handler+0x40>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	2300      	movs	r3, #0
 8008026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f383 8811 	msr	BASEPRI, r3
}
 800802e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008040:	4b0a      	ldr	r3, [pc, #40]	@ (800806c <vPortSetupTimerInterrupt+0x30>)
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008046:	4b0a      	ldr	r3, [pc, #40]	@ (8008070 <vPortSetupTimerInterrupt+0x34>)
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800804c:	4b09      	ldr	r3, [pc, #36]	@ (8008074 <vPortSetupTimerInterrupt+0x38>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a09      	ldr	r2, [pc, #36]	@ (8008078 <vPortSetupTimerInterrupt+0x3c>)
 8008052:	fba2 2303 	umull	r2, r3, r2, r3
 8008056:	099b      	lsrs	r3, r3, #6
 8008058:	4a08      	ldr	r2, [pc, #32]	@ (800807c <vPortSetupTimerInterrupt+0x40>)
 800805a:	3b01      	subs	r3, #1
 800805c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800805e:	4b03      	ldr	r3, [pc, #12]	@ (800806c <vPortSetupTimerInterrupt+0x30>)
 8008060:	2207      	movs	r2, #7
 8008062:	601a      	str	r2, [r3, #0]
}
 8008064:	bf00      	nop
 8008066:	46bd      	mov	sp, r7
 8008068:	bc80      	pop	{r7}
 800806a:	4770      	bx	lr
 800806c:	e000e010 	.word	0xe000e010
 8008070:	e000e018 	.word	0xe000e018
 8008074:	20000020 	.word	0x20000020
 8008078:	10624dd3 	.word	0x10624dd3
 800807c:	e000e014 	.word	0xe000e014

08008080 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008086:	f3ef 8305 	mrs	r3, IPSR
 800808a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b0f      	cmp	r3, #15
 8008090:	d915      	bls.n	80080be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008092:	4a17      	ldr	r2, [pc, #92]	@ (80080f0 <vPortValidateInterruptPriority+0x70>)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800809c:	4b15      	ldr	r3, [pc, #84]	@ (80080f4 <vPortValidateInterruptPriority+0x74>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	7afa      	ldrb	r2, [r7, #11]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d20b      	bcs.n	80080be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	607b      	str	r3, [r7, #4]
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	e7fd      	b.n	80080ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080be:	4b0e      	ldr	r3, [pc, #56]	@ (80080f8 <vPortValidateInterruptPriority+0x78>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080c6:	4b0d      	ldr	r3, [pc, #52]	@ (80080fc <vPortValidateInterruptPriority+0x7c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d90b      	bls.n	80080e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	603b      	str	r3, [r7, #0]
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	e7fd      	b.n	80080e2 <vPortValidateInterruptPriority+0x62>
	}
 80080e6:	bf00      	nop
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr
 80080f0:	e000e3f0 	.word	0xe000e3f0
 80080f4:	20000760 	.word	0x20000760
 80080f8:	e000ed0c 	.word	0xe000ed0c
 80080fc:	20000764 	.word	0x20000764

08008100 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08a      	sub	sp, #40	@ 0x28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008108:	2300      	movs	r3, #0
 800810a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800810c:	f7ff f82e 	bl	800716c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008110:	4b5c      	ldr	r3, [pc, #368]	@ (8008284 <pvPortMalloc+0x184>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008118:	f000 f924 	bl	8008364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800811c:	4b5a      	ldr	r3, [pc, #360]	@ (8008288 <pvPortMalloc+0x188>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 8095 	bne.w	8008254 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01e      	beq.n	800816e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008130:	2208      	movs	r2, #8
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	2b00      	cmp	r3, #0
 8008140:	d015      	beq.n	800816e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f023 0307 	bic.w	r3, r3, #7
 8008148:	3308      	adds	r3, #8
 800814a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <pvPortMalloc+0x6e>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	617b      	str	r3, [r7, #20]
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e7fd      	b.n	800816a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d06f      	beq.n	8008254 <pvPortMalloc+0x154>
 8008174:	4b45      	ldr	r3, [pc, #276]	@ (800828c <pvPortMalloc+0x18c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	429a      	cmp	r2, r3
 800817c:	d86a      	bhi.n	8008254 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800817e:	4b44      	ldr	r3, [pc, #272]	@ (8008290 <pvPortMalloc+0x190>)
 8008180:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008182:	4b43      	ldr	r3, [pc, #268]	@ (8008290 <pvPortMalloc+0x190>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008188:	e004      	b.n	8008194 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d903      	bls.n	80081a6 <pvPortMalloc+0xa6>
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f1      	bne.n	800818a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081a6:	4b37      	ldr	r3, [pc, #220]	@ (8008284 <pvPortMalloc+0x184>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d051      	beq.n	8008254 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2208      	movs	r2, #8
 80081b6:	4413      	add	r3, r2
 80081b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	2308      	movs	r3, #8
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d920      	bls.n	8008214 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4413      	add	r3, r2
 80081d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <pvPortMalloc+0xfc>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	613b      	str	r3, [r7, #16]
}
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	e7fd      	b.n	80081f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	1ad2      	subs	r2, r2, r3
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800820e:	69b8      	ldr	r0, [r7, #24]
 8008210:	f000 f90a 	bl	8008428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008214:	4b1d      	ldr	r3, [pc, #116]	@ (800828c <pvPortMalloc+0x18c>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	4a1b      	ldr	r2, [pc, #108]	@ (800828c <pvPortMalloc+0x18c>)
 8008220:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008222:	4b1a      	ldr	r3, [pc, #104]	@ (800828c <pvPortMalloc+0x18c>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	4b1b      	ldr	r3, [pc, #108]	@ (8008294 <pvPortMalloc+0x194>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d203      	bcs.n	8008236 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800822e:	4b17      	ldr	r3, [pc, #92]	@ (800828c <pvPortMalloc+0x18c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a18      	ldr	r2, [pc, #96]	@ (8008294 <pvPortMalloc+0x194>)
 8008234:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	4b13      	ldr	r3, [pc, #76]	@ (8008288 <pvPortMalloc+0x188>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	431a      	orrs	r2, r3
 8008240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008242:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800824a:	4b13      	ldr	r3, [pc, #76]	@ (8008298 <pvPortMalloc+0x198>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3301      	adds	r3, #1
 8008250:	4a11      	ldr	r2, [pc, #68]	@ (8008298 <pvPortMalloc+0x198>)
 8008252:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008254:	f7fe ff98 	bl	8007188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <pvPortMalloc+0x17a>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	60fb      	str	r3, [r7, #12]
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	e7fd      	b.n	8008276 <pvPortMalloc+0x176>
	return pvReturn;
 800827a:	69fb      	ldr	r3, [r7, #28]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3728      	adds	r7, #40	@ 0x28
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	20004770 	.word	0x20004770
 8008288:	20004784 	.word	0x20004784
 800828c:	20004774 	.word	0x20004774
 8008290:	20004768 	.word	0x20004768
 8008294:	20004778 	.word	0x20004778
 8008298:	2000477c 	.word	0x2000477c

0800829c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d04f      	beq.n	800834e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082ae:	2308      	movs	r3, #8
 80082b0:	425b      	negs	r3, r3
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4413      	add	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	4b25      	ldr	r3, [pc, #148]	@ (8008358 <vPortFree+0xbc>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4013      	ands	r3, r2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10b      	bne.n	80082e2 <vPortFree+0x46>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	60fb      	str	r3, [r7, #12]
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	e7fd      	b.n	80082de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00b      	beq.n	8008302 <vPortFree+0x66>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	60bb      	str	r3, [r7, #8]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	4b14      	ldr	r3, [pc, #80]	@ (8008358 <vPortFree+0xbc>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01e      	beq.n	800834e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11a      	bne.n	800834e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	4b0e      	ldr	r3, [pc, #56]	@ (8008358 <vPortFree+0xbc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	43db      	mvns	r3, r3
 8008322:	401a      	ands	r2, r3
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008328:	f7fe ff20 	bl	800716c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	4b0a      	ldr	r3, [pc, #40]	@ (800835c <vPortFree+0xc0>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4413      	add	r3, r2
 8008336:	4a09      	ldr	r2, [pc, #36]	@ (800835c <vPortFree+0xc0>)
 8008338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800833a:	6938      	ldr	r0, [r7, #16]
 800833c:	f000 f874 	bl	8008428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <vPortFree+0xc4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a06      	ldr	r2, [pc, #24]	@ (8008360 <vPortFree+0xc4>)
 8008348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800834a:	f7fe ff1d 	bl	8007188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800834e:	bf00      	nop
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20004784 	.word	0x20004784
 800835c:	20004774 	.word	0x20004774
 8008360:	20004780 	.word	0x20004780

08008364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800836a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800836e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008370:	4b27      	ldr	r3, [pc, #156]	@ (8008410 <prvHeapInit+0xac>)
 8008372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00c      	beq.n	8008398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0307 	bic.w	r3, r3, #7
 800838a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	4a1f      	ldr	r2, [pc, #124]	@ (8008410 <prvHeapInit+0xac>)
 8008394:	4413      	add	r3, r2
 8008396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800839c:	4a1d      	ldr	r2, [pc, #116]	@ (8008414 <prvHeapInit+0xb0>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008414 <prvHeapInit+0xb0>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083b0:	2208      	movs	r2, #8
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0307 	bic.w	r3, r3, #7
 80083be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a15      	ldr	r2, [pc, #84]	@ (8008418 <prvHeapInit+0xb4>)
 80083c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083c6:	4b14      	ldr	r3, [pc, #80]	@ (8008418 <prvHeapInit+0xb4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083ce:	4b12      	ldr	r3, [pc, #72]	@ (8008418 <prvHeapInit+0xb4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008418 <prvHeapInit+0xb4>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	4a0a      	ldr	r2, [pc, #40]	@ (800841c <prvHeapInit+0xb8>)
 80083f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4a09      	ldr	r2, [pc, #36]	@ (8008420 <prvHeapInit+0xbc>)
 80083fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083fc:	4b09      	ldr	r3, [pc, #36]	@ (8008424 <prvHeapInit+0xc0>)
 80083fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008402:	601a      	str	r2, [r3, #0]
}
 8008404:	bf00      	nop
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	20000768 	.word	0x20000768
 8008414:	20004768 	.word	0x20004768
 8008418:	20004770 	.word	0x20004770
 800841c:	20004778 	.word	0x20004778
 8008420:	20004774 	.word	0x20004774
 8008424:	20004784 	.word	0x20004784

08008428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008430:	4b27      	ldr	r3, [pc, #156]	@ (80084d0 <prvInsertBlockIntoFreeList+0xa8>)
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	e002      	b.n	800843c <prvInsertBlockIntoFreeList+0x14>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	429a      	cmp	r2, r3
 8008444:	d8f7      	bhi.n	8008436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4413      	add	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d108      	bne.n	800846a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	441a      	add	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	441a      	add	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d118      	bne.n	80084b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b14      	ldr	r3, [pc, #80]	@ (80084d4 <prvInsertBlockIntoFreeList+0xac>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d00d      	beq.n	80084a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	441a      	add	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	e008      	b.n	80084b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084a6:	4b0b      	ldr	r3, [pc, #44]	@ (80084d4 <prvInsertBlockIntoFreeList+0xac>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	e003      	b.n	80084b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d002      	beq.n	80084c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084c6:	bf00      	nop
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bc80      	pop	{r7}
 80084ce:	4770      	bx	lr
 80084d0:	20004768 	.word	0x20004768
 80084d4:	20004770 	.word	0x20004770

080084d8 <__cvt>:
 80084d8:	2b00      	cmp	r3, #0
 80084da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084de:	461d      	mov	r5, r3
 80084e0:	bfbb      	ittet	lt
 80084e2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80084e6:	461d      	movlt	r5, r3
 80084e8:	2300      	movge	r3, #0
 80084ea:	232d      	movlt	r3, #45	@ 0x2d
 80084ec:	b088      	sub	sp, #32
 80084ee:	4614      	mov	r4, r2
 80084f0:	bfb8      	it	lt
 80084f2:	4614      	movlt	r4, r2
 80084f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80084f6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80084f8:	7013      	strb	r3, [r2, #0]
 80084fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008500:	f023 0820 	bic.w	r8, r3, #32
 8008504:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008508:	d005      	beq.n	8008516 <__cvt+0x3e>
 800850a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800850e:	d100      	bne.n	8008512 <__cvt+0x3a>
 8008510:	3601      	adds	r6, #1
 8008512:	2302      	movs	r3, #2
 8008514:	e000      	b.n	8008518 <__cvt+0x40>
 8008516:	2303      	movs	r3, #3
 8008518:	aa07      	add	r2, sp, #28
 800851a:	9204      	str	r2, [sp, #16]
 800851c:	aa06      	add	r2, sp, #24
 800851e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008522:	e9cd 3600 	strd	r3, r6, [sp]
 8008526:	4622      	mov	r2, r4
 8008528:	462b      	mov	r3, r5
 800852a:	f000 fefd 	bl	8009328 <_dtoa_r>
 800852e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008532:	4607      	mov	r7, r0
 8008534:	d119      	bne.n	800856a <__cvt+0x92>
 8008536:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008538:	07db      	lsls	r3, r3, #31
 800853a:	d50e      	bpl.n	800855a <__cvt+0x82>
 800853c:	eb00 0906 	add.w	r9, r0, r6
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	4620      	mov	r0, r4
 8008546:	4629      	mov	r1, r5
 8008548:	f7f8 fa2e 	bl	80009a8 <__aeabi_dcmpeq>
 800854c:	b108      	cbz	r0, 8008552 <__cvt+0x7a>
 800854e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008552:	2230      	movs	r2, #48	@ 0x30
 8008554:	9b07      	ldr	r3, [sp, #28]
 8008556:	454b      	cmp	r3, r9
 8008558:	d31e      	bcc.n	8008598 <__cvt+0xc0>
 800855a:	4638      	mov	r0, r7
 800855c:	9b07      	ldr	r3, [sp, #28]
 800855e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008560:	1bdb      	subs	r3, r3, r7
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	b008      	add	sp, #32
 8008566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800856e:	eb00 0906 	add.w	r9, r0, r6
 8008572:	d1e5      	bne.n	8008540 <__cvt+0x68>
 8008574:	7803      	ldrb	r3, [r0, #0]
 8008576:	2b30      	cmp	r3, #48	@ 0x30
 8008578:	d10a      	bne.n	8008590 <__cvt+0xb8>
 800857a:	2200      	movs	r2, #0
 800857c:	2300      	movs	r3, #0
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f8 fa11 	bl	80009a8 <__aeabi_dcmpeq>
 8008586:	b918      	cbnz	r0, 8008590 <__cvt+0xb8>
 8008588:	f1c6 0601 	rsb	r6, r6, #1
 800858c:	f8ca 6000 	str.w	r6, [sl]
 8008590:	f8da 3000 	ldr.w	r3, [sl]
 8008594:	4499      	add	r9, r3
 8008596:	e7d3      	b.n	8008540 <__cvt+0x68>
 8008598:	1c59      	adds	r1, r3, #1
 800859a:	9107      	str	r1, [sp, #28]
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	e7d9      	b.n	8008554 <__cvt+0x7c>

080085a0 <__exponent>:
 80085a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085a2:	2900      	cmp	r1, #0
 80085a4:	bfb6      	itet	lt
 80085a6:	232d      	movlt	r3, #45	@ 0x2d
 80085a8:	232b      	movge	r3, #43	@ 0x2b
 80085aa:	4249      	neglt	r1, r1
 80085ac:	2909      	cmp	r1, #9
 80085ae:	7002      	strb	r2, [r0, #0]
 80085b0:	7043      	strb	r3, [r0, #1]
 80085b2:	dd29      	ble.n	8008608 <__exponent+0x68>
 80085b4:	f10d 0307 	add.w	r3, sp, #7
 80085b8:	461d      	mov	r5, r3
 80085ba:	270a      	movs	r7, #10
 80085bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80085c0:	461a      	mov	r2, r3
 80085c2:	fb07 1416 	mls	r4, r7, r6, r1
 80085c6:	3430      	adds	r4, #48	@ 0x30
 80085c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085cc:	460c      	mov	r4, r1
 80085ce:	2c63      	cmp	r4, #99	@ 0x63
 80085d0:	4631      	mov	r1, r6
 80085d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80085d6:	dcf1      	bgt.n	80085bc <__exponent+0x1c>
 80085d8:	3130      	adds	r1, #48	@ 0x30
 80085da:	1e94      	subs	r4, r2, #2
 80085dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085e0:	4623      	mov	r3, r4
 80085e2:	1c41      	adds	r1, r0, #1
 80085e4:	42ab      	cmp	r3, r5
 80085e6:	d30a      	bcc.n	80085fe <__exponent+0x5e>
 80085e8:	f10d 0309 	add.w	r3, sp, #9
 80085ec:	1a9b      	subs	r3, r3, r2
 80085ee:	42ac      	cmp	r4, r5
 80085f0:	bf88      	it	hi
 80085f2:	2300      	movhi	r3, #0
 80085f4:	3302      	adds	r3, #2
 80085f6:	4403      	add	r3, r0
 80085f8:	1a18      	subs	r0, r3, r0
 80085fa:	b003      	add	sp, #12
 80085fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008602:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008606:	e7ed      	b.n	80085e4 <__exponent+0x44>
 8008608:	2330      	movs	r3, #48	@ 0x30
 800860a:	3130      	adds	r1, #48	@ 0x30
 800860c:	7083      	strb	r3, [r0, #2]
 800860e:	70c1      	strb	r1, [r0, #3]
 8008610:	1d03      	adds	r3, r0, #4
 8008612:	e7f1      	b.n	80085f8 <__exponent+0x58>

08008614 <_printf_float>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	b091      	sub	sp, #68	@ 0x44
 800861a:	460c      	mov	r4, r1
 800861c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008620:	4616      	mov	r6, r2
 8008622:	461f      	mov	r7, r3
 8008624:	4605      	mov	r5, r0
 8008626:	f000 fd0d 	bl	8009044 <_localeconv_r>
 800862a:	6803      	ldr	r3, [r0, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	9308      	str	r3, [sp, #32]
 8008630:	f7f7 fd8e 	bl	8000150 <strlen>
 8008634:	2300      	movs	r3, #0
 8008636:	930e      	str	r3, [sp, #56]	@ 0x38
 8008638:	f8d8 3000 	ldr.w	r3, [r8]
 800863c:	9009      	str	r0, [sp, #36]	@ 0x24
 800863e:	3307      	adds	r3, #7
 8008640:	f023 0307 	bic.w	r3, r3, #7
 8008644:	f103 0208 	add.w	r2, r3, #8
 8008648:	f894 a018 	ldrb.w	sl, [r4, #24]
 800864c:	f8d4 b000 	ldr.w	fp, [r4]
 8008650:	f8c8 2000 	str.w	r2, [r8]
 8008654:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008658:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800865c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800865e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008662:	f04f 32ff 	mov.w	r2, #4294967295
 8008666:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800866a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800866e:	4b9c      	ldr	r3, [pc, #624]	@ (80088e0 <_printf_float+0x2cc>)
 8008670:	f7f8 f9cc 	bl	8000a0c <__aeabi_dcmpun>
 8008674:	bb70      	cbnz	r0, 80086d4 <_printf_float+0xc0>
 8008676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800867a:	f04f 32ff 	mov.w	r2, #4294967295
 800867e:	4b98      	ldr	r3, [pc, #608]	@ (80088e0 <_printf_float+0x2cc>)
 8008680:	f7f8 f9a6 	bl	80009d0 <__aeabi_dcmple>
 8008684:	bb30      	cbnz	r0, 80086d4 <_printf_float+0xc0>
 8008686:	2200      	movs	r2, #0
 8008688:	2300      	movs	r3, #0
 800868a:	4640      	mov	r0, r8
 800868c:	4649      	mov	r1, r9
 800868e:	f7f8 f995 	bl	80009bc <__aeabi_dcmplt>
 8008692:	b110      	cbz	r0, 800869a <_printf_float+0x86>
 8008694:	232d      	movs	r3, #45	@ 0x2d
 8008696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800869a:	4a92      	ldr	r2, [pc, #584]	@ (80088e4 <_printf_float+0x2d0>)
 800869c:	4b92      	ldr	r3, [pc, #584]	@ (80088e8 <_printf_float+0x2d4>)
 800869e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086a2:	bf94      	ite	ls
 80086a4:	4690      	movls	r8, r2
 80086a6:	4698      	movhi	r8, r3
 80086a8:	2303      	movs	r3, #3
 80086aa:	f04f 0900 	mov.w	r9, #0
 80086ae:	6123      	str	r3, [r4, #16]
 80086b0:	f02b 0304 	bic.w	r3, fp, #4
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	4633      	mov	r3, r6
 80086b8:	4621      	mov	r1, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	9700      	str	r7, [sp, #0]
 80086be:	aa0f      	add	r2, sp, #60	@ 0x3c
 80086c0:	f000 f9d4 	bl	8008a6c <_printf_common>
 80086c4:	3001      	adds	r0, #1
 80086c6:	f040 8090 	bne.w	80087ea <_printf_float+0x1d6>
 80086ca:	f04f 30ff 	mov.w	r0, #4294967295
 80086ce:	b011      	add	sp, #68	@ 0x44
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	4642      	mov	r2, r8
 80086d6:	464b      	mov	r3, r9
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f8 f996 	bl	8000a0c <__aeabi_dcmpun>
 80086e0:	b148      	cbz	r0, 80086f6 <_printf_float+0xe2>
 80086e2:	464b      	mov	r3, r9
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bfb8      	it	lt
 80086e8:	232d      	movlt	r3, #45	@ 0x2d
 80086ea:	4a80      	ldr	r2, [pc, #512]	@ (80088ec <_printf_float+0x2d8>)
 80086ec:	bfb8      	it	lt
 80086ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80086f2:	4b7f      	ldr	r3, [pc, #508]	@ (80088f0 <_printf_float+0x2dc>)
 80086f4:	e7d3      	b.n	800869e <_printf_float+0x8a>
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	d13f      	bne.n	8008780 <_printf_float+0x16c>
 8008700:	2306      	movs	r3, #6
 8008702:	6063      	str	r3, [r4, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	9206      	str	r2, [sp, #24]
 800870e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008710:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008714:	aa0d      	add	r2, sp, #52	@ 0x34
 8008716:	9203      	str	r2, [sp, #12]
 8008718:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800871c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008720:	6863      	ldr	r3, [r4, #4]
 8008722:	4642      	mov	r2, r8
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	4628      	mov	r0, r5
 8008728:	464b      	mov	r3, r9
 800872a:	910a      	str	r1, [sp, #40]	@ 0x28
 800872c:	f7ff fed4 	bl	80084d8 <__cvt>
 8008730:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008732:	4680      	mov	r8, r0
 8008734:	2947      	cmp	r1, #71	@ 0x47
 8008736:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008738:	d128      	bne.n	800878c <_printf_float+0x178>
 800873a:	1cc8      	adds	r0, r1, #3
 800873c:	db02      	blt.n	8008744 <_printf_float+0x130>
 800873e:	6863      	ldr	r3, [r4, #4]
 8008740:	4299      	cmp	r1, r3
 8008742:	dd40      	ble.n	80087c6 <_printf_float+0x1b2>
 8008744:	f1aa 0a02 	sub.w	sl, sl, #2
 8008748:	fa5f fa8a 	uxtb.w	sl, sl
 800874c:	4652      	mov	r2, sl
 800874e:	3901      	subs	r1, #1
 8008750:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008754:	910d      	str	r1, [sp, #52]	@ 0x34
 8008756:	f7ff ff23 	bl	80085a0 <__exponent>
 800875a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800875c:	4681      	mov	r9, r0
 800875e:	1813      	adds	r3, r2, r0
 8008760:	2a01      	cmp	r2, #1
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	dc02      	bgt.n	800876c <_printf_float+0x158>
 8008766:	6822      	ldr	r2, [r4, #0]
 8008768:	07d2      	lsls	r2, r2, #31
 800876a:	d501      	bpl.n	8008770 <_printf_float+0x15c>
 800876c:	3301      	adds	r3, #1
 800876e:	6123      	str	r3, [r4, #16]
 8008770:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008774:	2b00      	cmp	r3, #0
 8008776:	d09e      	beq.n	80086b6 <_printf_float+0xa2>
 8008778:	232d      	movs	r3, #45	@ 0x2d
 800877a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800877e:	e79a      	b.n	80086b6 <_printf_float+0xa2>
 8008780:	2947      	cmp	r1, #71	@ 0x47
 8008782:	d1bf      	bne.n	8008704 <_printf_float+0xf0>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1bd      	bne.n	8008704 <_printf_float+0xf0>
 8008788:	2301      	movs	r3, #1
 800878a:	e7ba      	b.n	8008702 <_printf_float+0xee>
 800878c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008790:	d9dc      	bls.n	800874c <_printf_float+0x138>
 8008792:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008796:	d118      	bne.n	80087ca <_printf_float+0x1b6>
 8008798:	2900      	cmp	r1, #0
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	dd0b      	ble.n	80087b6 <_printf_float+0x1a2>
 800879e:	6121      	str	r1, [r4, #16]
 80087a0:	b913      	cbnz	r3, 80087a8 <_printf_float+0x194>
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	07d0      	lsls	r0, r2, #31
 80087a6:	d502      	bpl.n	80087ae <_printf_float+0x19a>
 80087a8:	3301      	adds	r3, #1
 80087aa:	440b      	add	r3, r1
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	f04f 0900 	mov.w	r9, #0
 80087b2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80087b4:	e7dc      	b.n	8008770 <_printf_float+0x15c>
 80087b6:	b913      	cbnz	r3, 80087be <_printf_float+0x1aa>
 80087b8:	6822      	ldr	r2, [r4, #0]
 80087ba:	07d2      	lsls	r2, r2, #31
 80087bc:	d501      	bpl.n	80087c2 <_printf_float+0x1ae>
 80087be:	3302      	adds	r3, #2
 80087c0:	e7f4      	b.n	80087ac <_printf_float+0x198>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e7f2      	b.n	80087ac <_printf_float+0x198>
 80087c6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80087ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087cc:	4299      	cmp	r1, r3
 80087ce:	db05      	blt.n	80087dc <_printf_float+0x1c8>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	6121      	str	r1, [r4, #16]
 80087d4:	07d8      	lsls	r0, r3, #31
 80087d6:	d5ea      	bpl.n	80087ae <_printf_float+0x19a>
 80087d8:	1c4b      	adds	r3, r1, #1
 80087da:	e7e7      	b.n	80087ac <_printf_float+0x198>
 80087dc:	2900      	cmp	r1, #0
 80087de:	bfcc      	ite	gt
 80087e0:	2201      	movgt	r2, #1
 80087e2:	f1c1 0202 	rsble	r2, r1, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	e7e0      	b.n	80087ac <_printf_float+0x198>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	055a      	lsls	r2, r3, #21
 80087ee:	d407      	bmi.n	8008800 <_printf_float+0x1ec>
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	4642      	mov	r2, r8
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	d12b      	bne.n	8008856 <_printf_float+0x242>
 80087fe:	e764      	b.n	80086ca <_printf_float+0xb6>
 8008800:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008804:	f240 80dc 	bls.w	80089c0 <_printf_float+0x3ac>
 8008808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	f7f8 f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8008814:	2800      	cmp	r0, #0
 8008816:	d033      	beq.n	8008880 <_printf_float+0x26c>
 8008818:	2301      	movs	r3, #1
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	4a35      	ldr	r2, [pc, #212]	@ (80088f4 <_printf_float+0x2e0>)
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f af51 	beq.w	80086ca <_printf_float+0xb6>
 8008828:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800882c:	4543      	cmp	r3, r8
 800882e:	db02      	blt.n	8008836 <_printf_float+0x222>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	07d8      	lsls	r0, r3, #31
 8008834:	d50f      	bpl.n	8008856 <_printf_float+0x242>
 8008836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800883a:	4631      	mov	r1, r6
 800883c:	4628      	mov	r0, r5
 800883e:	47b8      	blx	r7
 8008840:	3001      	adds	r0, #1
 8008842:	f43f af42 	beq.w	80086ca <_printf_float+0xb6>
 8008846:	f04f 0900 	mov.w	r9, #0
 800884a:	f108 38ff 	add.w	r8, r8, #4294967295
 800884e:	f104 0a1a 	add.w	sl, r4, #26
 8008852:	45c8      	cmp	r8, r9
 8008854:	dc09      	bgt.n	800886a <_printf_float+0x256>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	079b      	lsls	r3, r3, #30
 800885a:	f100 8102 	bmi.w	8008a62 <_printf_float+0x44e>
 800885e:	68e0      	ldr	r0, [r4, #12]
 8008860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008862:	4298      	cmp	r0, r3
 8008864:	bfb8      	it	lt
 8008866:	4618      	movlt	r0, r3
 8008868:	e731      	b.n	80086ce <_printf_float+0xba>
 800886a:	2301      	movs	r3, #1
 800886c:	4652      	mov	r2, sl
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	f43f af28 	beq.w	80086ca <_printf_float+0xb6>
 800887a:	f109 0901 	add.w	r9, r9, #1
 800887e:	e7e8      	b.n	8008852 <_printf_float+0x23e>
 8008880:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008882:	2b00      	cmp	r3, #0
 8008884:	dc38      	bgt.n	80088f8 <_printf_float+0x2e4>
 8008886:	2301      	movs	r3, #1
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	4a19      	ldr	r2, [pc, #100]	@ (80088f4 <_printf_float+0x2e0>)
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	f43f af1a 	beq.w	80086ca <_printf_float+0xb6>
 8008896:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800889a:	ea59 0303 	orrs.w	r3, r9, r3
 800889e:	d102      	bne.n	80088a6 <_printf_float+0x292>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	07d9      	lsls	r1, r3, #31
 80088a4:	d5d7      	bpl.n	8008856 <_printf_float+0x242>
 80088a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	f43f af0a 	beq.w	80086ca <_printf_float+0xb6>
 80088b6:	f04f 0a00 	mov.w	sl, #0
 80088ba:	f104 0b1a 	add.w	fp, r4, #26
 80088be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088c0:	425b      	negs	r3, r3
 80088c2:	4553      	cmp	r3, sl
 80088c4:	dc01      	bgt.n	80088ca <_printf_float+0x2b6>
 80088c6:	464b      	mov	r3, r9
 80088c8:	e793      	b.n	80087f2 <_printf_float+0x1de>
 80088ca:	2301      	movs	r3, #1
 80088cc:	465a      	mov	r2, fp
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	f43f aef8 	beq.w	80086ca <_printf_float+0xb6>
 80088da:	f10a 0a01 	add.w	sl, sl, #1
 80088de:	e7ee      	b.n	80088be <_printf_float+0x2aa>
 80088e0:	7fefffff 	.word	0x7fefffff
 80088e4:	0800bd7a 	.word	0x0800bd7a
 80088e8:	0800bd7e 	.word	0x0800bd7e
 80088ec:	0800bd82 	.word	0x0800bd82
 80088f0:	0800bd86 	.word	0x0800bd86
 80088f4:	0800bfb7 	.word	0x0800bfb7
 80088f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80088fe:	4553      	cmp	r3, sl
 8008900:	bfa8      	it	ge
 8008902:	4653      	movge	r3, sl
 8008904:	2b00      	cmp	r3, #0
 8008906:	4699      	mov	r9, r3
 8008908:	dc36      	bgt.n	8008978 <_printf_float+0x364>
 800890a:	f04f 0b00 	mov.w	fp, #0
 800890e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008912:	f104 021a 	add.w	r2, r4, #26
 8008916:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008918:	930a      	str	r3, [sp, #40]	@ 0x28
 800891a:	eba3 0309 	sub.w	r3, r3, r9
 800891e:	455b      	cmp	r3, fp
 8008920:	dc31      	bgt.n	8008986 <_printf_float+0x372>
 8008922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008924:	459a      	cmp	sl, r3
 8008926:	dc3a      	bgt.n	800899e <_printf_float+0x38a>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	07da      	lsls	r2, r3, #31
 800892c:	d437      	bmi.n	800899e <_printf_float+0x38a>
 800892e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008930:	ebaa 0903 	sub.w	r9, sl, r3
 8008934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008936:	ebaa 0303 	sub.w	r3, sl, r3
 800893a:	4599      	cmp	r9, r3
 800893c:	bfa8      	it	ge
 800893e:	4699      	movge	r9, r3
 8008940:	f1b9 0f00 	cmp.w	r9, #0
 8008944:	dc33      	bgt.n	80089ae <_printf_float+0x39a>
 8008946:	f04f 0800 	mov.w	r8, #0
 800894a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800894e:	f104 0b1a 	add.w	fp, r4, #26
 8008952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008954:	ebaa 0303 	sub.w	r3, sl, r3
 8008958:	eba3 0309 	sub.w	r3, r3, r9
 800895c:	4543      	cmp	r3, r8
 800895e:	f77f af7a 	ble.w	8008856 <_printf_float+0x242>
 8008962:	2301      	movs	r3, #1
 8008964:	465a      	mov	r2, fp
 8008966:	4631      	mov	r1, r6
 8008968:	4628      	mov	r0, r5
 800896a:	47b8      	blx	r7
 800896c:	3001      	adds	r0, #1
 800896e:	f43f aeac 	beq.w	80086ca <_printf_float+0xb6>
 8008972:	f108 0801 	add.w	r8, r8, #1
 8008976:	e7ec      	b.n	8008952 <_printf_float+0x33e>
 8008978:	4642      	mov	r2, r8
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	d1c2      	bne.n	800890a <_printf_float+0x2f6>
 8008984:	e6a1      	b.n	80086ca <_printf_float+0xb6>
 8008986:	2301      	movs	r3, #1
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	920a      	str	r2, [sp, #40]	@ 0x28
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	f43f ae9a 	beq.w	80086ca <_printf_float+0xb6>
 8008996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008998:	f10b 0b01 	add.w	fp, fp, #1
 800899c:	e7bb      	b.n	8008916 <_printf_float+0x302>
 800899e:	4631      	mov	r1, r6
 80089a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b8      	blx	r7
 80089a8:	3001      	adds	r0, #1
 80089aa:	d1c0      	bne.n	800892e <_printf_float+0x31a>
 80089ac:	e68d      	b.n	80086ca <_printf_float+0xb6>
 80089ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089b0:	464b      	mov	r3, r9
 80089b2:	4631      	mov	r1, r6
 80089b4:	4628      	mov	r0, r5
 80089b6:	4442      	add	r2, r8
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	d1c3      	bne.n	8008946 <_printf_float+0x332>
 80089be:	e684      	b.n	80086ca <_printf_float+0xb6>
 80089c0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80089c4:	f1ba 0f01 	cmp.w	sl, #1
 80089c8:	dc01      	bgt.n	80089ce <_printf_float+0x3ba>
 80089ca:	07db      	lsls	r3, r3, #31
 80089cc:	d536      	bpl.n	8008a3c <_printf_float+0x428>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4642      	mov	r2, r8
 80089d2:	4631      	mov	r1, r6
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b8      	blx	r7
 80089d8:	3001      	adds	r0, #1
 80089da:	f43f ae76 	beq.w	80086ca <_printf_float+0xb6>
 80089de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	f43f ae6e 	beq.w	80086ca <_printf_float+0xb6>
 80089ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80089f2:	2200      	movs	r2, #0
 80089f4:	2300      	movs	r3, #0
 80089f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089fa:	f7f7 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80089fe:	b9c0      	cbnz	r0, 8008a32 <_printf_float+0x41e>
 8008a00:	4653      	mov	r3, sl
 8008a02:	f108 0201 	add.w	r2, r8, #1
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b8      	blx	r7
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d10c      	bne.n	8008a2a <_printf_float+0x416>
 8008a10:	e65b      	b.n	80086ca <_printf_float+0xb6>
 8008a12:	2301      	movs	r3, #1
 8008a14:	465a      	mov	r2, fp
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f43f ae54 	beq.w	80086ca <_printf_float+0xb6>
 8008a22:	f108 0801 	add.w	r8, r8, #1
 8008a26:	45d0      	cmp	r8, sl
 8008a28:	dbf3      	blt.n	8008a12 <_printf_float+0x3fe>
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a30:	e6e0      	b.n	80087f4 <_printf_float+0x1e0>
 8008a32:	f04f 0800 	mov.w	r8, #0
 8008a36:	f104 0b1a 	add.w	fp, r4, #26
 8008a3a:	e7f4      	b.n	8008a26 <_printf_float+0x412>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	4642      	mov	r2, r8
 8008a40:	e7e1      	b.n	8008a06 <_printf_float+0x3f2>
 8008a42:	2301      	movs	r3, #1
 8008a44:	464a      	mov	r2, r9
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b8      	blx	r7
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f43f ae3c 	beq.w	80086ca <_printf_float+0xb6>
 8008a52:	f108 0801 	add.w	r8, r8, #1
 8008a56:	68e3      	ldr	r3, [r4, #12]
 8008a58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008a5a:	1a5b      	subs	r3, r3, r1
 8008a5c:	4543      	cmp	r3, r8
 8008a5e:	dcf0      	bgt.n	8008a42 <_printf_float+0x42e>
 8008a60:	e6fd      	b.n	800885e <_printf_float+0x24a>
 8008a62:	f04f 0800 	mov.w	r8, #0
 8008a66:	f104 0919 	add.w	r9, r4, #25
 8008a6a:	e7f4      	b.n	8008a56 <_printf_float+0x442>

08008a6c <_printf_common>:
 8008a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a70:	4616      	mov	r6, r2
 8008a72:	4698      	mov	r8, r3
 8008a74:	688a      	ldr	r2, [r1, #8]
 8008a76:	690b      	ldr	r3, [r1, #16]
 8008a78:	4607      	mov	r7, r0
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	bfb8      	it	lt
 8008a7e:	4613      	movlt	r3, r2
 8008a80:	6033      	str	r3, [r6, #0]
 8008a82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a86:	460c      	mov	r4, r1
 8008a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a8c:	b10a      	cbz	r2, 8008a92 <_printf_common+0x26>
 8008a8e:	3301      	adds	r3, #1
 8008a90:	6033      	str	r3, [r6, #0]
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	0699      	lsls	r1, r3, #26
 8008a96:	bf42      	ittt	mi
 8008a98:	6833      	ldrmi	r3, [r6, #0]
 8008a9a:	3302      	addmi	r3, #2
 8008a9c:	6033      	strmi	r3, [r6, #0]
 8008a9e:	6825      	ldr	r5, [r4, #0]
 8008aa0:	f015 0506 	ands.w	r5, r5, #6
 8008aa4:	d106      	bne.n	8008ab4 <_printf_common+0x48>
 8008aa6:	f104 0a19 	add.w	sl, r4, #25
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	6832      	ldr	r2, [r6, #0]
 8008aae:	1a9b      	subs	r3, r3, r2
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	dc2b      	bgt.n	8008b0c <_printf_common+0xa0>
 8008ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	3b00      	subs	r3, #0
 8008abc:	bf18      	it	ne
 8008abe:	2301      	movne	r3, #1
 8008ac0:	0692      	lsls	r2, r2, #26
 8008ac2:	d430      	bmi.n	8008b26 <_printf_common+0xba>
 8008ac4:	4641      	mov	r1, r8
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008acc:	47c8      	blx	r9
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d023      	beq.n	8008b1a <_printf_common+0xae>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	6922      	ldr	r2, [r4, #16]
 8008ad6:	f003 0306 	and.w	r3, r3, #6
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	bf14      	ite	ne
 8008ade:	2500      	movne	r5, #0
 8008ae0:	6833      	ldreq	r3, [r6, #0]
 8008ae2:	f04f 0600 	mov.w	r6, #0
 8008ae6:	bf08      	it	eq
 8008ae8:	68e5      	ldreq	r5, [r4, #12]
 8008aea:	f104 041a 	add.w	r4, r4, #26
 8008aee:	bf08      	it	eq
 8008af0:	1aed      	subeq	r5, r5, r3
 8008af2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008af6:	bf08      	it	eq
 8008af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008afc:	4293      	cmp	r3, r2
 8008afe:	bfc4      	itt	gt
 8008b00:	1a9b      	subgt	r3, r3, r2
 8008b02:	18ed      	addgt	r5, r5, r3
 8008b04:	42b5      	cmp	r5, r6
 8008b06:	d11a      	bne.n	8008b3e <_printf_common+0xd2>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e008      	b.n	8008b1e <_printf_common+0xb2>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	4652      	mov	r2, sl
 8008b10:	4641      	mov	r1, r8
 8008b12:	4638      	mov	r0, r7
 8008b14:	47c8      	blx	r9
 8008b16:	3001      	adds	r0, #1
 8008b18:	d103      	bne.n	8008b22 <_printf_common+0xb6>
 8008b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b22:	3501      	adds	r5, #1
 8008b24:	e7c1      	b.n	8008aaa <_printf_common+0x3e>
 8008b26:	2030      	movs	r0, #48	@ 0x30
 8008b28:	18e1      	adds	r1, r4, r3
 8008b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b34:	4422      	add	r2, r4
 8008b36:	3302      	adds	r3, #2
 8008b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b3c:	e7c2      	b.n	8008ac4 <_printf_common+0x58>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4622      	mov	r2, r4
 8008b42:	4641      	mov	r1, r8
 8008b44:	4638      	mov	r0, r7
 8008b46:	47c8      	blx	r9
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d0e6      	beq.n	8008b1a <_printf_common+0xae>
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	e7d9      	b.n	8008b04 <_printf_common+0x98>

08008b50 <_printf_i>:
 8008b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	7e0f      	ldrb	r7, [r1, #24]
 8008b56:	4691      	mov	r9, r2
 8008b58:	2f78      	cmp	r7, #120	@ 0x78
 8008b5a:	4680      	mov	r8, r0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	469a      	mov	sl, r3
 8008b60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b66:	d807      	bhi.n	8008b78 <_printf_i+0x28>
 8008b68:	2f62      	cmp	r7, #98	@ 0x62
 8008b6a:	d80a      	bhi.n	8008b82 <_printf_i+0x32>
 8008b6c:	2f00      	cmp	r7, #0
 8008b6e:	f000 80d3 	beq.w	8008d18 <_printf_i+0x1c8>
 8008b72:	2f58      	cmp	r7, #88	@ 0x58
 8008b74:	f000 80ba 	beq.w	8008cec <_printf_i+0x19c>
 8008b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b80:	e03a      	b.n	8008bf8 <_printf_i+0xa8>
 8008b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b86:	2b15      	cmp	r3, #21
 8008b88:	d8f6      	bhi.n	8008b78 <_printf_i+0x28>
 8008b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8008b90 <_printf_i+0x40>)
 8008b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b90:	08008be9 	.word	0x08008be9
 8008b94:	08008bfd 	.word	0x08008bfd
 8008b98:	08008b79 	.word	0x08008b79
 8008b9c:	08008b79 	.word	0x08008b79
 8008ba0:	08008b79 	.word	0x08008b79
 8008ba4:	08008b79 	.word	0x08008b79
 8008ba8:	08008bfd 	.word	0x08008bfd
 8008bac:	08008b79 	.word	0x08008b79
 8008bb0:	08008b79 	.word	0x08008b79
 8008bb4:	08008b79 	.word	0x08008b79
 8008bb8:	08008b79 	.word	0x08008b79
 8008bbc:	08008cff 	.word	0x08008cff
 8008bc0:	08008c27 	.word	0x08008c27
 8008bc4:	08008cb9 	.word	0x08008cb9
 8008bc8:	08008b79 	.word	0x08008b79
 8008bcc:	08008b79 	.word	0x08008b79
 8008bd0:	08008d21 	.word	0x08008d21
 8008bd4:	08008b79 	.word	0x08008b79
 8008bd8:	08008c27 	.word	0x08008c27
 8008bdc:	08008b79 	.word	0x08008b79
 8008be0:	08008b79 	.word	0x08008b79
 8008be4:	08008cc1 	.word	0x08008cc1
 8008be8:	6833      	ldr	r3, [r6, #0]
 8008bea:	1d1a      	adds	r2, r3, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6032      	str	r2, [r6, #0]
 8008bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e09e      	b.n	8008d3a <_printf_i+0x1ea>
 8008bfc:	6833      	ldr	r3, [r6, #0]
 8008bfe:	6820      	ldr	r0, [r4, #0]
 8008c00:	1d19      	adds	r1, r3, #4
 8008c02:	6031      	str	r1, [r6, #0]
 8008c04:	0606      	lsls	r6, r0, #24
 8008c06:	d501      	bpl.n	8008c0c <_printf_i+0xbc>
 8008c08:	681d      	ldr	r5, [r3, #0]
 8008c0a:	e003      	b.n	8008c14 <_printf_i+0xc4>
 8008c0c:	0645      	lsls	r5, r0, #25
 8008c0e:	d5fb      	bpl.n	8008c08 <_printf_i+0xb8>
 8008c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c14:	2d00      	cmp	r5, #0
 8008c16:	da03      	bge.n	8008c20 <_printf_i+0xd0>
 8008c18:	232d      	movs	r3, #45	@ 0x2d
 8008c1a:	426d      	negs	r5, r5
 8008c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c20:	230a      	movs	r3, #10
 8008c22:	4859      	ldr	r0, [pc, #356]	@ (8008d88 <_printf_i+0x238>)
 8008c24:	e011      	b.n	8008c4a <_printf_i+0xfa>
 8008c26:	6821      	ldr	r1, [r4, #0]
 8008c28:	6833      	ldr	r3, [r6, #0]
 8008c2a:	0608      	lsls	r0, r1, #24
 8008c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c30:	d402      	bmi.n	8008c38 <_printf_i+0xe8>
 8008c32:	0649      	lsls	r1, r1, #25
 8008c34:	bf48      	it	mi
 8008c36:	b2ad      	uxthmi	r5, r5
 8008c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c3a:	6033      	str	r3, [r6, #0]
 8008c3c:	bf14      	ite	ne
 8008c3e:	230a      	movne	r3, #10
 8008c40:	2308      	moveq	r3, #8
 8008c42:	4851      	ldr	r0, [pc, #324]	@ (8008d88 <_printf_i+0x238>)
 8008c44:	2100      	movs	r1, #0
 8008c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c4a:	6866      	ldr	r6, [r4, #4]
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	bfa8      	it	ge
 8008c50:	6821      	ldrge	r1, [r4, #0]
 8008c52:	60a6      	str	r6, [r4, #8]
 8008c54:	bfa4      	itt	ge
 8008c56:	f021 0104 	bicge.w	r1, r1, #4
 8008c5a:	6021      	strge	r1, [r4, #0]
 8008c5c:	b90d      	cbnz	r5, 8008c62 <_printf_i+0x112>
 8008c5e:	2e00      	cmp	r6, #0
 8008c60:	d04b      	beq.n	8008cfa <_printf_i+0x1aa>
 8008c62:	4616      	mov	r6, r2
 8008c64:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c68:	fb03 5711 	mls	r7, r3, r1, r5
 8008c6c:	5dc7      	ldrb	r7, [r0, r7]
 8008c6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c72:	462f      	mov	r7, r5
 8008c74:	42bb      	cmp	r3, r7
 8008c76:	460d      	mov	r5, r1
 8008c78:	d9f4      	bls.n	8008c64 <_printf_i+0x114>
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d10b      	bne.n	8008c96 <_printf_i+0x146>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	07df      	lsls	r7, r3, #31
 8008c82:	d508      	bpl.n	8008c96 <_printf_i+0x146>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	6861      	ldr	r1, [r4, #4]
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	bfde      	ittt	le
 8008c8c:	2330      	movle	r3, #48	@ 0x30
 8008c8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c96:	1b92      	subs	r2, r2, r6
 8008c98:	6122      	str	r2, [r4, #16]
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	f8cd a000 	str.w	sl, [sp]
 8008ca4:	aa03      	add	r2, sp, #12
 8008ca6:	f7ff fee1 	bl	8008a6c <_printf_common>
 8008caa:	3001      	adds	r0, #1
 8008cac:	d14a      	bne.n	8008d44 <_printf_i+0x1f4>
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	b004      	add	sp, #16
 8008cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	f043 0320 	orr.w	r3, r3, #32
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	2778      	movs	r7, #120	@ 0x78
 8008cc2:	4832      	ldr	r0, [pc, #200]	@ (8008d8c <_printf_i+0x23c>)
 8008cc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	6831      	ldr	r1, [r6, #0]
 8008ccc:	061f      	lsls	r7, r3, #24
 8008cce:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cd2:	d402      	bmi.n	8008cda <_printf_i+0x18a>
 8008cd4:	065f      	lsls	r7, r3, #25
 8008cd6:	bf48      	it	mi
 8008cd8:	b2ad      	uxthmi	r5, r5
 8008cda:	6031      	str	r1, [r6, #0]
 8008cdc:	07d9      	lsls	r1, r3, #31
 8008cde:	bf44      	itt	mi
 8008ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce4:	6023      	strmi	r3, [r4, #0]
 8008ce6:	b11d      	cbz	r5, 8008cf0 <_printf_i+0x1a0>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	e7ab      	b.n	8008c44 <_printf_i+0xf4>
 8008cec:	4826      	ldr	r0, [pc, #152]	@ (8008d88 <_printf_i+0x238>)
 8008cee:	e7e9      	b.n	8008cc4 <_printf_i+0x174>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	f023 0320 	bic.w	r3, r3, #32
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	e7f6      	b.n	8008ce8 <_printf_i+0x198>
 8008cfa:	4616      	mov	r6, r2
 8008cfc:	e7bd      	b.n	8008c7a <_printf_i+0x12a>
 8008cfe:	6833      	ldr	r3, [r6, #0]
 8008d00:	6825      	ldr	r5, [r4, #0]
 8008d02:	1d18      	adds	r0, r3, #4
 8008d04:	6961      	ldr	r1, [r4, #20]
 8008d06:	6030      	str	r0, [r6, #0]
 8008d08:	062e      	lsls	r6, r5, #24
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	d501      	bpl.n	8008d12 <_printf_i+0x1c2>
 8008d0e:	6019      	str	r1, [r3, #0]
 8008d10:	e002      	b.n	8008d18 <_printf_i+0x1c8>
 8008d12:	0668      	lsls	r0, r5, #25
 8008d14:	d5fb      	bpl.n	8008d0e <_printf_i+0x1be>
 8008d16:	8019      	strh	r1, [r3, #0]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4616      	mov	r6, r2
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	e7bc      	b.n	8008c9a <_printf_i+0x14a>
 8008d20:	6833      	ldr	r3, [r6, #0]
 8008d22:	2100      	movs	r1, #0
 8008d24:	1d1a      	adds	r2, r3, #4
 8008d26:	6032      	str	r2, [r6, #0]
 8008d28:	681e      	ldr	r6, [r3, #0]
 8008d2a:	6862      	ldr	r2, [r4, #4]
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f000 fa56 	bl	80091de <memchr>
 8008d32:	b108      	cbz	r0, 8008d38 <_printf_i+0x1e8>
 8008d34:	1b80      	subs	r0, r0, r6
 8008d36:	6060      	str	r0, [r4, #4]
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	6123      	str	r3, [r4, #16]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d42:	e7aa      	b.n	8008c9a <_printf_i+0x14a>
 8008d44:	4632      	mov	r2, r6
 8008d46:	4649      	mov	r1, r9
 8008d48:	4640      	mov	r0, r8
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	47d0      	blx	sl
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d0ad      	beq.n	8008cae <_printf_i+0x15e>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	079b      	lsls	r3, r3, #30
 8008d56:	d413      	bmi.n	8008d80 <_printf_i+0x230>
 8008d58:	68e0      	ldr	r0, [r4, #12]
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	4298      	cmp	r0, r3
 8008d5e:	bfb8      	it	lt
 8008d60:	4618      	movlt	r0, r3
 8008d62:	e7a6      	b.n	8008cb2 <_printf_i+0x162>
 8008d64:	2301      	movs	r3, #1
 8008d66:	4632      	mov	r2, r6
 8008d68:	4649      	mov	r1, r9
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	47d0      	blx	sl
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d09d      	beq.n	8008cae <_printf_i+0x15e>
 8008d72:	3501      	adds	r5, #1
 8008d74:	68e3      	ldr	r3, [r4, #12]
 8008d76:	9903      	ldr	r1, [sp, #12]
 8008d78:	1a5b      	subs	r3, r3, r1
 8008d7a:	42ab      	cmp	r3, r5
 8008d7c:	dcf2      	bgt.n	8008d64 <_printf_i+0x214>
 8008d7e:	e7eb      	b.n	8008d58 <_printf_i+0x208>
 8008d80:	2500      	movs	r5, #0
 8008d82:	f104 0619 	add.w	r6, r4, #25
 8008d86:	e7f5      	b.n	8008d74 <_printf_i+0x224>
 8008d88:	0800bd8a 	.word	0x0800bd8a
 8008d8c:	0800bd9b 	.word	0x0800bd9b

08008d90 <std>:
 8008d90:	2300      	movs	r3, #0
 8008d92:	b510      	push	{r4, lr}
 8008d94:	4604      	mov	r4, r0
 8008d96:	e9c0 3300 	strd	r3, r3, [r0]
 8008d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d9e:	6083      	str	r3, [r0, #8]
 8008da0:	8181      	strh	r1, [r0, #12]
 8008da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008da4:	81c2      	strh	r2, [r0, #14]
 8008da6:	6183      	str	r3, [r0, #24]
 8008da8:	4619      	mov	r1, r3
 8008daa:	2208      	movs	r2, #8
 8008dac:	305c      	adds	r0, #92	@ 0x5c
 8008dae:	f000 f940 	bl	8009032 <memset>
 8008db2:	4b0d      	ldr	r3, [pc, #52]	@ (8008de8 <std+0x58>)
 8008db4:	6224      	str	r4, [r4, #32]
 8008db6:	6263      	str	r3, [r4, #36]	@ 0x24
 8008db8:	4b0c      	ldr	r3, [pc, #48]	@ (8008dec <std+0x5c>)
 8008dba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8008df0 <std+0x60>)
 8008dbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008df4 <std+0x64>)
 8008dc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008df8 <std+0x68>)
 8008dc6:	429c      	cmp	r4, r3
 8008dc8:	d006      	beq.n	8008dd8 <std+0x48>
 8008dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dce:	4294      	cmp	r4, r2
 8008dd0:	d002      	beq.n	8008dd8 <std+0x48>
 8008dd2:	33d0      	adds	r3, #208	@ 0xd0
 8008dd4:	429c      	cmp	r4, r3
 8008dd6:	d105      	bne.n	8008de4 <std+0x54>
 8008dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de0:	f000 b9fa 	b.w	80091d8 <__retarget_lock_init_recursive>
 8008de4:	bd10      	pop	{r4, pc}
 8008de6:	bf00      	nop
 8008de8:	08008fa9 	.word	0x08008fa9
 8008dec:	08008fcf 	.word	0x08008fcf
 8008df0:	08009007 	.word	0x08009007
 8008df4:	0800902b 	.word	0x0800902b
 8008df8:	20004788 	.word	0x20004788

08008dfc <stdio_exit_handler>:
 8008dfc:	4a02      	ldr	r2, [pc, #8]	@ (8008e08 <stdio_exit_handler+0xc>)
 8008dfe:	4903      	ldr	r1, [pc, #12]	@ (8008e0c <stdio_exit_handler+0x10>)
 8008e00:	4803      	ldr	r0, [pc, #12]	@ (8008e10 <stdio_exit_handler+0x14>)
 8008e02:	f000 b869 	b.w	8008ed8 <_fwalk_sglue>
 8008e06:	bf00      	nop
 8008e08:	20000030 	.word	0x20000030
 8008e0c:	0800b191 	.word	0x0800b191
 8008e10:	20000040 	.word	0x20000040

08008e14 <cleanup_stdio>:
 8008e14:	6841      	ldr	r1, [r0, #4]
 8008e16:	4b0c      	ldr	r3, [pc, #48]	@ (8008e48 <cleanup_stdio+0x34>)
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	4299      	cmp	r1, r3
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	d001      	beq.n	8008e24 <cleanup_stdio+0x10>
 8008e20:	f002 f9b6 	bl	800b190 <_fflush_r>
 8008e24:	68a1      	ldr	r1, [r4, #8]
 8008e26:	4b09      	ldr	r3, [pc, #36]	@ (8008e4c <cleanup_stdio+0x38>)
 8008e28:	4299      	cmp	r1, r3
 8008e2a:	d002      	beq.n	8008e32 <cleanup_stdio+0x1e>
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f002 f9af 	bl	800b190 <_fflush_r>
 8008e32:	68e1      	ldr	r1, [r4, #12]
 8008e34:	4b06      	ldr	r3, [pc, #24]	@ (8008e50 <cleanup_stdio+0x3c>)
 8008e36:	4299      	cmp	r1, r3
 8008e38:	d004      	beq.n	8008e44 <cleanup_stdio+0x30>
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e40:	f002 b9a6 	b.w	800b190 <_fflush_r>
 8008e44:	bd10      	pop	{r4, pc}
 8008e46:	bf00      	nop
 8008e48:	20004788 	.word	0x20004788
 8008e4c:	200047f0 	.word	0x200047f0
 8008e50:	20004858 	.word	0x20004858

08008e54 <global_stdio_init.part.0>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	4b0b      	ldr	r3, [pc, #44]	@ (8008e84 <global_stdio_init.part.0+0x30>)
 8008e58:	4c0b      	ldr	r4, [pc, #44]	@ (8008e88 <global_stdio_init.part.0+0x34>)
 8008e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e8c <global_stdio_init.part.0+0x38>)
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	2104      	movs	r1, #4
 8008e62:	2200      	movs	r2, #0
 8008e64:	f7ff ff94 	bl	8008d90 <std>
 8008e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	2109      	movs	r1, #9
 8008e70:	f7ff ff8e 	bl	8008d90 <std>
 8008e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e78:	2202      	movs	r2, #2
 8008e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7e:	2112      	movs	r1, #18
 8008e80:	f7ff bf86 	b.w	8008d90 <std>
 8008e84:	200048c0 	.word	0x200048c0
 8008e88:	20004788 	.word	0x20004788
 8008e8c:	08008dfd 	.word	0x08008dfd

08008e90 <__sfp_lock_acquire>:
 8008e90:	4801      	ldr	r0, [pc, #4]	@ (8008e98 <__sfp_lock_acquire+0x8>)
 8008e92:	f000 b9a2 	b.w	80091da <__retarget_lock_acquire_recursive>
 8008e96:	bf00      	nop
 8008e98:	200048c9 	.word	0x200048c9

08008e9c <__sfp_lock_release>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	@ (8008ea4 <__sfp_lock_release+0x8>)
 8008e9e:	f000 b99d 	b.w	80091dc <__retarget_lock_release_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	200048c9 	.word	0x200048c9

08008ea8 <__sinit>:
 8008ea8:	b510      	push	{r4, lr}
 8008eaa:	4604      	mov	r4, r0
 8008eac:	f7ff fff0 	bl	8008e90 <__sfp_lock_acquire>
 8008eb0:	6a23      	ldr	r3, [r4, #32]
 8008eb2:	b11b      	cbz	r3, 8008ebc <__sinit+0x14>
 8008eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb8:	f7ff bff0 	b.w	8008e9c <__sfp_lock_release>
 8008ebc:	4b04      	ldr	r3, [pc, #16]	@ (8008ed0 <__sinit+0x28>)
 8008ebe:	6223      	str	r3, [r4, #32]
 8008ec0:	4b04      	ldr	r3, [pc, #16]	@ (8008ed4 <__sinit+0x2c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1f5      	bne.n	8008eb4 <__sinit+0xc>
 8008ec8:	f7ff ffc4 	bl	8008e54 <global_stdio_init.part.0>
 8008ecc:	e7f2      	b.n	8008eb4 <__sinit+0xc>
 8008ece:	bf00      	nop
 8008ed0:	08008e15 	.word	0x08008e15
 8008ed4:	200048c0 	.word	0x200048c0

08008ed8 <_fwalk_sglue>:
 8008ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008edc:	4607      	mov	r7, r0
 8008ede:	4688      	mov	r8, r1
 8008ee0:	4614      	mov	r4, r2
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8008eec:	d505      	bpl.n	8008efa <_fwalk_sglue+0x22>
 8008eee:	6824      	ldr	r4, [r4, #0]
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	d1f7      	bne.n	8008ee4 <_fwalk_sglue+0xc>
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008efa:	89ab      	ldrh	r3, [r5, #12]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d907      	bls.n	8008f10 <_fwalk_sglue+0x38>
 8008f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f04:	3301      	adds	r3, #1
 8008f06:	d003      	beq.n	8008f10 <_fwalk_sglue+0x38>
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	47c0      	blx	r8
 8008f0e:	4306      	orrs	r6, r0
 8008f10:	3568      	adds	r5, #104	@ 0x68
 8008f12:	e7e9      	b.n	8008ee8 <_fwalk_sglue+0x10>

08008f14 <siprintf>:
 8008f14:	b40e      	push	{r1, r2, r3}
 8008f16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f1a:	b500      	push	{lr}
 8008f1c:	b09c      	sub	sp, #112	@ 0x70
 8008f1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f20:	9002      	str	r0, [sp, #8]
 8008f22:	9006      	str	r0, [sp, #24]
 8008f24:	9107      	str	r1, [sp, #28]
 8008f26:	9104      	str	r1, [sp, #16]
 8008f28:	4808      	ldr	r0, [pc, #32]	@ (8008f4c <siprintf+0x38>)
 8008f2a:	4909      	ldr	r1, [pc, #36]	@ (8008f50 <siprintf+0x3c>)
 8008f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f30:	9105      	str	r1, [sp, #20]
 8008f32:	6800      	ldr	r0, [r0, #0]
 8008f34:	a902      	add	r1, sp, #8
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	f001 fc98 	bl	800a86c <_svfiprintf_r>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	9b02      	ldr	r3, [sp, #8]
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	b01c      	add	sp, #112	@ 0x70
 8008f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f48:	b003      	add	sp, #12
 8008f4a:	4770      	bx	lr
 8008f4c:	2000003c 	.word	0x2000003c
 8008f50:	ffff0208 	.word	0xffff0208

08008f54 <siscanf>:
 8008f54:	b40e      	push	{r1, r2, r3}
 8008f56:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008f5a:	b530      	push	{r4, r5, lr}
 8008f5c:	b09c      	sub	sp, #112	@ 0x70
 8008f5e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008f60:	f854 5b04 	ldr.w	r5, [r4], #4
 8008f64:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008f68:	9002      	str	r0, [sp, #8]
 8008f6a:	9006      	str	r0, [sp, #24]
 8008f6c:	f7f7 f8f0 	bl	8000150 <strlen>
 8008f70:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa0 <siscanf+0x4c>)
 8008f72:	9003      	str	r0, [sp, #12]
 8008f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f76:	2300      	movs	r3, #0
 8008f78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f7a:	9314      	str	r3, [sp, #80]	@ 0x50
 8008f7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f80:	9007      	str	r0, [sp, #28]
 8008f82:	4808      	ldr	r0, [pc, #32]	@ (8008fa4 <siscanf+0x50>)
 8008f84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f88:	462a      	mov	r2, r5
 8008f8a:	4623      	mov	r3, r4
 8008f8c:	a902      	add	r1, sp, #8
 8008f8e:	6800      	ldr	r0, [r0, #0]
 8008f90:	9401      	str	r4, [sp, #4]
 8008f92:	f001 fdbf 	bl	800ab14 <__ssvfiscanf_r>
 8008f96:	b01c      	add	sp, #112	@ 0x70
 8008f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f9c:	b003      	add	sp, #12
 8008f9e:	4770      	bx	lr
 8008fa0:	08008fcb 	.word	0x08008fcb
 8008fa4:	2000003c 	.word	0x2000003c

08008fa8 <__sread>:
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	460c      	mov	r4, r1
 8008fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb0:	f000 f8c4 	bl	800913c <_read_r>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	bfab      	itete	ge
 8008fb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008fba:	89a3      	ldrhlt	r3, [r4, #12]
 8008fbc:	181b      	addge	r3, r3, r0
 8008fbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008fc2:	bfac      	ite	ge
 8008fc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008fc6:	81a3      	strhlt	r3, [r4, #12]
 8008fc8:	bd10      	pop	{r4, pc}

08008fca <__seofread>:
 8008fca:	2000      	movs	r0, #0
 8008fcc:	4770      	bx	lr

08008fce <__swrite>:
 8008fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd2:	461f      	mov	r7, r3
 8008fd4:	898b      	ldrh	r3, [r1, #12]
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	05db      	lsls	r3, r3, #23
 8008fda:	460c      	mov	r4, r1
 8008fdc:	4616      	mov	r6, r2
 8008fde:	d505      	bpl.n	8008fec <__swrite+0x1e>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe8:	f000 f896 	bl	8009118 <_lseek_r>
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	4632      	mov	r2, r6
 8008ff0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ff4:	81a3      	strh	r3, [r4, #12]
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	463b      	mov	r3, r7
 8008ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009002:	f000 b8ad 	b.w	8009160 <_write_r>

08009006 <__sseek>:
 8009006:	b510      	push	{r4, lr}
 8009008:	460c      	mov	r4, r1
 800900a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900e:	f000 f883 	bl	8009118 <_lseek_r>
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	bf15      	itete	ne
 8009018:	6560      	strne	r0, [r4, #84]	@ 0x54
 800901a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800901e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009022:	81a3      	strheq	r3, [r4, #12]
 8009024:	bf18      	it	ne
 8009026:	81a3      	strhne	r3, [r4, #12]
 8009028:	bd10      	pop	{r4, pc}

0800902a <__sclose>:
 800902a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902e:	f000 b80d 	b.w	800904c <_close_r>

08009032 <memset>:
 8009032:	4603      	mov	r3, r0
 8009034:	4402      	add	r2, r0
 8009036:	4293      	cmp	r3, r2
 8009038:	d100      	bne.n	800903c <memset+0xa>
 800903a:	4770      	bx	lr
 800903c:	f803 1b01 	strb.w	r1, [r3], #1
 8009040:	e7f9      	b.n	8009036 <memset+0x4>
	...

08009044 <_localeconv_r>:
 8009044:	4800      	ldr	r0, [pc, #0]	@ (8009048 <_localeconv_r+0x4>)
 8009046:	4770      	bx	lr
 8009048:	2000017c 	.word	0x2000017c

0800904c <_close_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	2300      	movs	r3, #0
 8009050:	4d05      	ldr	r5, [pc, #20]	@ (8009068 <_close_r+0x1c>)
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f9 fb97 	bl	800278a <_close>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_close_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_close_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	200048c4 	.word	0x200048c4

0800906c <_reclaim_reent>:
 800906c:	4b29      	ldr	r3, [pc, #164]	@ (8009114 <_reclaim_reent+0xa8>)
 800906e:	b570      	push	{r4, r5, r6, lr}
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4604      	mov	r4, r0
 8009074:	4283      	cmp	r3, r0
 8009076:	d04b      	beq.n	8009110 <_reclaim_reent+0xa4>
 8009078:	69c3      	ldr	r3, [r0, #28]
 800907a:	b1ab      	cbz	r3, 80090a8 <_reclaim_reent+0x3c>
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	b16b      	cbz	r3, 800909c <_reclaim_reent+0x30>
 8009080:	2500      	movs	r5, #0
 8009082:	69e3      	ldr	r3, [r4, #28]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	5959      	ldr	r1, [r3, r5]
 8009088:	2900      	cmp	r1, #0
 800908a:	d13b      	bne.n	8009104 <_reclaim_reent+0x98>
 800908c:	3504      	adds	r5, #4
 800908e:	2d80      	cmp	r5, #128	@ 0x80
 8009090:	d1f7      	bne.n	8009082 <_reclaim_reent+0x16>
 8009092:	69e3      	ldr	r3, [r4, #28]
 8009094:	4620      	mov	r0, r4
 8009096:	68d9      	ldr	r1, [r3, #12]
 8009098:	f000 ff0e 	bl	8009eb8 <_free_r>
 800909c:	69e3      	ldr	r3, [r4, #28]
 800909e:	6819      	ldr	r1, [r3, #0]
 80090a0:	b111      	cbz	r1, 80090a8 <_reclaim_reent+0x3c>
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 ff08 	bl	8009eb8 <_free_r>
 80090a8:	6961      	ldr	r1, [r4, #20]
 80090aa:	b111      	cbz	r1, 80090b2 <_reclaim_reent+0x46>
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 ff03 	bl	8009eb8 <_free_r>
 80090b2:	69e1      	ldr	r1, [r4, #28]
 80090b4:	b111      	cbz	r1, 80090bc <_reclaim_reent+0x50>
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 fefe 	bl	8009eb8 <_free_r>
 80090bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090be:	b111      	cbz	r1, 80090c6 <_reclaim_reent+0x5a>
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fef9 	bl	8009eb8 <_free_r>
 80090c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090c8:	b111      	cbz	r1, 80090d0 <_reclaim_reent+0x64>
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 fef4 	bl	8009eb8 <_free_r>
 80090d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80090d2:	b111      	cbz	r1, 80090da <_reclaim_reent+0x6e>
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 feef 	bl	8009eb8 <_free_r>
 80090da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80090dc:	b111      	cbz	r1, 80090e4 <_reclaim_reent+0x78>
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 feea 	bl	8009eb8 <_free_r>
 80090e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80090e6:	b111      	cbz	r1, 80090ee <_reclaim_reent+0x82>
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fee5 	bl	8009eb8 <_free_r>
 80090ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80090f0:	b111      	cbz	r1, 80090f8 <_reclaim_reent+0x8c>
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fee0 	bl	8009eb8 <_free_r>
 80090f8:	6a23      	ldr	r3, [r4, #32]
 80090fa:	b14b      	cbz	r3, 8009110 <_reclaim_reent+0xa4>
 80090fc:	4620      	mov	r0, r4
 80090fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009102:	4718      	bx	r3
 8009104:	680e      	ldr	r6, [r1, #0]
 8009106:	4620      	mov	r0, r4
 8009108:	f000 fed6 	bl	8009eb8 <_free_r>
 800910c:	4631      	mov	r1, r6
 800910e:	e7bb      	b.n	8009088 <_reclaim_reent+0x1c>
 8009110:	bd70      	pop	{r4, r5, r6, pc}
 8009112:	bf00      	nop
 8009114:	2000003c 	.word	0x2000003c

08009118 <_lseek_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	2200      	movs	r2, #0
 8009122:	4d05      	ldr	r5, [pc, #20]	@ (8009138 <_lseek_r+0x20>)
 8009124:	602a      	str	r2, [r5, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f7f9 fb53 	bl	80027d2 <_lseek>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d102      	bne.n	8009136 <_lseek_r+0x1e>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b103      	cbz	r3, 8009136 <_lseek_r+0x1e>
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	200048c4 	.word	0x200048c4

0800913c <_read_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	4611      	mov	r1, r2
 8009144:	2200      	movs	r2, #0
 8009146:	4d05      	ldr	r5, [pc, #20]	@ (800915c <_read_r+0x20>)
 8009148:	602a      	str	r2, [r5, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	f7f9 fae4 	bl	8002718 <_read>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d102      	bne.n	800915a <_read_r+0x1e>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b103      	cbz	r3, 800915a <_read_r+0x1e>
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	200048c4 	.word	0x200048c4

08009160 <_write_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	4611      	mov	r1, r2
 8009168:	2200      	movs	r2, #0
 800916a:	4d05      	ldr	r5, [pc, #20]	@ (8009180 <_write_r+0x20>)
 800916c:	602a      	str	r2, [r5, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	f7f9 faef 	bl	8002752 <_write>
 8009174:	1c43      	adds	r3, r0, #1
 8009176:	d102      	bne.n	800917e <_write_r+0x1e>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	b103      	cbz	r3, 800917e <_write_r+0x1e>
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	bd38      	pop	{r3, r4, r5, pc}
 8009180:	200048c4 	.word	0x200048c4

08009184 <__errno>:
 8009184:	4b01      	ldr	r3, [pc, #4]	@ (800918c <__errno+0x8>)
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	2000003c 	.word	0x2000003c

08009190 <__libc_init_array>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	2600      	movs	r6, #0
 8009194:	4d0c      	ldr	r5, [pc, #48]	@ (80091c8 <__libc_init_array+0x38>)
 8009196:	4c0d      	ldr	r4, [pc, #52]	@ (80091cc <__libc_init_array+0x3c>)
 8009198:	1b64      	subs	r4, r4, r5
 800919a:	10a4      	asrs	r4, r4, #2
 800919c:	42a6      	cmp	r6, r4
 800919e:	d109      	bne.n	80091b4 <__libc_init_array+0x24>
 80091a0:	f002 fce2 	bl	800bb68 <_init>
 80091a4:	2600      	movs	r6, #0
 80091a6:	4d0a      	ldr	r5, [pc, #40]	@ (80091d0 <__libc_init_array+0x40>)
 80091a8:	4c0a      	ldr	r4, [pc, #40]	@ (80091d4 <__libc_init_array+0x44>)
 80091aa:	1b64      	subs	r4, r4, r5
 80091ac:	10a4      	asrs	r4, r4, #2
 80091ae:	42a6      	cmp	r6, r4
 80091b0:	d105      	bne.n	80091be <__libc_init_array+0x2e>
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b8:	4798      	blx	r3
 80091ba:	3601      	adds	r6, #1
 80091bc:	e7ee      	b.n	800919c <__libc_init_array+0xc>
 80091be:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c2:	4798      	blx	r3
 80091c4:	3601      	adds	r6, #1
 80091c6:	e7f2      	b.n	80091ae <__libc_init_array+0x1e>
 80091c8:	0800c10c 	.word	0x0800c10c
 80091cc:	0800c10c 	.word	0x0800c10c
 80091d0:	0800c10c 	.word	0x0800c10c
 80091d4:	0800c110 	.word	0x0800c110

080091d8 <__retarget_lock_init_recursive>:
 80091d8:	4770      	bx	lr

080091da <__retarget_lock_acquire_recursive>:
 80091da:	4770      	bx	lr

080091dc <__retarget_lock_release_recursive>:
 80091dc:	4770      	bx	lr

080091de <memchr>:
 80091de:	4603      	mov	r3, r0
 80091e0:	b510      	push	{r4, lr}
 80091e2:	b2c9      	uxtb	r1, r1
 80091e4:	4402      	add	r2, r0
 80091e6:	4293      	cmp	r3, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	d101      	bne.n	80091f0 <memchr+0x12>
 80091ec:	2000      	movs	r0, #0
 80091ee:	e003      	b.n	80091f8 <memchr+0x1a>
 80091f0:	7804      	ldrb	r4, [r0, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	428c      	cmp	r4, r1
 80091f6:	d1f6      	bne.n	80091e6 <memchr+0x8>
 80091f8:	bd10      	pop	{r4, pc}

080091fa <memcpy>:
 80091fa:	440a      	add	r2, r1
 80091fc:	4291      	cmp	r1, r2
 80091fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009202:	d100      	bne.n	8009206 <memcpy+0xc>
 8009204:	4770      	bx	lr
 8009206:	b510      	push	{r4, lr}
 8009208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920c:	4291      	cmp	r1, r2
 800920e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009212:	d1f9      	bne.n	8009208 <memcpy+0xe>
 8009214:	bd10      	pop	{r4, pc}

08009216 <quorem>:
 8009216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	6903      	ldr	r3, [r0, #16]
 800921c:	690c      	ldr	r4, [r1, #16]
 800921e:	4607      	mov	r7, r0
 8009220:	42a3      	cmp	r3, r4
 8009222:	db7e      	blt.n	8009322 <quorem+0x10c>
 8009224:	3c01      	subs	r4, #1
 8009226:	00a3      	lsls	r3, r4, #2
 8009228:	f100 0514 	add.w	r5, r0, #20
 800922c:	f101 0814 	add.w	r8, r1, #20
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800923c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009240:	3301      	adds	r3, #1
 8009242:	429a      	cmp	r2, r3
 8009244:	fbb2 f6f3 	udiv	r6, r2, r3
 8009248:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800924c:	d32e      	bcc.n	80092ac <quorem+0x96>
 800924e:	f04f 0a00 	mov.w	sl, #0
 8009252:	46c4      	mov	ip, r8
 8009254:	46ae      	mov	lr, r5
 8009256:	46d3      	mov	fp, sl
 8009258:	f85c 3b04 	ldr.w	r3, [ip], #4
 800925c:	b298      	uxth	r0, r3
 800925e:	fb06 a000 	mla	r0, r6, r0, sl
 8009262:	0c1b      	lsrs	r3, r3, #16
 8009264:	0c02      	lsrs	r2, r0, #16
 8009266:	fb06 2303 	mla	r3, r6, r3, r2
 800926a:	f8de 2000 	ldr.w	r2, [lr]
 800926e:	b280      	uxth	r0, r0
 8009270:	b292      	uxth	r2, r2
 8009272:	1a12      	subs	r2, r2, r0
 8009274:	445a      	add	r2, fp
 8009276:	f8de 0000 	ldr.w	r0, [lr]
 800927a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800927e:	b29b      	uxth	r3, r3
 8009280:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009284:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009288:	b292      	uxth	r2, r2
 800928a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800928e:	45e1      	cmp	r9, ip
 8009290:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009294:	f84e 2b04 	str.w	r2, [lr], #4
 8009298:	d2de      	bcs.n	8009258 <quorem+0x42>
 800929a:	9b00      	ldr	r3, [sp, #0]
 800929c:	58eb      	ldr	r3, [r5, r3]
 800929e:	b92b      	cbnz	r3, 80092ac <quorem+0x96>
 80092a0:	9b01      	ldr	r3, [sp, #4]
 80092a2:	3b04      	subs	r3, #4
 80092a4:	429d      	cmp	r5, r3
 80092a6:	461a      	mov	r2, r3
 80092a8:	d32f      	bcc.n	800930a <quorem+0xf4>
 80092aa:	613c      	str	r4, [r7, #16]
 80092ac:	4638      	mov	r0, r7
 80092ae:	f001 f979 	bl	800a5a4 <__mcmp>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	db25      	blt.n	8009302 <quorem+0xec>
 80092b6:	4629      	mov	r1, r5
 80092b8:	2000      	movs	r0, #0
 80092ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80092be:	f8d1 c000 	ldr.w	ip, [r1]
 80092c2:	fa1f fe82 	uxth.w	lr, r2
 80092c6:	fa1f f38c 	uxth.w	r3, ip
 80092ca:	eba3 030e 	sub.w	r3, r3, lr
 80092ce:	4403      	add	r3, r0
 80092d0:	0c12      	lsrs	r2, r2, #16
 80092d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092da:	b29b      	uxth	r3, r3
 80092dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092e0:	45c1      	cmp	r9, r8
 80092e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092e6:	f841 3b04 	str.w	r3, [r1], #4
 80092ea:	d2e6      	bcs.n	80092ba <quorem+0xa4>
 80092ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092f4:	b922      	cbnz	r2, 8009300 <quorem+0xea>
 80092f6:	3b04      	subs	r3, #4
 80092f8:	429d      	cmp	r5, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	d30b      	bcc.n	8009316 <quorem+0x100>
 80092fe:	613c      	str	r4, [r7, #16]
 8009300:	3601      	adds	r6, #1
 8009302:	4630      	mov	r0, r6
 8009304:	b003      	add	sp, #12
 8009306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930a:	6812      	ldr	r2, [r2, #0]
 800930c:	3b04      	subs	r3, #4
 800930e:	2a00      	cmp	r2, #0
 8009310:	d1cb      	bne.n	80092aa <quorem+0x94>
 8009312:	3c01      	subs	r4, #1
 8009314:	e7c6      	b.n	80092a4 <quorem+0x8e>
 8009316:	6812      	ldr	r2, [r2, #0]
 8009318:	3b04      	subs	r3, #4
 800931a:	2a00      	cmp	r2, #0
 800931c:	d1ef      	bne.n	80092fe <quorem+0xe8>
 800931e:	3c01      	subs	r4, #1
 8009320:	e7ea      	b.n	80092f8 <quorem+0xe2>
 8009322:	2000      	movs	r0, #0
 8009324:	e7ee      	b.n	8009304 <quorem+0xee>
	...

08009328 <_dtoa_r>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	4614      	mov	r4, r2
 800932e:	461d      	mov	r5, r3
 8009330:	69c7      	ldr	r7, [r0, #28]
 8009332:	b097      	sub	sp, #92	@ 0x5c
 8009334:	4683      	mov	fp, r0
 8009336:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800933a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800933c:	b97f      	cbnz	r7, 800935e <_dtoa_r+0x36>
 800933e:	2010      	movs	r0, #16
 8009340:	f000 fe02 	bl	8009f48 <malloc>
 8009344:	4602      	mov	r2, r0
 8009346:	f8cb 001c 	str.w	r0, [fp, #28]
 800934a:	b920      	cbnz	r0, 8009356 <_dtoa_r+0x2e>
 800934c:	21ef      	movs	r1, #239	@ 0xef
 800934e:	4ba8      	ldr	r3, [pc, #672]	@ (80095f0 <_dtoa_r+0x2c8>)
 8009350:	48a8      	ldr	r0, [pc, #672]	@ (80095f4 <_dtoa_r+0x2cc>)
 8009352:	f001 ffe1 	bl	800b318 <__assert_func>
 8009356:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800935a:	6007      	str	r7, [r0, #0]
 800935c:	60c7      	str	r7, [r0, #12]
 800935e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009362:	6819      	ldr	r1, [r3, #0]
 8009364:	b159      	cbz	r1, 800937e <_dtoa_r+0x56>
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	2301      	movs	r3, #1
 800936a:	4093      	lsls	r3, r2
 800936c:	604a      	str	r2, [r1, #4]
 800936e:	608b      	str	r3, [r1, #8]
 8009370:	4658      	mov	r0, fp
 8009372:	f000 fedf 	bl	800a134 <_Bfree>
 8009376:	2200      	movs	r2, #0
 8009378:	f8db 301c 	ldr.w	r3, [fp, #28]
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	1e2b      	subs	r3, r5, #0
 8009380:	bfaf      	iteee	ge
 8009382:	2300      	movge	r3, #0
 8009384:	2201      	movlt	r2, #1
 8009386:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800938a:	9303      	strlt	r3, [sp, #12]
 800938c:	bfa8      	it	ge
 800938e:	6033      	strge	r3, [r6, #0]
 8009390:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009394:	4b98      	ldr	r3, [pc, #608]	@ (80095f8 <_dtoa_r+0x2d0>)
 8009396:	bfb8      	it	lt
 8009398:	6032      	strlt	r2, [r6, #0]
 800939a:	ea33 0308 	bics.w	r3, r3, r8
 800939e:	d112      	bne.n	80093c6 <_dtoa_r+0x9e>
 80093a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80093ac:	4323      	orrs	r3, r4
 80093ae:	f000 8550 	beq.w	8009e52 <_dtoa_r+0xb2a>
 80093b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80093b4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80095fc <_dtoa_r+0x2d4>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8552 	beq.w	8009e62 <_dtoa_r+0xb3a>
 80093be:	f10a 0303 	add.w	r3, sl, #3
 80093c2:	f000 bd4c 	b.w	8009e5e <_dtoa_r+0xb36>
 80093c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80093ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093d2:	2200      	movs	r2, #0
 80093d4:	2300      	movs	r3, #0
 80093d6:	f7f7 fae7 	bl	80009a8 <__aeabi_dcmpeq>
 80093da:	4607      	mov	r7, r0
 80093dc:	b158      	cbz	r0, 80093f6 <_dtoa_r+0xce>
 80093de:	2301      	movs	r3, #1
 80093e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80093e6:	b113      	cbz	r3, 80093ee <_dtoa_r+0xc6>
 80093e8:	4b85      	ldr	r3, [pc, #532]	@ (8009600 <_dtoa_r+0x2d8>)
 80093ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009604 <_dtoa_r+0x2dc>
 80093f2:	f000 bd36 	b.w	8009e62 <_dtoa_r+0xb3a>
 80093f6:	ab14      	add	r3, sp, #80	@ 0x50
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	ab15      	add	r3, sp, #84	@ 0x54
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	4658      	mov	r0, fp
 8009400:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009404:	f001 f97e 	bl	800a704 <__d2b>
 8009408:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800940c:	4681      	mov	r9, r0
 800940e:	2e00      	cmp	r6, #0
 8009410:	d077      	beq.n	8009502 <_dtoa_r+0x1da>
 8009412:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009418:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800941c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009420:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009424:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009428:	9712      	str	r7, [sp, #72]	@ 0x48
 800942a:	4619      	mov	r1, r3
 800942c:	2200      	movs	r2, #0
 800942e:	4b76      	ldr	r3, [pc, #472]	@ (8009608 <_dtoa_r+0x2e0>)
 8009430:	f7f6 fe9a 	bl	8000168 <__aeabi_dsub>
 8009434:	a368      	add	r3, pc, #416	@ (adr r3, 80095d8 <_dtoa_r+0x2b0>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f7 f84d 	bl	80004d8 <__aeabi_dmul>
 800943e:	a368      	add	r3, pc, #416	@ (adr r3, 80095e0 <_dtoa_r+0x2b8>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	f7f6 fe92 	bl	800016c <__adddf3>
 8009448:	4604      	mov	r4, r0
 800944a:	4630      	mov	r0, r6
 800944c:	460d      	mov	r5, r1
 800944e:	f7f6 ffd9 	bl	8000404 <__aeabi_i2d>
 8009452:	a365      	add	r3, pc, #404	@ (adr r3, 80095e8 <_dtoa_r+0x2c0>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f7f7 f83e 	bl	80004d8 <__aeabi_dmul>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4620      	mov	r0, r4
 8009462:	4629      	mov	r1, r5
 8009464:	f7f6 fe82 	bl	800016c <__adddf3>
 8009468:	4604      	mov	r4, r0
 800946a:	460d      	mov	r5, r1
 800946c:	f7f7 fae4 	bl	8000a38 <__aeabi_d2iz>
 8009470:	2200      	movs	r2, #0
 8009472:	4607      	mov	r7, r0
 8009474:	2300      	movs	r3, #0
 8009476:	4620      	mov	r0, r4
 8009478:	4629      	mov	r1, r5
 800947a:	f7f7 fa9f 	bl	80009bc <__aeabi_dcmplt>
 800947e:	b140      	cbz	r0, 8009492 <_dtoa_r+0x16a>
 8009480:	4638      	mov	r0, r7
 8009482:	f7f6 ffbf 	bl	8000404 <__aeabi_i2d>
 8009486:	4622      	mov	r2, r4
 8009488:	462b      	mov	r3, r5
 800948a:	f7f7 fa8d 	bl	80009a8 <__aeabi_dcmpeq>
 800948e:	b900      	cbnz	r0, 8009492 <_dtoa_r+0x16a>
 8009490:	3f01      	subs	r7, #1
 8009492:	2f16      	cmp	r7, #22
 8009494:	d853      	bhi.n	800953e <_dtoa_r+0x216>
 8009496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800949a:	4b5c      	ldr	r3, [pc, #368]	@ (800960c <_dtoa_r+0x2e4>)
 800949c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f7f7 fa8a 	bl	80009bc <__aeabi_dcmplt>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d04a      	beq.n	8009542 <_dtoa_r+0x21a>
 80094ac:	2300      	movs	r3, #0
 80094ae:	3f01      	subs	r7, #1
 80094b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094b4:	1b9b      	subs	r3, r3, r6
 80094b6:	1e5a      	subs	r2, r3, #1
 80094b8:	bf46      	itte	mi
 80094ba:	f1c3 0801 	rsbmi	r8, r3, #1
 80094be:	2300      	movmi	r3, #0
 80094c0:	f04f 0800 	movpl.w	r8, #0
 80094c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80094c6:	bf48      	it	mi
 80094c8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80094ca:	2f00      	cmp	r7, #0
 80094cc:	db3b      	blt.n	8009546 <_dtoa_r+0x21e>
 80094ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d0:	970e      	str	r7, [sp, #56]	@ 0x38
 80094d2:	443b      	add	r3, r7
 80094d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d6:	2300      	movs	r3, #0
 80094d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094dc:	2b09      	cmp	r3, #9
 80094de:	d866      	bhi.n	80095ae <_dtoa_r+0x286>
 80094e0:	2b05      	cmp	r3, #5
 80094e2:	bfc4      	itt	gt
 80094e4:	3b04      	subgt	r3, #4
 80094e6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80094e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094ea:	bfc8      	it	gt
 80094ec:	2400      	movgt	r4, #0
 80094ee:	f1a3 0302 	sub.w	r3, r3, #2
 80094f2:	bfd8      	it	le
 80094f4:	2401      	movle	r4, #1
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d864      	bhi.n	80095c4 <_dtoa_r+0x29c>
 80094fa:	e8df f003 	tbb	[pc, r3]
 80094fe:	382b      	.short	0x382b
 8009500:	5636      	.short	0x5636
 8009502:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009506:	441e      	add	r6, r3
 8009508:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800950c:	2b20      	cmp	r3, #32
 800950e:	bfc1      	itttt	gt
 8009510:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009514:	fa08 f803 	lslgt.w	r8, r8, r3
 8009518:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800951c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009520:	bfd6      	itet	le
 8009522:	f1c3 0320 	rsble	r3, r3, #32
 8009526:	ea48 0003 	orrgt.w	r0, r8, r3
 800952a:	fa04 f003 	lslle.w	r0, r4, r3
 800952e:	f7f6 ff59 	bl	80003e4 <__aeabi_ui2d>
 8009532:	2201      	movs	r2, #1
 8009534:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009538:	3e01      	subs	r6, #1
 800953a:	9212      	str	r2, [sp, #72]	@ 0x48
 800953c:	e775      	b.n	800942a <_dtoa_r+0x102>
 800953e:	2301      	movs	r3, #1
 8009540:	e7b6      	b.n	80094b0 <_dtoa_r+0x188>
 8009542:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009544:	e7b5      	b.n	80094b2 <_dtoa_r+0x18a>
 8009546:	427b      	negs	r3, r7
 8009548:	930a      	str	r3, [sp, #40]	@ 0x28
 800954a:	2300      	movs	r3, #0
 800954c:	eba8 0807 	sub.w	r8, r8, r7
 8009550:	930e      	str	r3, [sp, #56]	@ 0x38
 8009552:	e7c2      	b.n	80094da <_dtoa_r+0x1b2>
 8009554:	2300      	movs	r3, #0
 8009556:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009558:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800955a:	2b00      	cmp	r3, #0
 800955c:	dc35      	bgt.n	80095ca <_dtoa_r+0x2a2>
 800955e:	2301      	movs	r3, #1
 8009560:	461a      	mov	r2, r3
 8009562:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009566:	9221      	str	r2, [sp, #132]	@ 0x84
 8009568:	e00b      	b.n	8009582 <_dtoa_r+0x25a>
 800956a:	2301      	movs	r3, #1
 800956c:	e7f3      	b.n	8009556 <_dtoa_r+0x22e>
 800956e:	2300      	movs	r3, #0
 8009570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009572:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009574:	18fb      	adds	r3, r7, r3
 8009576:	9308      	str	r3, [sp, #32]
 8009578:	3301      	adds	r3, #1
 800957a:	2b01      	cmp	r3, #1
 800957c:	9307      	str	r3, [sp, #28]
 800957e:	bfb8      	it	lt
 8009580:	2301      	movlt	r3, #1
 8009582:	2100      	movs	r1, #0
 8009584:	2204      	movs	r2, #4
 8009586:	f8db 001c 	ldr.w	r0, [fp, #28]
 800958a:	f102 0514 	add.w	r5, r2, #20
 800958e:	429d      	cmp	r5, r3
 8009590:	d91f      	bls.n	80095d2 <_dtoa_r+0x2aa>
 8009592:	6041      	str	r1, [r0, #4]
 8009594:	4658      	mov	r0, fp
 8009596:	f000 fd8d 	bl	800a0b4 <_Balloc>
 800959a:	4682      	mov	sl, r0
 800959c:	2800      	cmp	r0, #0
 800959e:	d139      	bne.n	8009614 <_dtoa_r+0x2ec>
 80095a0:	4602      	mov	r2, r0
 80095a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80095a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009610 <_dtoa_r+0x2e8>)
 80095a8:	e6d2      	b.n	8009350 <_dtoa_r+0x28>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e7e0      	b.n	8009570 <_dtoa_r+0x248>
 80095ae:	2401      	movs	r4, #1
 80095b0:	2300      	movs	r3, #0
 80095b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80095b6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ba:	2200      	movs	r2, #0
 80095bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80095c0:	2312      	movs	r3, #18
 80095c2:	e7d0      	b.n	8009566 <_dtoa_r+0x23e>
 80095c4:	2301      	movs	r3, #1
 80095c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095c8:	e7f5      	b.n	80095b6 <_dtoa_r+0x28e>
 80095ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80095d0:	e7d7      	b.n	8009582 <_dtoa_r+0x25a>
 80095d2:	3101      	adds	r1, #1
 80095d4:	0052      	lsls	r2, r2, #1
 80095d6:	e7d8      	b.n	800958a <_dtoa_r+0x262>
 80095d8:	636f4361 	.word	0x636f4361
 80095dc:	3fd287a7 	.word	0x3fd287a7
 80095e0:	8b60c8b3 	.word	0x8b60c8b3
 80095e4:	3fc68a28 	.word	0x3fc68a28
 80095e8:	509f79fb 	.word	0x509f79fb
 80095ec:	3fd34413 	.word	0x3fd34413
 80095f0:	0800bdb9 	.word	0x0800bdb9
 80095f4:	0800bdd0 	.word	0x0800bdd0
 80095f8:	7ff00000 	.word	0x7ff00000
 80095fc:	0800bdb5 	.word	0x0800bdb5
 8009600:	0800bfb8 	.word	0x0800bfb8
 8009604:	0800bfb7 	.word	0x0800bfb7
 8009608:	3ff80000 	.word	0x3ff80000
 800960c:	0800bec8 	.word	0x0800bec8
 8009610:	0800be28 	.word	0x0800be28
 8009614:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009618:	6018      	str	r0, [r3, #0]
 800961a:	9b07      	ldr	r3, [sp, #28]
 800961c:	2b0e      	cmp	r3, #14
 800961e:	f200 80a4 	bhi.w	800976a <_dtoa_r+0x442>
 8009622:	2c00      	cmp	r4, #0
 8009624:	f000 80a1 	beq.w	800976a <_dtoa_r+0x442>
 8009628:	2f00      	cmp	r7, #0
 800962a:	dd33      	ble.n	8009694 <_dtoa_r+0x36c>
 800962c:	4b86      	ldr	r3, [pc, #536]	@ (8009848 <_dtoa_r+0x520>)
 800962e:	f007 020f 	and.w	r2, r7, #15
 8009632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009636:	05f8      	lsls	r0, r7, #23
 8009638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800963c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009640:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009644:	d516      	bpl.n	8009674 <_dtoa_r+0x34c>
 8009646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800964a:	4b80      	ldr	r3, [pc, #512]	@ (800984c <_dtoa_r+0x524>)
 800964c:	2603      	movs	r6, #3
 800964e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009652:	f7f7 f86b 	bl	800072c <__aeabi_ddiv>
 8009656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800965a:	f004 040f 	and.w	r4, r4, #15
 800965e:	4d7b      	ldr	r5, [pc, #492]	@ (800984c <_dtoa_r+0x524>)
 8009660:	b954      	cbnz	r4, 8009678 <_dtoa_r+0x350>
 8009662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800966a:	f7f7 f85f 	bl	800072c <__aeabi_ddiv>
 800966e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009672:	e028      	b.n	80096c6 <_dtoa_r+0x39e>
 8009674:	2602      	movs	r6, #2
 8009676:	e7f2      	b.n	800965e <_dtoa_r+0x336>
 8009678:	07e1      	lsls	r1, r4, #31
 800967a:	d508      	bpl.n	800968e <_dtoa_r+0x366>
 800967c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009680:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009684:	f7f6 ff28 	bl	80004d8 <__aeabi_dmul>
 8009688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800968c:	3601      	adds	r6, #1
 800968e:	1064      	asrs	r4, r4, #1
 8009690:	3508      	adds	r5, #8
 8009692:	e7e5      	b.n	8009660 <_dtoa_r+0x338>
 8009694:	f000 80d2 	beq.w	800983c <_dtoa_r+0x514>
 8009698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800969c:	427c      	negs	r4, r7
 800969e:	4b6a      	ldr	r3, [pc, #424]	@ (8009848 <_dtoa_r+0x520>)
 80096a0:	f004 020f 	and.w	r2, r4, #15
 80096a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 ff14 	bl	80004d8 <__aeabi_dmul>
 80096b0:	2602      	movs	r6, #2
 80096b2:	2300      	movs	r3, #0
 80096b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096b8:	4d64      	ldr	r5, [pc, #400]	@ (800984c <_dtoa_r+0x524>)
 80096ba:	1124      	asrs	r4, r4, #4
 80096bc:	2c00      	cmp	r4, #0
 80096be:	f040 80b2 	bne.w	8009826 <_dtoa_r+0x4fe>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1d3      	bne.n	800966e <_dtoa_r+0x346>
 80096c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 80b7 	beq.w	8009840 <_dtoa_r+0x518>
 80096d2:	2200      	movs	r2, #0
 80096d4:	4620      	mov	r0, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	4b5d      	ldr	r3, [pc, #372]	@ (8009850 <_dtoa_r+0x528>)
 80096da:	f7f7 f96f 	bl	80009bc <__aeabi_dcmplt>
 80096de:	2800      	cmp	r0, #0
 80096e0:	f000 80ae 	beq.w	8009840 <_dtoa_r+0x518>
 80096e4:	9b07      	ldr	r3, [sp, #28]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80aa 	beq.w	8009840 <_dtoa_r+0x518>
 80096ec:	9b08      	ldr	r3, [sp, #32]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dd37      	ble.n	8009762 <_dtoa_r+0x43a>
 80096f2:	1e7b      	subs	r3, r7, #1
 80096f4:	4620      	mov	r0, r4
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	2200      	movs	r2, #0
 80096fa:	4629      	mov	r1, r5
 80096fc:	4b55      	ldr	r3, [pc, #340]	@ (8009854 <_dtoa_r+0x52c>)
 80096fe:	f7f6 feeb 	bl	80004d8 <__aeabi_dmul>
 8009702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009706:	9c08      	ldr	r4, [sp, #32]
 8009708:	3601      	adds	r6, #1
 800970a:	4630      	mov	r0, r6
 800970c:	f7f6 fe7a 	bl	8000404 <__aeabi_i2d>
 8009710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009714:	f7f6 fee0 	bl	80004d8 <__aeabi_dmul>
 8009718:	2200      	movs	r2, #0
 800971a:	4b4f      	ldr	r3, [pc, #316]	@ (8009858 <_dtoa_r+0x530>)
 800971c:	f7f6 fd26 	bl	800016c <__adddf3>
 8009720:	4605      	mov	r5, r0
 8009722:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009726:	2c00      	cmp	r4, #0
 8009728:	f040 809a 	bne.w	8009860 <_dtoa_r+0x538>
 800972c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009730:	2200      	movs	r2, #0
 8009732:	4b4a      	ldr	r3, [pc, #296]	@ (800985c <_dtoa_r+0x534>)
 8009734:	f7f6 fd18 	bl	8000168 <__aeabi_dsub>
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009740:	462a      	mov	r2, r5
 8009742:	4633      	mov	r3, r6
 8009744:	f7f7 f958 	bl	80009f8 <__aeabi_dcmpgt>
 8009748:	2800      	cmp	r0, #0
 800974a:	f040 828e 	bne.w	8009c6a <_dtoa_r+0x942>
 800974e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009752:	462a      	mov	r2, r5
 8009754:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009758:	f7f7 f930 	bl	80009bc <__aeabi_dcmplt>
 800975c:	2800      	cmp	r0, #0
 800975e:	f040 8127 	bne.w	80099b0 <_dtoa_r+0x688>
 8009762:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009766:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800976a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800976c:	2b00      	cmp	r3, #0
 800976e:	f2c0 8163 	blt.w	8009a38 <_dtoa_r+0x710>
 8009772:	2f0e      	cmp	r7, #14
 8009774:	f300 8160 	bgt.w	8009a38 <_dtoa_r+0x710>
 8009778:	4b33      	ldr	r3, [pc, #204]	@ (8009848 <_dtoa_r+0x520>)
 800977a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800977e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009782:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009786:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009788:	2b00      	cmp	r3, #0
 800978a:	da03      	bge.n	8009794 <_dtoa_r+0x46c>
 800978c:	9b07      	ldr	r3, [sp, #28]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f340 8100 	ble.w	8009994 <_dtoa_r+0x66c>
 8009794:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009798:	4656      	mov	r6, sl
 800979a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f6 ffc3 	bl	800072c <__aeabi_ddiv>
 80097a6:	f7f7 f947 	bl	8000a38 <__aeabi_d2iz>
 80097aa:	4680      	mov	r8, r0
 80097ac:	f7f6 fe2a 	bl	8000404 <__aeabi_i2d>
 80097b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097b4:	f7f6 fe90 	bl	80004d8 <__aeabi_dmul>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4620      	mov	r0, r4
 80097be:	4629      	mov	r1, r5
 80097c0:	f7f6 fcd2 	bl	8000168 <__aeabi_dsub>
 80097c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097c8:	9d07      	ldr	r5, [sp, #28]
 80097ca:	f806 4b01 	strb.w	r4, [r6], #1
 80097ce:	eba6 040a 	sub.w	r4, r6, sl
 80097d2:	42a5      	cmp	r5, r4
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	f040 8116 	bne.w	8009a08 <_dtoa_r+0x6e0>
 80097dc:	f7f6 fcc6 	bl	800016c <__adddf3>
 80097e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097e4:	4604      	mov	r4, r0
 80097e6:	460d      	mov	r5, r1
 80097e8:	f7f7 f906 	bl	80009f8 <__aeabi_dcmpgt>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	f040 80f8 	bne.w	80099e2 <_dtoa_r+0x6ba>
 80097f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f7 f8d5 	bl	80009a8 <__aeabi_dcmpeq>
 80097fe:	b118      	cbz	r0, 8009808 <_dtoa_r+0x4e0>
 8009800:	f018 0f01 	tst.w	r8, #1
 8009804:	f040 80ed 	bne.w	80099e2 <_dtoa_r+0x6ba>
 8009808:	4649      	mov	r1, r9
 800980a:	4658      	mov	r0, fp
 800980c:	f000 fc92 	bl	800a134 <_Bfree>
 8009810:	2300      	movs	r3, #0
 8009812:	7033      	strb	r3, [r6, #0]
 8009814:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009816:	3701      	adds	r7, #1
 8009818:	601f      	str	r7, [r3, #0]
 800981a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8320 	beq.w	8009e62 <_dtoa_r+0xb3a>
 8009822:	601e      	str	r6, [r3, #0]
 8009824:	e31d      	b.n	8009e62 <_dtoa_r+0xb3a>
 8009826:	07e2      	lsls	r2, r4, #31
 8009828:	d505      	bpl.n	8009836 <_dtoa_r+0x50e>
 800982a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800982e:	f7f6 fe53 	bl	80004d8 <__aeabi_dmul>
 8009832:	2301      	movs	r3, #1
 8009834:	3601      	adds	r6, #1
 8009836:	1064      	asrs	r4, r4, #1
 8009838:	3508      	adds	r5, #8
 800983a:	e73f      	b.n	80096bc <_dtoa_r+0x394>
 800983c:	2602      	movs	r6, #2
 800983e:	e742      	b.n	80096c6 <_dtoa_r+0x39e>
 8009840:	9c07      	ldr	r4, [sp, #28]
 8009842:	9704      	str	r7, [sp, #16]
 8009844:	e761      	b.n	800970a <_dtoa_r+0x3e2>
 8009846:	bf00      	nop
 8009848:	0800bec8 	.word	0x0800bec8
 800984c:	0800bea0 	.word	0x0800bea0
 8009850:	3ff00000 	.word	0x3ff00000
 8009854:	40240000 	.word	0x40240000
 8009858:	401c0000 	.word	0x401c0000
 800985c:	40140000 	.word	0x40140000
 8009860:	4b70      	ldr	r3, [pc, #448]	@ (8009a24 <_dtoa_r+0x6fc>)
 8009862:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009868:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800986c:	4454      	add	r4, sl
 800986e:	2900      	cmp	r1, #0
 8009870:	d045      	beq.n	80098fe <_dtoa_r+0x5d6>
 8009872:	2000      	movs	r0, #0
 8009874:	496c      	ldr	r1, [pc, #432]	@ (8009a28 <_dtoa_r+0x700>)
 8009876:	f7f6 ff59 	bl	800072c <__aeabi_ddiv>
 800987a:	4633      	mov	r3, r6
 800987c:	462a      	mov	r2, r5
 800987e:	f7f6 fc73 	bl	8000168 <__aeabi_dsub>
 8009882:	4656      	mov	r6, sl
 8009884:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800988c:	f7f7 f8d4 	bl	8000a38 <__aeabi_d2iz>
 8009890:	4605      	mov	r5, r0
 8009892:	f7f6 fdb7 	bl	8000404 <__aeabi_i2d>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800989e:	f7f6 fc63 	bl	8000168 <__aeabi_dsub>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	3530      	adds	r5, #48	@ 0x30
 80098a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098b0:	f806 5b01 	strb.w	r5, [r6], #1
 80098b4:	f7f7 f882 	bl	80009bc <__aeabi_dcmplt>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d163      	bne.n	8009984 <_dtoa_r+0x65c>
 80098bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098c0:	2000      	movs	r0, #0
 80098c2:	495a      	ldr	r1, [pc, #360]	@ (8009a2c <_dtoa_r+0x704>)
 80098c4:	f7f6 fc50 	bl	8000168 <__aeabi_dsub>
 80098c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098cc:	f7f7 f876 	bl	80009bc <__aeabi_dcmplt>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	f040 8087 	bne.w	80099e4 <_dtoa_r+0x6bc>
 80098d6:	42a6      	cmp	r6, r4
 80098d8:	f43f af43 	beq.w	8009762 <_dtoa_r+0x43a>
 80098dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098e0:	2200      	movs	r2, #0
 80098e2:	4b53      	ldr	r3, [pc, #332]	@ (8009a30 <_dtoa_r+0x708>)
 80098e4:	f7f6 fdf8 	bl	80004d8 <__aeabi_dmul>
 80098e8:	2200      	movs	r2, #0
 80098ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098f2:	4b4f      	ldr	r3, [pc, #316]	@ (8009a30 <_dtoa_r+0x708>)
 80098f4:	f7f6 fdf0 	bl	80004d8 <__aeabi_dmul>
 80098f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098fc:	e7c4      	b.n	8009888 <_dtoa_r+0x560>
 80098fe:	4631      	mov	r1, r6
 8009900:	4628      	mov	r0, r5
 8009902:	f7f6 fde9 	bl	80004d8 <__aeabi_dmul>
 8009906:	4656      	mov	r6, sl
 8009908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800990c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800990e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009912:	f7f7 f891 	bl	8000a38 <__aeabi_d2iz>
 8009916:	4605      	mov	r5, r0
 8009918:	f7f6 fd74 	bl	8000404 <__aeabi_i2d>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009924:	f7f6 fc20 	bl	8000168 <__aeabi_dsub>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	3530      	adds	r5, #48	@ 0x30
 800992e:	f806 5b01 	strb.w	r5, [r6], #1
 8009932:	42a6      	cmp	r6, r4
 8009934:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	d124      	bne.n	8009988 <_dtoa_r+0x660>
 800993e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009942:	4b39      	ldr	r3, [pc, #228]	@ (8009a28 <_dtoa_r+0x700>)
 8009944:	f7f6 fc12 	bl	800016c <__adddf3>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009950:	f7f7 f852 	bl	80009f8 <__aeabi_dcmpgt>
 8009954:	2800      	cmp	r0, #0
 8009956:	d145      	bne.n	80099e4 <_dtoa_r+0x6bc>
 8009958:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800995c:	2000      	movs	r0, #0
 800995e:	4932      	ldr	r1, [pc, #200]	@ (8009a28 <_dtoa_r+0x700>)
 8009960:	f7f6 fc02 	bl	8000168 <__aeabi_dsub>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800996c:	f7f7 f826 	bl	80009bc <__aeabi_dcmplt>
 8009970:	2800      	cmp	r0, #0
 8009972:	f43f aef6 	beq.w	8009762 <_dtoa_r+0x43a>
 8009976:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009978:	1e73      	subs	r3, r6, #1
 800997a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800997c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009980:	2b30      	cmp	r3, #48	@ 0x30
 8009982:	d0f8      	beq.n	8009976 <_dtoa_r+0x64e>
 8009984:	9f04      	ldr	r7, [sp, #16]
 8009986:	e73f      	b.n	8009808 <_dtoa_r+0x4e0>
 8009988:	4b29      	ldr	r3, [pc, #164]	@ (8009a30 <_dtoa_r+0x708>)
 800998a:	f7f6 fda5 	bl	80004d8 <__aeabi_dmul>
 800998e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009992:	e7bc      	b.n	800990e <_dtoa_r+0x5e6>
 8009994:	d10c      	bne.n	80099b0 <_dtoa_r+0x688>
 8009996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800999a:	2200      	movs	r2, #0
 800999c:	4b25      	ldr	r3, [pc, #148]	@ (8009a34 <_dtoa_r+0x70c>)
 800999e:	f7f6 fd9b 	bl	80004d8 <__aeabi_dmul>
 80099a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a6:	f7f7 f81d 	bl	80009e4 <__aeabi_dcmpge>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	f000 815b 	beq.w	8009c66 <_dtoa_r+0x93e>
 80099b0:	2400      	movs	r4, #0
 80099b2:	4625      	mov	r5, r4
 80099b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099b6:	4656      	mov	r6, sl
 80099b8:	43db      	mvns	r3, r3
 80099ba:	9304      	str	r3, [sp, #16]
 80099bc:	2700      	movs	r7, #0
 80099be:	4621      	mov	r1, r4
 80099c0:	4658      	mov	r0, fp
 80099c2:	f000 fbb7 	bl	800a134 <_Bfree>
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	d0dc      	beq.n	8009984 <_dtoa_r+0x65c>
 80099ca:	b12f      	cbz	r7, 80099d8 <_dtoa_r+0x6b0>
 80099cc:	42af      	cmp	r7, r5
 80099ce:	d003      	beq.n	80099d8 <_dtoa_r+0x6b0>
 80099d0:	4639      	mov	r1, r7
 80099d2:	4658      	mov	r0, fp
 80099d4:	f000 fbae 	bl	800a134 <_Bfree>
 80099d8:	4629      	mov	r1, r5
 80099da:	4658      	mov	r0, fp
 80099dc:	f000 fbaa 	bl	800a134 <_Bfree>
 80099e0:	e7d0      	b.n	8009984 <_dtoa_r+0x65c>
 80099e2:	9704      	str	r7, [sp, #16]
 80099e4:	4633      	mov	r3, r6
 80099e6:	461e      	mov	r6, r3
 80099e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ec:	2a39      	cmp	r2, #57	@ 0x39
 80099ee:	d107      	bne.n	8009a00 <_dtoa_r+0x6d8>
 80099f0:	459a      	cmp	sl, r3
 80099f2:	d1f8      	bne.n	80099e6 <_dtoa_r+0x6be>
 80099f4:	9a04      	ldr	r2, [sp, #16]
 80099f6:	3201      	adds	r2, #1
 80099f8:	9204      	str	r2, [sp, #16]
 80099fa:	2230      	movs	r2, #48	@ 0x30
 80099fc:	f88a 2000 	strb.w	r2, [sl]
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	3201      	adds	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e7bd      	b.n	8009984 <_dtoa_r+0x65c>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4b09      	ldr	r3, [pc, #36]	@ (8009a30 <_dtoa_r+0x708>)
 8009a0c:	f7f6 fd64 	bl	80004d8 <__aeabi_dmul>
 8009a10:	2200      	movs	r2, #0
 8009a12:	2300      	movs	r3, #0
 8009a14:	4604      	mov	r4, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	f7f6 ffc6 	bl	80009a8 <__aeabi_dcmpeq>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	f43f aebc 	beq.w	800979a <_dtoa_r+0x472>
 8009a22:	e6f1      	b.n	8009808 <_dtoa_r+0x4e0>
 8009a24:	0800bec8 	.word	0x0800bec8
 8009a28:	3fe00000 	.word	0x3fe00000
 8009a2c:	3ff00000 	.word	0x3ff00000
 8009a30:	40240000 	.word	0x40240000
 8009a34:	40140000 	.word	0x40140000
 8009a38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a3a:	2a00      	cmp	r2, #0
 8009a3c:	f000 80db 	beq.w	8009bf6 <_dtoa_r+0x8ce>
 8009a40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009a42:	2a01      	cmp	r2, #1
 8009a44:	f300 80bf 	bgt.w	8009bc6 <_dtoa_r+0x89e>
 8009a48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a4a:	2a00      	cmp	r2, #0
 8009a4c:	f000 80b7 	beq.w	8009bbe <_dtoa_r+0x896>
 8009a50:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a54:	4646      	mov	r6, r8
 8009a56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	441a      	add	r2, r3
 8009a5e:	4658      	mov	r0, fp
 8009a60:	4498      	add	r8, r3
 8009a62:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a64:	f000 fc1a 	bl	800a29c <__i2b>
 8009a68:	4605      	mov	r5, r0
 8009a6a:	b15e      	cbz	r6, 8009a84 <_dtoa_r+0x75c>
 8009a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	dd08      	ble.n	8009a84 <_dtoa_r+0x75c>
 8009a72:	42b3      	cmp	r3, r6
 8009a74:	bfa8      	it	ge
 8009a76:	4633      	movge	r3, r6
 8009a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a7a:	eba8 0803 	sub.w	r8, r8, r3
 8009a7e:	1af6      	subs	r6, r6, r3
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a86:	b1f3      	cbz	r3, 8009ac6 <_dtoa_r+0x79e>
 8009a88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 80b7 	beq.w	8009bfe <_dtoa_r+0x8d6>
 8009a90:	b18c      	cbz	r4, 8009ab6 <_dtoa_r+0x78e>
 8009a92:	4629      	mov	r1, r5
 8009a94:	4622      	mov	r2, r4
 8009a96:	4658      	mov	r0, fp
 8009a98:	f000 fcbe 	bl	800a418 <__pow5mult>
 8009a9c:	464a      	mov	r2, r9
 8009a9e:	4601      	mov	r1, r0
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	4658      	mov	r0, fp
 8009aa4:	f000 fc10 	bl	800a2c8 <__multiply>
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	9004      	str	r0, [sp, #16]
 8009aac:	4658      	mov	r0, fp
 8009aae:	f000 fb41 	bl	800a134 <_Bfree>
 8009ab2:	9b04      	ldr	r3, [sp, #16]
 8009ab4:	4699      	mov	r9, r3
 8009ab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab8:	1b1a      	subs	r2, r3, r4
 8009aba:	d004      	beq.n	8009ac6 <_dtoa_r+0x79e>
 8009abc:	4649      	mov	r1, r9
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f000 fcaa 	bl	800a418 <__pow5mult>
 8009ac4:	4681      	mov	r9, r0
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	4658      	mov	r0, fp
 8009aca:	f000 fbe7 	bl	800a29c <__i2b>
 8009ace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 81c9 	beq.w	8009e6a <_dtoa_r+0xb42>
 8009ad8:	461a      	mov	r2, r3
 8009ada:	4601      	mov	r1, r0
 8009adc:	4658      	mov	r0, fp
 8009ade:	f000 fc9b 	bl	800a418 <__pow5mult>
 8009ae2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	f300 808f 	bgt.w	8009c0a <_dtoa_r+0x8e2>
 8009aec:	9b02      	ldr	r3, [sp, #8]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f040 8087 	bne.w	8009c02 <_dtoa_r+0x8da>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f040 8083 	bne.w	8009c06 <_dtoa_r+0x8de>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b06:	0d1b      	lsrs	r3, r3, #20
 8009b08:	051b      	lsls	r3, r3, #20
 8009b0a:	b12b      	cbz	r3, 8009b18 <_dtoa_r+0x7f0>
 8009b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b0e:	f108 0801 	add.w	r8, r8, #1
 8009b12:	3301      	adds	r3, #1
 8009b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b16:	2301      	movs	r3, #1
 8009b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 81aa 	beq.w	8009e76 <_dtoa_r+0xb4e>
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b28:	6918      	ldr	r0, [r3, #16]
 8009b2a:	f000 fb6b 	bl	800a204 <__hi0bits>
 8009b2e:	f1c0 0020 	rsb	r0, r0, #32
 8009b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b34:	4418      	add	r0, r3
 8009b36:	f010 001f 	ands.w	r0, r0, #31
 8009b3a:	d071      	beq.n	8009c20 <_dtoa_r+0x8f8>
 8009b3c:	f1c0 0320 	rsb	r3, r0, #32
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	dd65      	ble.n	8009c10 <_dtoa_r+0x8e8>
 8009b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b46:	f1c0 001c 	rsb	r0, r0, #28
 8009b4a:	4403      	add	r3, r0
 8009b4c:	4480      	add	r8, r0
 8009b4e:	4406      	add	r6, r0
 8009b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b52:	f1b8 0f00 	cmp.w	r8, #0
 8009b56:	dd05      	ble.n	8009b64 <_dtoa_r+0x83c>
 8009b58:	4649      	mov	r1, r9
 8009b5a:	4642      	mov	r2, r8
 8009b5c:	4658      	mov	r0, fp
 8009b5e:	f000 fcb5 	bl	800a4cc <__lshift>
 8009b62:	4681      	mov	r9, r0
 8009b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dd05      	ble.n	8009b76 <_dtoa_r+0x84e>
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	4658      	mov	r0, fp
 8009b70:	f000 fcac 	bl	800a4cc <__lshift>
 8009b74:	4604      	mov	r4, r0
 8009b76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d053      	beq.n	8009c24 <_dtoa_r+0x8fc>
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	4648      	mov	r0, r9
 8009b80:	f000 fd10 	bl	800a5a4 <__mcmp>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	da4d      	bge.n	8009c24 <_dtoa_r+0x8fc>
 8009b88:	1e7b      	subs	r3, r7, #1
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	220a      	movs	r2, #10
 8009b90:	2300      	movs	r3, #0
 8009b92:	4658      	mov	r0, fp
 8009b94:	f000 faf0 	bl	800a178 <__multadd>
 8009b98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b9a:	4681      	mov	r9, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 816c 	beq.w	8009e7a <_dtoa_r+0xb52>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	220a      	movs	r2, #10
 8009ba8:	4658      	mov	r0, fp
 8009baa:	f000 fae5 	bl	800a178 <__multadd>
 8009bae:	9b08      	ldr	r3, [sp, #32]
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dc61      	bgt.n	8009c7a <_dtoa_r+0x952>
 8009bb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	dc3b      	bgt.n	8009c34 <_dtoa_r+0x90c>
 8009bbc:	e05d      	b.n	8009c7a <_dtoa_r+0x952>
 8009bbe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bc0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009bc4:	e746      	b.n	8009a54 <_dtoa_r+0x72c>
 8009bc6:	9b07      	ldr	r3, [sp, #28]
 8009bc8:	1e5c      	subs	r4, r3, #1
 8009bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	bfbf      	itttt	lt
 8009bd0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009bd2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009bd4:	1ae3      	sublt	r3, r4, r3
 8009bd6:	18d2      	addlt	r2, r2, r3
 8009bd8:	bfa8      	it	ge
 8009bda:	1b1c      	subge	r4, r3, r4
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	bfbe      	ittt	lt
 8009be0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009be2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009be4:	2400      	movlt	r4, #0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bfb5      	itete	lt
 8009bea:	eba8 0603 	sublt.w	r6, r8, r3
 8009bee:	4646      	movge	r6, r8
 8009bf0:	2300      	movlt	r3, #0
 8009bf2:	9b07      	ldrge	r3, [sp, #28]
 8009bf4:	e730      	b.n	8009a58 <_dtoa_r+0x730>
 8009bf6:	4646      	mov	r6, r8
 8009bf8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bfa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009bfc:	e735      	b.n	8009a6a <_dtoa_r+0x742>
 8009bfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c00:	e75c      	b.n	8009abc <_dtoa_r+0x794>
 8009c02:	2300      	movs	r3, #0
 8009c04:	e788      	b.n	8009b18 <_dtoa_r+0x7f0>
 8009c06:	9b02      	ldr	r3, [sp, #8]
 8009c08:	e786      	b.n	8009b18 <_dtoa_r+0x7f0>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c0e:	e788      	b.n	8009b22 <_dtoa_r+0x7fa>
 8009c10:	d09f      	beq.n	8009b52 <_dtoa_r+0x82a>
 8009c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c14:	331c      	adds	r3, #28
 8009c16:	441a      	add	r2, r3
 8009c18:	4498      	add	r8, r3
 8009c1a:	441e      	add	r6, r3
 8009c1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c1e:	e798      	b.n	8009b52 <_dtoa_r+0x82a>
 8009c20:	4603      	mov	r3, r0
 8009c22:	e7f6      	b.n	8009c12 <_dtoa_r+0x8ea>
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	9704      	str	r7, [sp, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	dc20      	bgt.n	8009c6e <_dtoa_r+0x946>
 8009c2c:	9308      	str	r3, [sp, #32]
 8009c2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	dd1e      	ble.n	8009c72 <_dtoa_r+0x94a>
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f47f aebc 	bne.w	80099b4 <_dtoa_r+0x68c>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	2205      	movs	r2, #5
 8009c40:	4658      	mov	r0, fp
 8009c42:	f000 fa99 	bl	800a178 <__multadd>
 8009c46:	4601      	mov	r1, r0
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4648      	mov	r0, r9
 8009c4c:	f000 fcaa 	bl	800a5a4 <__mcmp>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	f77f aeaf 	ble.w	80099b4 <_dtoa_r+0x68c>
 8009c56:	2331      	movs	r3, #49	@ 0x31
 8009c58:	4656      	mov	r6, sl
 8009c5a:	f806 3b01 	strb.w	r3, [r6], #1
 8009c5e:	9b04      	ldr	r3, [sp, #16]
 8009c60:	3301      	adds	r3, #1
 8009c62:	9304      	str	r3, [sp, #16]
 8009c64:	e6aa      	b.n	80099bc <_dtoa_r+0x694>
 8009c66:	9c07      	ldr	r4, [sp, #28]
 8009c68:	9704      	str	r7, [sp, #16]
 8009c6a:	4625      	mov	r5, r4
 8009c6c:	e7f3      	b.n	8009c56 <_dtoa_r+0x92e>
 8009c6e:	9b07      	ldr	r3, [sp, #28]
 8009c70:	9308      	str	r3, [sp, #32]
 8009c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 8104 	beq.w	8009e82 <_dtoa_r+0xb5a>
 8009c7a:	2e00      	cmp	r6, #0
 8009c7c:	dd05      	ble.n	8009c8a <_dtoa_r+0x962>
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4632      	mov	r2, r6
 8009c82:	4658      	mov	r0, fp
 8009c84:	f000 fc22 	bl	800a4cc <__lshift>
 8009c88:	4605      	mov	r5, r0
 8009c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d05a      	beq.n	8009d46 <_dtoa_r+0xa1e>
 8009c90:	4658      	mov	r0, fp
 8009c92:	6869      	ldr	r1, [r5, #4]
 8009c94:	f000 fa0e 	bl	800a0b4 <_Balloc>
 8009c98:	4606      	mov	r6, r0
 8009c9a:	b928      	cbnz	r0, 8009ca8 <_dtoa_r+0x980>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ca2:	4b83      	ldr	r3, [pc, #524]	@ (8009eb0 <_dtoa_r+0xb88>)
 8009ca4:	f7ff bb54 	b.w	8009350 <_dtoa_r+0x28>
 8009ca8:	692a      	ldr	r2, [r5, #16]
 8009caa:	f105 010c 	add.w	r1, r5, #12
 8009cae:	3202      	adds	r2, #2
 8009cb0:	0092      	lsls	r2, r2, #2
 8009cb2:	300c      	adds	r0, #12
 8009cb4:	f7ff faa1 	bl	80091fa <memcpy>
 8009cb8:	2201      	movs	r2, #1
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4658      	mov	r0, fp
 8009cbe:	f000 fc05 	bl	800a4cc <__lshift>
 8009cc2:	462f      	mov	r7, r5
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	f10a 0301 	add.w	r3, sl, #1
 8009cca:	9307      	str	r3, [sp, #28]
 8009ccc:	9b08      	ldr	r3, [sp, #32]
 8009cce:	4453      	add	r3, sl
 8009cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cd2:	9b02      	ldr	r3, [sp, #8]
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cda:	9b07      	ldr	r3, [sp, #28]
 8009cdc:	4621      	mov	r1, r4
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	4648      	mov	r0, r9
 8009ce2:	9302      	str	r3, [sp, #8]
 8009ce4:	f7ff fa97 	bl	8009216 <quorem>
 8009ce8:	4639      	mov	r1, r7
 8009cea:	9008      	str	r0, [sp, #32]
 8009cec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cf0:	4648      	mov	r0, r9
 8009cf2:	f000 fc57 	bl	800a5a4 <__mcmp>
 8009cf6:	462a      	mov	r2, r5
 8009cf8:	9009      	str	r0, [sp, #36]	@ 0x24
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4658      	mov	r0, fp
 8009cfe:	f000 fc6d 	bl	800a5dc <__mdiff>
 8009d02:	68c2      	ldr	r2, [r0, #12]
 8009d04:	4606      	mov	r6, r0
 8009d06:	bb02      	cbnz	r2, 8009d4a <_dtoa_r+0xa22>
 8009d08:	4601      	mov	r1, r0
 8009d0a:	4648      	mov	r0, r9
 8009d0c:	f000 fc4a 	bl	800a5a4 <__mcmp>
 8009d10:	4602      	mov	r2, r0
 8009d12:	4631      	mov	r1, r6
 8009d14:	4658      	mov	r0, fp
 8009d16:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d18:	f000 fa0c 	bl	800a134 <_Bfree>
 8009d1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d20:	9e07      	ldr	r6, [sp, #28]
 8009d22:	ea43 0102 	orr.w	r1, r3, r2
 8009d26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d28:	4319      	orrs	r1, r3
 8009d2a:	d110      	bne.n	8009d4e <_dtoa_r+0xa26>
 8009d2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d30:	d029      	beq.n	8009d86 <_dtoa_r+0xa5e>
 8009d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dd02      	ble.n	8009d3e <_dtoa_r+0xa16>
 8009d38:	9b08      	ldr	r3, [sp, #32]
 8009d3a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d3e:	9b02      	ldr	r3, [sp, #8]
 8009d40:	f883 8000 	strb.w	r8, [r3]
 8009d44:	e63b      	b.n	80099be <_dtoa_r+0x696>
 8009d46:	4628      	mov	r0, r5
 8009d48:	e7bb      	b.n	8009cc2 <_dtoa_r+0x99a>
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	e7e1      	b.n	8009d12 <_dtoa_r+0x9ea>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db04      	blt.n	8009d5e <_dtoa_r+0xa36>
 8009d54:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009d56:	430b      	orrs	r3, r1
 8009d58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	d120      	bne.n	8009da0 <_dtoa_r+0xa78>
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	dded      	ble.n	8009d3e <_dtoa_r+0xa16>
 8009d62:	4649      	mov	r1, r9
 8009d64:	2201      	movs	r2, #1
 8009d66:	4658      	mov	r0, fp
 8009d68:	f000 fbb0 	bl	800a4cc <__lshift>
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	4681      	mov	r9, r0
 8009d70:	f000 fc18 	bl	800a5a4 <__mcmp>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	dc03      	bgt.n	8009d80 <_dtoa_r+0xa58>
 8009d78:	d1e1      	bne.n	8009d3e <_dtoa_r+0xa16>
 8009d7a:	f018 0f01 	tst.w	r8, #1
 8009d7e:	d0de      	beq.n	8009d3e <_dtoa_r+0xa16>
 8009d80:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d84:	d1d8      	bne.n	8009d38 <_dtoa_r+0xa10>
 8009d86:	2339      	movs	r3, #57	@ 0x39
 8009d88:	9a02      	ldr	r2, [sp, #8]
 8009d8a:	7013      	strb	r3, [r2, #0]
 8009d8c:	4633      	mov	r3, r6
 8009d8e:	461e      	mov	r6, r3
 8009d90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	2a39      	cmp	r2, #57	@ 0x39
 8009d98:	d052      	beq.n	8009e40 <_dtoa_r+0xb18>
 8009d9a:	3201      	adds	r2, #1
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	e60e      	b.n	80099be <_dtoa_r+0x696>
 8009da0:	2a00      	cmp	r2, #0
 8009da2:	dd07      	ble.n	8009db4 <_dtoa_r+0xa8c>
 8009da4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009da8:	d0ed      	beq.n	8009d86 <_dtoa_r+0xa5e>
 8009daa:	9a02      	ldr	r2, [sp, #8]
 8009dac:	f108 0301 	add.w	r3, r8, #1
 8009db0:	7013      	strb	r3, [r2, #0]
 8009db2:	e604      	b.n	80099be <_dtoa_r+0x696>
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	9a07      	ldr	r2, [sp, #28]
 8009db8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009dbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d028      	beq.n	8009e14 <_dtoa_r+0xaec>
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	220a      	movs	r2, #10
 8009dc8:	4658      	mov	r0, fp
 8009dca:	f000 f9d5 	bl	800a178 <__multadd>
 8009dce:	42af      	cmp	r7, r5
 8009dd0:	4681      	mov	r9, r0
 8009dd2:	f04f 0300 	mov.w	r3, #0
 8009dd6:	f04f 020a 	mov.w	r2, #10
 8009dda:	4639      	mov	r1, r7
 8009ddc:	4658      	mov	r0, fp
 8009dde:	d107      	bne.n	8009df0 <_dtoa_r+0xac8>
 8009de0:	f000 f9ca 	bl	800a178 <__multadd>
 8009de4:	4607      	mov	r7, r0
 8009de6:	4605      	mov	r5, r0
 8009de8:	9b07      	ldr	r3, [sp, #28]
 8009dea:	3301      	adds	r3, #1
 8009dec:	9307      	str	r3, [sp, #28]
 8009dee:	e774      	b.n	8009cda <_dtoa_r+0x9b2>
 8009df0:	f000 f9c2 	bl	800a178 <__multadd>
 8009df4:	4629      	mov	r1, r5
 8009df6:	4607      	mov	r7, r0
 8009df8:	2300      	movs	r3, #0
 8009dfa:	220a      	movs	r2, #10
 8009dfc:	4658      	mov	r0, fp
 8009dfe:	f000 f9bb 	bl	800a178 <__multadd>
 8009e02:	4605      	mov	r5, r0
 8009e04:	e7f0      	b.n	8009de8 <_dtoa_r+0xac0>
 8009e06:	9b08      	ldr	r3, [sp, #32]
 8009e08:	2700      	movs	r7, #0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	bfcc      	ite	gt
 8009e0e:	461e      	movgt	r6, r3
 8009e10:	2601      	movle	r6, #1
 8009e12:	4456      	add	r6, sl
 8009e14:	4649      	mov	r1, r9
 8009e16:	2201      	movs	r2, #1
 8009e18:	4658      	mov	r0, fp
 8009e1a:	f000 fb57 	bl	800a4cc <__lshift>
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4681      	mov	r9, r0
 8009e22:	f000 fbbf 	bl	800a5a4 <__mcmp>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	dcb0      	bgt.n	8009d8c <_dtoa_r+0xa64>
 8009e2a:	d102      	bne.n	8009e32 <_dtoa_r+0xb0a>
 8009e2c:	f018 0f01 	tst.w	r8, #1
 8009e30:	d1ac      	bne.n	8009d8c <_dtoa_r+0xa64>
 8009e32:	4633      	mov	r3, r6
 8009e34:	461e      	mov	r6, r3
 8009e36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e3a:	2a30      	cmp	r2, #48	@ 0x30
 8009e3c:	d0fa      	beq.n	8009e34 <_dtoa_r+0xb0c>
 8009e3e:	e5be      	b.n	80099be <_dtoa_r+0x696>
 8009e40:	459a      	cmp	sl, r3
 8009e42:	d1a4      	bne.n	8009d8e <_dtoa_r+0xa66>
 8009e44:	9b04      	ldr	r3, [sp, #16]
 8009e46:	3301      	adds	r3, #1
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	2331      	movs	r3, #49	@ 0x31
 8009e4c:	f88a 3000 	strb.w	r3, [sl]
 8009e50:	e5b5      	b.n	80099be <_dtoa_r+0x696>
 8009e52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e54:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009eb4 <_dtoa_r+0xb8c>
 8009e58:	b11b      	cbz	r3, 8009e62 <_dtoa_r+0xb3a>
 8009e5a:	f10a 0308 	add.w	r3, sl, #8
 8009e5e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	4650      	mov	r0, sl
 8009e64:	b017      	add	sp, #92	@ 0x5c
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	f77f ae3d 	ble.w	8009aec <_dtoa_r+0x7c4>
 8009e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e74:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e76:	2001      	movs	r0, #1
 8009e78:	e65b      	b.n	8009b32 <_dtoa_r+0x80a>
 8009e7a:	9b08      	ldr	r3, [sp, #32]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f77f aed6 	ble.w	8009c2e <_dtoa_r+0x906>
 8009e82:	4656      	mov	r6, sl
 8009e84:	4621      	mov	r1, r4
 8009e86:	4648      	mov	r0, r9
 8009e88:	f7ff f9c5 	bl	8009216 <quorem>
 8009e8c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e90:	9b08      	ldr	r3, [sp, #32]
 8009e92:	f806 8b01 	strb.w	r8, [r6], #1
 8009e96:	eba6 020a 	sub.w	r2, r6, sl
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	ddb3      	ble.n	8009e06 <_dtoa_r+0xade>
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	220a      	movs	r2, #10
 8009ea4:	4658      	mov	r0, fp
 8009ea6:	f000 f967 	bl	800a178 <__multadd>
 8009eaa:	4681      	mov	r9, r0
 8009eac:	e7ea      	b.n	8009e84 <_dtoa_r+0xb5c>
 8009eae:	bf00      	nop
 8009eb0:	0800be28 	.word	0x0800be28
 8009eb4:	0800bdac 	.word	0x0800bdac

08009eb8 <_free_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4605      	mov	r5, r0
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d040      	beq.n	8009f42 <_free_r+0x8a>
 8009ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec4:	1f0c      	subs	r4, r1, #4
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfb8      	it	lt
 8009eca:	18e4      	addlt	r4, r4, r3
 8009ecc:	f000 f8e6 	bl	800a09c <__malloc_lock>
 8009ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8009f44 <_free_r+0x8c>)
 8009ed2:	6813      	ldr	r3, [r2, #0]
 8009ed4:	b933      	cbnz	r3, 8009ee4 <_free_r+0x2c>
 8009ed6:	6063      	str	r3, [r4, #4]
 8009ed8:	6014      	str	r4, [r2, #0]
 8009eda:	4628      	mov	r0, r5
 8009edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee0:	f000 b8e2 	b.w	800a0a8 <__malloc_unlock>
 8009ee4:	42a3      	cmp	r3, r4
 8009ee6:	d908      	bls.n	8009efa <_free_r+0x42>
 8009ee8:	6820      	ldr	r0, [r4, #0]
 8009eea:	1821      	adds	r1, r4, r0
 8009eec:	428b      	cmp	r3, r1
 8009eee:	bf01      	itttt	eq
 8009ef0:	6819      	ldreq	r1, [r3, #0]
 8009ef2:	685b      	ldreq	r3, [r3, #4]
 8009ef4:	1809      	addeq	r1, r1, r0
 8009ef6:	6021      	streq	r1, [r4, #0]
 8009ef8:	e7ed      	b.n	8009ed6 <_free_r+0x1e>
 8009efa:	461a      	mov	r2, r3
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	b10b      	cbz	r3, 8009f04 <_free_r+0x4c>
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	d9fa      	bls.n	8009efa <_free_r+0x42>
 8009f04:	6811      	ldr	r1, [r2, #0]
 8009f06:	1850      	adds	r0, r2, r1
 8009f08:	42a0      	cmp	r0, r4
 8009f0a:	d10b      	bne.n	8009f24 <_free_r+0x6c>
 8009f0c:	6820      	ldr	r0, [r4, #0]
 8009f0e:	4401      	add	r1, r0
 8009f10:	1850      	adds	r0, r2, r1
 8009f12:	4283      	cmp	r3, r0
 8009f14:	6011      	str	r1, [r2, #0]
 8009f16:	d1e0      	bne.n	8009eda <_free_r+0x22>
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	4408      	add	r0, r1
 8009f1e:	6010      	str	r0, [r2, #0]
 8009f20:	6053      	str	r3, [r2, #4]
 8009f22:	e7da      	b.n	8009eda <_free_r+0x22>
 8009f24:	d902      	bls.n	8009f2c <_free_r+0x74>
 8009f26:	230c      	movs	r3, #12
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	e7d6      	b.n	8009eda <_free_r+0x22>
 8009f2c:	6820      	ldr	r0, [r4, #0]
 8009f2e:	1821      	adds	r1, r4, r0
 8009f30:	428b      	cmp	r3, r1
 8009f32:	bf01      	itttt	eq
 8009f34:	6819      	ldreq	r1, [r3, #0]
 8009f36:	685b      	ldreq	r3, [r3, #4]
 8009f38:	1809      	addeq	r1, r1, r0
 8009f3a:	6021      	streq	r1, [r4, #0]
 8009f3c:	6063      	str	r3, [r4, #4]
 8009f3e:	6054      	str	r4, [r2, #4]
 8009f40:	e7cb      	b.n	8009eda <_free_r+0x22>
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	200048d0 	.word	0x200048d0

08009f48 <malloc>:
 8009f48:	4b02      	ldr	r3, [pc, #8]	@ (8009f54 <malloc+0xc>)
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	6818      	ldr	r0, [r3, #0]
 8009f4e:	f000 b825 	b.w	8009f9c <_malloc_r>
 8009f52:	bf00      	nop
 8009f54:	2000003c 	.word	0x2000003c

08009f58 <sbrk_aligned>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8009f98 <sbrk_aligned+0x40>)
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	6831      	ldr	r1, [r6, #0]
 8009f60:	4605      	mov	r5, r0
 8009f62:	b911      	cbnz	r1, 8009f6a <sbrk_aligned+0x12>
 8009f64:	f001 f9c8 	bl	800b2f8 <_sbrk_r>
 8009f68:	6030      	str	r0, [r6, #0]
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f001 f9c3 	bl	800b2f8 <_sbrk_r>
 8009f72:	1c43      	adds	r3, r0, #1
 8009f74:	d103      	bne.n	8009f7e <sbrk_aligned+0x26>
 8009f76:	f04f 34ff 	mov.w	r4, #4294967295
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	bd70      	pop	{r4, r5, r6, pc}
 8009f7e:	1cc4      	adds	r4, r0, #3
 8009f80:	f024 0403 	bic.w	r4, r4, #3
 8009f84:	42a0      	cmp	r0, r4
 8009f86:	d0f8      	beq.n	8009f7a <sbrk_aligned+0x22>
 8009f88:	1a21      	subs	r1, r4, r0
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f001 f9b4 	bl	800b2f8 <_sbrk_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d1f2      	bne.n	8009f7a <sbrk_aligned+0x22>
 8009f94:	e7ef      	b.n	8009f76 <sbrk_aligned+0x1e>
 8009f96:	bf00      	nop
 8009f98:	200048cc 	.word	0x200048cc

08009f9c <_malloc_r>:
 8009f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fa0:	1ccd      	adds	r5, r1, #3
 8009fa2:	f025 0503 	bic.w	r5, r5, #3
 8009fa6:	3508      	adds	r5, #8
 8009fa8:	2d0c      	cmp	r5, #12
 8009faa:	bf38      	it	cc
 8009fac:	250c      	movcc	r5, #12
 8009fae:	2d00      	cmp	r5, #0
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	db01      	blt.n	8009fb8 <_malloc_r+0x1c>
 8009fb4:	42a9      	cmp	r1, r5
 8009fb6:	d904      	bls.n	8009fc2 <_malloc_r+0x26>
 8009fb8:	230c      	movs	r3, #12
 8009fba:	6033      	str	r3, [r6, #0]
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a098 <_malloc_r+0xfc>
 8009fc6:	f000 f869 	bl	800a09c <__malloc_lock>
 8009fca:	f8d8 3000 	ldr.w	r3, [r8]
 8009fce:	461c      	mov	r4, r3
 8009fd0:	bb44      	cbnz	r4, 800a024 <_malloc_r+0x88>
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f7ff ffbf 	bl	8009f58 <sbrk_aligned>
 8009fda:	1c43      	adds	r3, r0, #1
 8009fdc:	4604      	mov	r4, r0
 8009fde:	d158      	bne.n	800a092 <_malloc_r+0xf6>
 8009fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8009fe4:	4627      	mov	r7, r4
 8009fe6:	2f00      	cmp	r7, #0
 8009fe8:	d143      	bne.n	800a072 <_malloc_r+0xd6>
 8009fea:	2c00      	cmp	r4, #0
 8009fec:	d04b      	beq.n	800a086 <_malloc_r+0xea>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	eb04 0903 	add.w	r9, r4, r3
 8009ff8:	f001 f97e 	bl	800b2f8 <_sbrk_r>
 8009ffc:	4581      	cmp	r9, r0
 8009ffe:	d142      	bne.n	800a086 <_malloc_r+0xea>
 800a000:	6821      	ldr	r1, [r4, #0]
 800a002:	4630      	mov	r0, r6
 800a004:	1a6d      	subs	r5, r5, r1
 800a006:	4629      	mov	r1, r5
 800a008:	f7ff ffa6 	bl	8009f58 <sbrk_aligned>
 800a00c:	3001      	adds	r0, #1
 800a00e:	d03a      	beq.n	800a086 <_malloc_r+0xea>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	442b      	add	r3, r5
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	f8d8 3000 	ldr.w	r3, [r8]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	bb62      	cbnz	r2, 800a078 <_malloc_r+0xdc>
 800a01e:	f8c8 7000 	str.w	r7, [r8]
 800a022:	e00f      	b.n	800a044 <_malloc_r+0xa8>
 800a024:	6822      	ldr	r2, [r4, #0]
 800a026:	1b52      	subs	r2, r2, r5
 800a028:	d420      	bmi.n	800a06c <_malloc_r+0xd0>
 800a02a:	2a0b      	cmp	r2, #11
 800a02c:	d917      	bls.n	800a05e <_malloc_r+0xc2>
 800a02e:	1961      	adds	r1, r4, r5
 800a030:	42a3      	cmp	r3, r4
 800a032:	6025      	str	r5, [r4, #0]
 800a034:	bf18      	it	ne
 800a036:	6059      	strne	r1, [r3, #4]
 800a038:	6863      	ldr	r3, [r4, #4]
 800a03a:	bf08      	it	eq
 800a03c:	f8c8 1000 	streq.w	r1, [r8]
 800a040:	5162      	str	r2, [r4, r5]
 800a042:	604b      	str	r3, [r1, #4]
 800a044:	4630      	mov	r0, r6
 800a046:	f000 f82f 	bl	800a0a8 <__malloc_unlock>
 800a04a:	f104 000b 	add.w	r0, r4, #11
 800a04e:	1d23      	adds	r3, r4, #4
 800a050:	f020 0007 	bic.w	r0, r0, #7
 800a054:	1ac2      	subs	r2, r0, r3
 800a056:	bf1c      	itt	ne
 800a058:	1a1b      	subne	r3, r3, r0
 800a05a:	50a3      	strne	r3, [r4, r2]
 800a05c:	e7af      	b.n	8009fbe <_malloc_r+0x22>
 800a05e:	6862      	ldr	r2, [r4, #4]
 800a060:	42a3      	cmp	r3, r4
 800a062:	bf0c      	ite	eq
 800a064:	f8c8 2000 	streq.w	r2, [r8]
 800a068:	605a      	strne	r2, [r3, #4]
 800a06a:	e7eb      	b.n	800a044 <_malloc_r+0xa8>
 800a06c:	4623      	mov	r3, r4
 800a06e:	6864      	ldr	r4, [r4, #4]
 800a070:	e7ae      	b.n	8009fd0 <_malloc_r+0x34>
 800a072:	463c      	mov	r4, r7
 800a074:	687f      	ldr	r7, [r7, #4]
 800a076:	e7b6      	b.n	8009fe6 <_malloc_r+0x4a>
 800a078:	461a      	mov	r2, r3
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	d1fb      	bne.n	800a078 <_malloc_r+0xdc>
 800a080:	2300      	movs	r3, #0
 800a082:	6053      	str	r3, [r2, #4]
 800a084:	e7de      	b.n	800a044 <_malloc_r+0xa8>
 800a086:	230c      	movs	r3, #12
 800a088:	4630      	mov	r0, r6
 800a08a:	6033      	str	r3, [r6, #0]
 800a08c:	f000 f80c 	bl	800a0a8 <__malloc_unlock>
 800a090:	e794      	b.n	8009fbc <_malloc_r+0x20>
 800a092:	6005      	str	r5, [r0, #0]
 800a094:	e7d6      	b.n	800a044 <_malloc_r+0xa8>
 800a096:	bf00      	nop
 800a098:	200048d0 	.word	0x200048d0

0800a09c <__malloc_lock>:
 800a09c:	4801      	ldr	r0, [pc, #4]	@ (800a0a4 <__malloc_lock+0x8>)
 800a09e:	f7ff b89c 	b.w	80091da <__retarget_lock_acquire_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	200048c8 	.word	0x200048c8

0800a0a8 <__malloc_unlock>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	@ (800a0b0 <__malloc_unlock+0x8>)
 800a0aa:	f7ff b897 	b.w	80091dc <__retarget_lock_release_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	200048c8 	.word	0x200048c8

0800a0b4 <_Balloc>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	69c6      	ldr	r6, [r0, #28]
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	b976      	cbnz	r6, 800a0dc <_Balloc+0x28>
 800a0be:	2010      	movs	r0, #16
 800a0c0:	f7ff ff42 	bl	8009f48 <malloc>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	61e0      	str	r0, [r4, #28]
 800a0c8:	b920      	cbnz	r0, 800a0d4 <_Balloc+0x20>
 800a0ca:	216b      	movs	r1, #107	@ 0x6b
 800a0cc:	4b17      	ldr	r3, [pc, #92]	@ (800a12c <_Balloc+0x78>)
 800a0ce:	4818      	ldr	r0, [pc, #96]	@ (800a130 <_Balloc+0x7c>)
 800a0d0:	f001 f922 	bl	800b318 <__assert_func>
 800a0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0d8:	6006      	str	r6, [r0, #0]
 800a0da:	60c6      	str	r6, [r0, #12]
 800a0dc:	69e6      	ldr	r6, [r4, #28]
 800a0de:	68f3      	ldr	r3, [r6, #12]
 800a0e0:	b183      	cbz	r3, 800a104 <_Balloc+0x50>
 800a0e2:	69e3      	ldr	r3, [r4, #28]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0ea:	b9b8      	cbnz	r0, 800a11c <_Balloc+0x68>
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	fa01 f605 	lsl.w	r6, r1, r5
 800a0f2:	1d72      	adds	r2, r6, #5
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	0092      	lsls	r2, r2, #2
 800a0f8:	f001 f92c 	bl	800b354 <_calloc_r>
 800a0fc:	b160      	cbz	r0, 800a118 <_Balloc+0x64>
 800a0fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a102:	e00e      	b.n	800a122 <_Balloc+0x6e>
 800a104:	2221      	movs	r2, #33	@ 0x21
 800a106:	2104      	movs	r1, #4
 800a108:	4620      	mov	r0, r4
 800a10a:	f001 f923 	bl	800b354 <_calloc_r>
 800a10e:	69e3      	ldr	r3, [r4, #28]
 800a110:	60f0      	str	r0, [r6, #12]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e4      	bne.n	800a0e2 <_Balloc+0x2e>
 800a118:	2000      	movs	r0, #0
 800a11a:	bd70      	pop	{r4, r5, r6, pc}
 800a11c:	6802      	ldr	r2, [r0, #0]
 800a11e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a122:	2300      	movs	r3, #0
 800a124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a128:	e7f7      	b.n	800a11a <_Balloc+0x66>
 800a12a:	bf00      	nop
 800a12c:	0800bdb9 	.word	0x0800bdb9
 800a130:	0800be39 	.word	0x0800be39

0800a134 <_Bfree>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	69c6      	ldr	r6, [r0, #28]
 800a138:	4605      	mov	r5, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	b976      	cbnz	r6, 800a15c <_Bfree+0x28>
 800a13e:	2010      	movs	r0, #16
 800a140:	f7ff ff02 	bl	8009f48 <malloc>
 800a144:	4602      	mov	r2, r0
 800a146:	61e8      	str	r0, [r5, #28]
 800a148:	b920      	cbnz	r0, 800a154 <_Bfree+0x20>
 800a14a:	218f      	movs	r1, #143	@ 0x8f
 800a14c:	4b08      	ldr	r3, [pc, #32]	@ (800a170 <_Bfree+0x3c>)
 800a14e:	4809      	ldr	r0, [pc, #36]	@ (800a174 <_Bfree+0x40>)
 800a150:	f001 f8e2 	bl	800b318 <__assert_func>
 800a154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a158:	6006      	str	r6, [r0, #0]
 800a15a:	60c6      	str	r6, [r0, #12]
 800a15c:	b13c      	cbz	r4, 800a16e <_Bfree+0x3a>
 800a15e:	69eb      	ldr	r3, [r5, #28]
 800a160:	6862      	ldr	r2, [r4, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a168:	6021      	str	r1, [r4, #0]
 800a16a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
 800a170:	0800bdb9 	.word	0x0800bdb9
 800a174:	0800be39 	.word	0x0800be39

0800a178 <__multadd>:
 800a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	4607      	mov	r7, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	461e      	mov	r6, r3
 800a182:	2000      	movs	r0, #0
 800a184:	690d      	ldr	r5, [r1, #16]
 800a186:	f101 0c14 	add.w	ip, r1, #20
 800a18a:	f8dc 3000 	ldr.w	r3, [ip]
 800a18e:	3001      	adds	r0, #1
 800a190:	b299      	uxth	r1, r3
 800a192:	fb02 6101 	mla	r1, r2, r1, r6
 800a196:	0c1e      	lsrs	r6, r3, #16
 800a198:	0c0b      	lsrs	r3, r1, #16
 800a19a:	fb02 3306 	mla	r3, r2, r6, r3
 800a19e:	b289      	uxth	r1, r1
 800a1a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1a4:	4285      	cmp	r5, r0
 800a1a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a1ae:	dcec      	bgt.n	800a18a <__multadd+0x12>
 800a1b0:	b30e      	cbz	r6, 800a1f6 <__multadd+0x7e>
 800a1b2:	68a3      	ldr	r3, [r4, #8]
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	dc19      	bgt.n	800a1ec <__multadd+0x74>
 800a1b8:	6861      	ldr	r1, [r4, #4]
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	3101      	adds	r1, #1
 800a1be:	f7ff ff79 	bl	800a0b4 <_Balloc>
 800a1c2:	4680      	mov	r8, r0
 800a1c4:	b928      	cbnz	r0, 800a1d2 <__multadd+0x5a>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	21ba      	movs	r1, #186	@ 0xba
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <__multadd+0x84>)
 800a1cc:	480c      	ldr	r0, [pc, #48]	@ (800a200 <__multadd+0x88>)
 800a1ce:	f001 f8a3 	bl	800b318 <__assert_func>
 800a1d2:	6922      	ldr	r2, [r4, #16]
 800a1d4:	f104 010c 	add.w	r1, r4, #12
 800a1d8:	3202      	adds	r2, #2
 800a1da:	0092      	lsls	r2, r2, #2
 800a1dc:	300c      	adds	r0, #12
 800a1de:	f7ff f80c 	bl	80091fa <memcpy>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f7ff ffa5 	bl	800a134 <_Bfree>
 800a1ea:	4644      	mov	r4, r8
 800a1ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	615e      	str	r6, [r3, #20]
 800a1f4:	6125      	str	r5, [r4, #16]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fc:	0800be28 	.word	0x0800be28
 800a200:	0800be39 	.word	0x0800be39

0800a204 <__hi0bits>:
 800a204:	4603      	mov	r3, r0
 800a206:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a20a:	bf3a      	itte	cc
 800a20c:	0403      	lslcc	r3, r0, #16
 800a20e:	2010      	movcc	r0, #16
 800a210:	2000      	movcs	r0, #0
 800a212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a216:	bf3c      	itt	cc
 800a218:	021b      	lslcc	r3, r3, #8
 800a21a:	3008      	addcc	r0, #8
 800a21c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a220:	bf3c      	itt	cc
 800a222:	011b      	lslcc	r3, r3, #4
 800a224:	3004      	addcc	r0, #4
 800a226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a22a:	bf3c      	itt	cc
 800a22c:	009b      	lslcc	r3, r3, #2
 800a22e:	3002      	addcc	r0, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	db05      	blt.n	800a240 <__hi0bits+0x3c>
 800a234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a238:	f100 0001 	add.w	r0, r0, #1
 800a23c:	bf08      	it	eq
 800a23e:	2020      	moveq	r0, #32
 800a240:	4770      	bx	lr

0800a242 <__lo0bits>:
 800a242:	6803      	ldr	r3, [r0, #0]
 800a244:	4602      	mov	r2, r0
 800a246:	f013 0007 	ands.w	r0, r3, #7
 800a24a:	d00b      	beq.n	800a264 <__lo0bits+0x22>
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d421      	bmi.n	800a294 <__lo0bits+0x52>
 800a250:	0798      	lsls	r0, r3, #30
 800a252:	bf49      	itett	mi
 800a254:	085b      	lsrmi	r3, r3, #1
 800a256:	089b      	lsrpl	r3, r3, #2
 800a258:	2001      	movmi	r0, #1
 800a25a:	6013      	strmi	r3, [r2, #0]
 800a25c:	bf5c      	itt	pl
 800a25e:	2002      	movpl	r0, #2
 800a260:	6013      	strpl	r3, [r2, #0]
 800a262:	4770      	bx	lr
 800a264:	b299      	uxth	r1, r3
 800a266:	b909      	cbnz	r1, 800a26c <__lo0bits+0x2a>
 800a268:	2010      	movs	r0, #16
 800a26a:	0c1b      	lsrs	r3, r3, #16
 800a26c:	b2d9      	uxtb	r1, r3
 800a26e:	b909      	cbnz	r1, 800a274 <__lo0bits+0x32>
 800a270:	3008      	adds	r0, #8
 800a272:	0a1b      	lsrs	r3, r3, #8
 800a274:	0719      	lsls	r1, r3, #28
 800a276:	bf04      	itt	eq
 800a278:	091b      	lsreq	r3, r3, #4
 800a27a:	3004      	addeq	r0, #4
 800a27c:	0799      	lsls	r1, r3, #30
 800a27e:	bf04      	itt	eq
 800a280:	089b      	lsreq	r3, r3, #2
 800a282:	3002      	addeq	r0, #2
 800a284:	07d9      	lsls	r1, r3, #31
 800a286:	d403      	bmi.n	800a290 <__lo0bits+0x4e>
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	f100 0001 	add.w	r0, r0, #1
 800a28e:	d003      	beq.n	800a298 <__lo0bits+0x56>
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	4770      	bx	lr
 800a294:	2000      	movs	r0, #0
 800a296:	4770      	bx	lr
 800a298:	2020      	movs	r0, #32
 800a29a:	4770      	bx	lr

0800a29c <__i2b>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	f7ff ff07 	bl	800a0b4 <_Balloc>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	b928      	cbnz	r0, 800a2b6 <__i2b+0x1a>
 800a2aa:	f240 1145 	movw	r1, #325	@ 0x145
 800a2ae:	4b04      	ldr	r3, [pc, #16]	@ (800a2c0 <__i2b+0x24>)
 800a2b0:	4804      	ldr	r0, [pc, #16]	@ (800a2c4 <__i2b+0x28>)
 800a2b2:	f001 f831 	bl	800b318 <__assert_func>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	6144      	str	r4, [r0, #20]
 800a2ba:	6103      	str	r3, [r0, #16]
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800be28 	.word	0x0800be28
 800a2c4:	0800be39 	.word	0x0800be39

0800a2c8 <__multiply>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	690a      	ldr	r2, [r1, #16]
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	460f      	mov	r7, r1
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	bfa2      	ittt	ge
 800a2d8:	4623      	movge	r3, r4
 800a2da:	460c      	movge	r4, r1
 800a2dc:	461f      	movge	r7, r3
 800a2de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2e6:	68a3      	ldr	r3, [r4, #8]
 800a2e8:	6861      	ldr	r1, [r4, #4]
 800a2ea:	eb0a 0609 	add.w	r6, sl, r9
 800a2ee:	42b3      	cmp	r3, r6
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	bfb8      	it	lt
 800a2f4:	3101      	addlt	r1, #1
 800a2f6:	f7ff fedd 	bl	800a0b4 <_Balloc>
 800a2fa:	b930      	cbnz	r0, 800a30a <__multiply+0x42>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a302:	4b43      	ldr	r3, [pc, #268]	@ (800a410 <__multiply+0x148>)
 800a304:	4843      	ldr	r0, [pc, #268]	@ (800a414 <__multiply+0x14c>)
 800a306:	f001 f807 	bl	800b318 <__assert_func>
 800a30a:	f100 0514 	add.w	r5, r0, #20
 800a30e:	462b      	mov	r3, r5
 800a310:	2200      	movs	r2, #0
 800a312:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a316:	4543      	cmp	r3, r8
 800a318:	d321      	bcc.n	800a35e <__multiply+0x96>
 800a31a:	f107 0114 	add.w	r1, r7, #20
 800a31e:	f104 0214 	add.w	r2, r4, #20
 800a322:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a326:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a32a:	9302      	str	r3, [sp, #8]
 800a32c:	1b13      	subs	r3, r2, r4
 800a32e:	3b15      	subs	r3, #21
 800a330:	f023 0303 	bic.w	r3, r3, #3
 800a334:	3304      	adds	r3, #4
 800a336:	f104 0715 	add.w	r7, r4, #21
 800a33a:	42ba      	cmp	r2, r7
 800a33c:	bf38      	it	cc
 800a33e:	2304      	movcc	r3, #4
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	9b02      	ldr	r3, [sp, #8]
 800a344:	9103      	str	r1, [sp, #12]
 800a346:	428b      	cmp	r3, r1
 800a348:	d80c      	bhi.n	800a364 <__multiply+0x9c>
 800a34a:	2e00      	cmp	r6, #0
 800a34c:	dd03      	ble.n	800a356 <__multiply+0x8e>
 800a34e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a352:	2b00      	cmp	r3, #0
 800a354:	d05a      	beq.n	800a40c <__multiply+0x144>
 800a356:	6106      	str	r6, [r0, #16]
 800a358:	b005      	add	sp, #20
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35e:	f843 2b04 	str.w	r2, [r3], #4
 800a362:	e7d8      	b.n	800a316 <__multiply+0x4e>
 800a364:	f8b1 a000 	ldrh.w	sl, [r1]
 800a368:	f1ba 0f00 	cmp.w	sl, #0
 800a36c:	d023      	beq.n	800a3b6 <__multiply+0xee>
 800a36e:	46a9      	mov	r9, r5
 800a370:	f04f 0c00 	mov.w	ip, #0
 800a374:	f104 0e14 	add.w	lr, r4, #20
 800a378:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a37c:	f8d9 3000 	ldr.w	r3, [r9]
 800a380:	fa1f fb87 	uxth.w	fp, r7
 800a384:	b29b      	uxth	r3, r3
 800a386:	fb0a 330b 	mla	r3, sl, fp, r3
 800a38a:	4463      	add	r3, ip
 800a38c:	f8d9 c000 	ldr.w	ip, [r9]
 800a390:	0c3f      	lsrs	r7, r7, #16
 800a392:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a396:	fb0a c707 	mla	r7, sl, r7, ip
 800a39a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3a4:	4572      	cmp	r2, lr
 800a3a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a3aa:	f849 3b04 	str.w	r3, [r9], #4
 800a3ae:	d8e3      	bhi.n	800a378 <__multiply+0xb0>
 800a3b0:	9b01      	ldr	r3, [sp, #4]
 800a3b2:	f845 c003 	str.w	ip, [r5, r3]
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	3104      	adds	r1, #4
 800a3ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3be:	f1b9 0f00 	cmp.w	r9, #0
 800a3c2:	d021      	beq.n	800a408 <__multiply+0x140>
 800a3c4:	46ae      	mov	lr, r5
 800a3c6:	f04f 0a00 	mov.w	sl, #0
 800a3ca:	682b      	ldr	r3, [r5, #0]
 800a3cc:	f104 0c14 	add.w	ip, r4, #20
 800a3d0:	f8bc b000 	ldrh.w	fp, [ip]
 800a3d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	fb09 770b 	mla	r7, r9, fp, r7
 800a3de:	4457      	add	r7, sl
 800a3e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3e4:	f84e 3b04 	str.w	r3, [lr], #4
 800a3e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3f0:	f8be 3000 	ldrh.w	r3, [lr]
 800a3f4:	4562      	cmp	r2, ip
 800a3f6:	fb09 330a 	mla	r3, r9, sl, r3
 800a3fa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a402:	d8e5      	bhi.n	800a3d0 <__multiply+0x108>
 800a404:	9f01      	ldr	r7, [sp, #4]
 800a406:	51eb      	str	r3, [r5, r7]
 800a408:	3504      	adds	r5, #4
 800a40a:	e79a      	b.n	800a342 <__multiply+0x7a>
 800a40c:	3e01      	subs	r6, #1
 800a40e:	e79c      	b.n	800a34a <__multiply+0x82>
 800a410:	0800be28 	.word	0x0800be28
 800a414:	0800be39 	.word	0x0800be39

0800a418 <__pow5mult>:
 800a418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a41c:	4615      	mov	r5, r2
 800a41e:	f012 0203 	ands.w	r2, r2, #3
 800a422:	4607      	mov	r7, r0
 800a424:	460e      	mov	r6, r1
 800a426:	d007      	beq.n	800a438 <__pow5mult+0x20>
 800a428:	4c25      	ldr	r4, [pc, #148]	@ (800a4c0 <__pow5mult+0xa8>)
 800a42a:	3a01      	subs	r2, #1
 800a42c:	2300      	movs	r3, #0
 800a42e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a432:	f7ff fea1 	bl	800a178 <__multadd>
 800a436:	4606      	mov	r6, r0
 800a438:	10ad      	asrs	r5, r5, #2
 800a43a:	d03d      	beq.n	800a4b8 <__pow5mult+0xa0>
 800a43c:	69fc      	ldr	r4, [r7, #28]
 800a43e:	b97c      	cbnz	r4, 800a460 <__pow5mult+0x48>
 800a440:	2010      	movs	r0, #16
 800a442:	f7ff fd81 	bl	8009f48 <malloc>
 800a446:	4602      	mov	r2, r0
 800a448:	61f8      	str	r0, [r7, #28]
 800a44a:	b928      	cbnz	r0, 800a458 <__pow5mult+0x40>
 800a44c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a450:	4b1c      	ldr	r3, [pc, #112]	@ (800a4c4 <__pow5mult+0xac>)
 800a452:	481d      	ldr	r0, [pc, #116]	@ (800a4c8 <__pow5mult+0xb0>)
 800a454:	f000 ff60 	bl	800b318 <__assert_func>
 800a458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a45c:	6004      	str	r4, [r0, #0]
 800a45e:	60c4      	str	r4, [r0, #12]
 800a460:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a468:	b94c      	cbnz	r4, 800a47e <__pow5mult+0x66>
 800a46a:	f240 2171 	movw	r1, #625	@ 0x271
 800a46e:	4638      	mov	r0, r7
 800a470:	f7ff ff14 	bl	800a29c <__i2b>
 800a474:	2300      	movs	r3, #0
 800a476:	4604      	mov	r4, r0
 800a478:	f8c8 0008 	str.w	r0, [r8, #8]
 800a47c:	6003      	str	r3, [r0, #0]
 800a47e:	f04f 0900 	mov.w	r9, #0
 800a482:	07eb      	lsls	r3, r5, #31
 800a484:	d50a      	bpl.n	800a49c <__pow5mult+0x84>
 800a486:	4631      	mov	r1, r6
 800a488:	4622      	mov	r2, r4
 800a48a:	4638      	mov	r0, r7
 800a48c:	f7ff ff1c 	bl	800a2c8 <__multiply>
 800a490:	4680      	mov	r8, r0
 800a492:	4631      	mov	r1, r6
 800a494:	4638      	mov	r0, r7
 800a496:	f7ff fe4d 	bl	800a134 <_Bfree>
 800a49a:	4646      	mov	r6, r8
 800a49c:	106d      	asrs	r5, r5, #1
 800a49e:	d00b      	beq.n	800a4b8 <__pow5mult+0xa0>
 800a4a0:	6820      	ldr	r0, [r4, #0]
 800a4a2:	b938      	cbnz	r0, 800a4b4 <__pow5mult+0x9c>
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7ff ff0d 	bl	800a2c8 <__multiply>
 800a4ae:	6020      	str	r0, [r4, #0]
 800a4b0:	f8c0 9000 	str.w	r9, [r0]
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	e7e4      	b.n	800a482 <__pow5mult+0x6a>
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800be94 	.word	0x0800be94
 800a4c4:	0800bdb9 	.word	0x0800bdb9
 800a4c8:	0800be39 	.word	0x0800be39

0800a4cc <__lshift>:
 800a4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	4607      	mov	r7, r0
 800a4d4:	4691      	mov	r9, r2
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	6849      	ldr	r1, [r1, #4]
 800a4da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4de:	68a3      	ldr	r3, [r4, #8]
 800a4e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4e4:	f108 0601 	add.w	r6, r8, #1
 800a4e8:	42b3      	cmp	r3, r6
 800a4ea:	db0b      	blt.n	800a504 <__lshift+0x38>
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	f7ff fde1 	bl	800a0b4 <_Balloc>
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	b948      	cbnz	r0, 800a50a <__lshift+0x3e>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4fc:	4b27      	ldr	r3, [pc, #156]	@ (800a59c <__lshift+0xd0>)
 800a4fe:	4828      	ldr	r0, [pc, #160]	@ (800a5a0 <__lshift+0xd4>)
 800a500:	f000 ff0a 	bl	800b318 <__assert_func>
 800a504:	3101      	adds	r1, #1
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	e7ee      	b.n	800a4e8 <__lshift+0x1c>
 800a50a:	2300      	movs	r3, #0
 800a50c:	f100 0114 	add.w	r1, r0, #20
 800a510:	f100 0210 	add.w	r2, r0, #16
 800a514:	4618      	mov	r0, r3
 800a516:	4553      	cmp	r3, sl
 800a518:	db33      	blt.n	800a582 <__lshift+0xb6>
 800a51a:	6920      	ldr	r0, [r4, #16]
 800a51c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a520:	f104 0314 	add.w	r3, r4, #20
 800a524:	f019 091f 	ands.w	r9, r9, #31
 800a528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a52c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a530:	d02b      	beq.n	800a58a <__lshift+0xbe>
 800a532:	468a      	mov	sl, r1
 800a534:	2200      	movs	r2, #0
 800a536:	f1c9 0e20 	rsb	lr, r9, #32
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	fa00 f009 	lsl.w	r0, r0, r9
 800a540:	4310      	orrs	r0, r2
 800a542:	f84a 0b04 	str.w	r0, [sl], #4
 800a546:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54a:	459c      	cmp	ip, r3
 800a54c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a550:	d8f3      	bhi.n	800a53a <__lshift+0x6e>
 800a552:	ebac 0304 	sub.w	r3, ip, r4
 800a556:	3b15      	subs	r3, #21
 800a558:	f023 0303 	bic.w	r3, r3, #3
 800a55c:	3304      	adds	r3, #4
 800a55e:	f104 0015 	add.w	r0, r4, #21
 800a562:	4584      	cmp	ip, r0
 800a564:	bf38      	it	cc
 800a566:	2304      	movcc	r3, #4
 800a568:	50ca      	str	r2, [r1, r3]
 800a56a:	b10a      	cbz	r2, 800a570 <__lshift+0xa4>
 800a56c:	f108 0602 	add.w	r6, r8, #2
 800a570:	3e01      	subs	r6, #1
 800a572:	4638      	mov	r0, r7
 800a574:	4621      	mov	r1, r4
 800a576:	612e      	str	r6, [r5, #16]
 800a578:	f7ff fddc 	bl	800a134 <_Bfree>
 800a57c:	4628      	mov	r0, r5
 800a57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a582:	f842 0f04 	str.w	r0, [r2, #4]!
 800a586:	3301      	adds	r3, #1
 800a588:	e7c5      	b.n	800a516 <__lshift+0x4a>
 800a58a:	3904      	subs	r1, #4
 800a58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a590:	459c      	cmp	ip, r3
 800a592:	f841 2f04 	str.w	r2, [r1, #4]!
 800a596:	d8f9      	bhi.n	800a58c <__lshift+0xc0>
 800a598:	e7ea      	b.n	800a570 <__lshift+0xa4>
 800a59a:	bf00      	nop
 800a59c:	0800be28 	.word	0x0800be28
 800a5a0:	0800be39 	.word	0x0800be39

0800a5a4 <__mcmp>:
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	690a      	ldr	r2, [r1, #16]
 800a5a8:	6900      	ldr	r0, [r0, #16]
 800a5aa:	b530      	push	{r4, r5, lr}
 800a5ac:	1a80      	subs	r0, r0, r2
 800a5ae:	d10e      	bne.n	800a5ce <__mcmp+0x2a>
 800a5b0:	3314      	adds	r3, #20
 800a5b2:	3114      	adds	r1, #20
 800a5b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5c4:	4295      	cmp	r5, r2
 800a5c6:	d003      	beq.n	800a5d0 <__mcmp+0x2c>
 800a5c8:	d205      	bcs.n	800a5d6 <__mcmp+0x32>
 800a5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ce:	bd30      	pop	{r4, r5, pc}
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	d3f3      	bcc.n	800a5bc <__mcmp+0x18>
 800a5d4:	e7fb      	b.n	800a5ce <__mcmp+0x2a>
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	e7f9      	b.n	800a5ce <__mcmp+0x2a>
	...

0800a5dc <__mdiff>:
 800a5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	4689      	mov	r9, r1
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	4648      	mov	r0, r9
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	f7ff ffdb 	bl	800a5a4 <__mcmp>
 800a5ee:	1e05      	subs	r5, r0, #0
 800a5f0:	d112      	bne.n	800a618 <__mdiff+0x3c>
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff fd5d 	bl	800a0b4 <_Balloc>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	b928      	cbnz	r0, 800a60a <__mdiff+0x2e>
 800a5fe:	f240 2137 	movw	r1, #567	@ 0x237
 800a602:	4b3e      	ldr	r3, [pc, #248]	@ (800a6fc <__mdiff+0x120>)
 800a604:	483e      	ldr	r0, [pc, #248]	@ (800a700 <__mdiff+0x124>)
 800a606:	f000 fe87 	bl	800b318 <__assert_func>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a610:	4610      	mov	r0, r2
 800a612:	b003      	add	sp, #12
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	bfbc      	itt	lt
 800a61a:	464b      	movlt	r3, r9
 800a61c:	46a1      	movlt	r9, r4
 800a61e:	4630      	mov	r0, r6
 800a620:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a624:	bfba      	itte	lt
 800a626:	461c      	movlt	r4, r3
 800a628:	2501      	movlt	r5, #1
 800a62a:	2500      	movge	r5, #0
 800a62c:	f7ff fd42 	bl	800a0b4 <_Balloc>
 800a630:	4602      	mov	r2, r0
 800a632:	b918      	cbnz	r0, 800a63c <__mdiff+0x60>
 800a634:	f240 2145 	movw	r1, #581	@ 0x245
 800a638:	4b30      	ldr	r3, [pc, #192]	@ (800a6fc <__mdiff+0x120>)
 800a63a:	e7e3      	b.n	800a604 <__mdiff+0x28>
 800a63c:	f100 0b14 	add.w	fp, r0, #20
 800a640:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a644:	f109 0310 	add.w	r3, r9, #16
 800a648:	60c5      	str	r5, [r0, #12]
 800a64a:	f04f 0c00 	mov.w	ip, #0
 800a64e:	f109 0514 	add.w	r5, r9, #20
 800a652:	46d9      	mov	r9, fp
 800a654:	6926      	ldr	r6, [r4, #16]
 800a656:	f104 0e14 	add.w	lr, r4, #20
 800a65a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a65e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	9b01      	ldr	r3, [sp, #4]
 800a666:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a66a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a66e:	b281      	uxth	r1, r0
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	fa1f f38a 	uxth.w	r3, sl
 800a676:	1a5b      	subs	r3, r3, r1
 800a678:	0c00      	lsrs	r0, r0, #16
 800a67a:	4463      	add	r3, ip
 800a67c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a680:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a684:	b29b      	uxth	r3, r3
 800a686:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a68a:	4576      	cmp	r6, lr
 800a68c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a690:	f849 3b04 	str.w	r3, [r9], #4
 800a694:	d8e6      	bhi.n	800a664 <__mdiff+0x88>
 800a696:	1b33      	subs	r3, r6, r4
 800a698:	3b15      	subs	r3, #21
 800a69a:	f023 0303 	bic.w	r3, r3, #3
 800a69e:	3415      	adds	r4, #21
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	42a6      	cmp	r6, r4
 800a6a4:	bf38      	it	cc
 800a6a6:	2304      	movcc	r3, #4
 800a6a8:	441d      	add	r5, r3
 800a6aa:	445b      	add	r3, fp
 800a6ac:	461e      	mov	r6, r3
 800a6ae:	462c      	mov	r4, r5
 800a6b0:	4544      	cmp	r4, r8
 800a6b2:	d30e      	bcc.n	800a6d2 <__mdiff+0xf6>
 800a6b4:	f108 0103 	add.w	r1, r8, #3
 800a6b8:	1b49      	subs	r1, r1, r5
 800a6ba:	f021 0103 	bic.w	r1, r1, #3
 800a6be:	3d03      	subs	r5, #3
 800a6c0:	45a8      	cmp	r8, r5
 800a6c2:	bf38      	it	cc
 800a6c4:	2100      	movcc	r1, #0
 800a6c6:	440b      	add	r3, r1
 800a6c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6cc:	b199      	cbz	r1, 800a6f6 <__mdiff+0x11a>
 800a6ce:	6117      	str	r7, [r2, #16]
 800a6d0:	e79e      	b.n	800a610 <__mdiff+0x34>
 800a6d2:	46e6      	mov	lr, ip
 800a6d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6d8:	fa1f fc81 	uxth.w	ip, r1
 800a6dc:	44f4      	add	ip, lr
 800a6de:	0c08      	lsrs	r0, r1, #16
 800a6e0:	4471      	add	r1, lr
 800a6e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6e6:	b289      	uxth	r1, r1
 800a6e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6f0:	f846 1b04 	str.w	r1, [r6], #4
 800a6f4:	e7dc      	b.n	800a6b0 <__mdiff+0xd4>
 800a6f6:	3f01      	subs	r7, #1
 800a6f8:	e7e6      	b.n	800a6c8 <__mdiff+0xec>
 800a6fa:	bf00      	nop
 800a6fc:	0800be28 	.word	0x0800be28
 800a700:	0800be39 	.word	0x0800be39

0800a704 <__d2b>:
 800a704:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a708:	2101      	movs	r1, #1
 800a70a:	4690      	mov	r8, r2
 800a70c:	4699      	mov	r9, r3
 800a70e:	9e08      	ldr	r6, [sp, #32]
 800a710:	f7ff fcd0 	bl	800a0b4 <_Balloc>
 800a714:	4604      	mov	r4, r0
 800a716:	b930      	cbnz	r0, 800a726 <__d2b+0x22>
 800a718:	4602      	mov	r2, r0
 800a71a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a71e:	4b23      	ldr	r3, [pc, #140]	@ (800a7ac <__d2b+0xa8>)
 800a720:	4823      	ldr	r0, [pc, #140]	@ (800a7b0 <__d2b+0xac>)
 800a722:	f000 fdf9 	bl	800b318 <__assert_func>
 800a726:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a72a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a72e:	b10d      	cbz	r5, 800a734 <__d2b+0x30>
 800a730:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	f1b8 0300 	subs.w	r3, r8, #0
 800a73a:	d024      	beq.n	800a786 <__d2b+0x82>
 800a73c:	4668      	mov	r0, sp
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	f7ff fd7f 	bl	800a242 <__lo0bits>
 800a744:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a748:	b1d8      	cbz	r0, 800a782 <__d2b+0x7e>
 800a74a:	f1c0 0320 	rsb	r3, r0, #32
 800a74e:	fa02 f303 	lsl.w	r3, r2, r3
 800a752:	430b      	orrs	r3, r1
 800a754:	40c2      	lsrs	r2, r0
 800a756:	6163      	str	r3, [r4, #20]
 800a758:	9201      	str	r2, [sp, #4]
 800a75a:	9b01      	ldr	r3, [sp, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bf0c      	ite	eq
 800a760:	2201      	moveq	r2, #1
 800a762:	2202      	movne	r2, #2
 800a764:	61a3      	str	r3, [r4, #24]
 800a766:	6122      	str	r2, [r4, #16]
 800a768:	b1ad      	cbz	r5, 800a796 <__d2b+0x92>
 800a76a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a76e:	4405      	add	r5, r0
 800a770:	6035      	str	r5, [r6, #0]
 800a772:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a778:	6018      	str	r0, [r3, #0]
 800a77a:	4620      	mov	r0, r4
 800a77c:	b002      	add	sp, #8
 800a77e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a782:	6161      	str	r1, [r4, #20]
 800a784:	e7e9      	b.n	800a75a <__d2b+0x56>
 800a786:	a801      	add	r0, sp, #4
 800a788:	f7ff fd5b 	bl	800a242 <__lo0bits>
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	6163      	str	r3, [r4, #20]
 800a792:	3020      	adds	r0, #32
 800a794:	e7e7      	b.n	800a766 <__d2b+0x62>
 800a796:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a79a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a79e:	6030      	str	r0, [r6, #0]
 800a7a0:	6918      	ldr	r0, [r3, #16]
 800a7a2:	f7ff fd2f 	bl	800a204 <__hi0bits>
 800a7a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7aa:	e7e4      	b.n	800a776 <__d2b+0x72>
 800a7ac:	0800be28 	.word	0x0800be28
 800a7b0:	0800be39 	.word	0x0800be39

0800a7b4 <__ssputs_r>:
 800a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b8:	461f      	mov	r7, r3
 800a7ba:	688e      	ldr	r6, [r1, #8]
 800a7bc:	4682      	mov	sl, r0
 800a7be:	42be      	cmp	r6, r7
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	4690      	mov	r8, r2
 800a7c4:	680b      	ldr	r3, [r1, #0]
 800a7c6:	d82d      	bhi.n	800a824 <__ssputs_r+0x70>
 800a7c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7d0:	d026      	beq.n	800a820 <__ssputs_r+0x6c>
 800a7d2:	6965      	ldr	r5, [r4, #20]
 800a7d4:	6909      	ldr	r1, [r1, #16]
 800a7d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7da:	eba3 0901 	sub.w	r9, r3, r1
 800a7de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7e2:	1c7b      	adds	r3, r7, #1
 800a7e4:	444b      	add	r3, r9
 800a7e6:	106d      	asrs	r5, r5, #1
 800a7e8:	429d      	cmp	r5, r3
 800a7ea:	bf38      	it	cc
 800a7ec:	461d      	movcc	r5, r3
 800a7ee:	0553      	lsls	r3, r2, #21
 800a7f0:	d527      	bpl.n	800a842 <__ssputs_r+0x8e>
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	f7ff fbd2 	bl	8009f9c <_malloc_r>
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	b360      	cbz	r0, 800a856 <__ssputs_r+0xa2>
 800a7fc:	464a      	mov	r2, r9
 800a7fe:	6921      	ldr	r1, [r4, #16]
 800a800:	f7fe fcfb 	bl	80091fa <memcpy>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a80a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	6126      	str	r6, [r4, #16]
 800a812:	444e      	add	r6, r9
 800a814:	6026      	str	r6, [r4, #0]
 800a816:	463e      	mov	r6, r7
 800a818:	6165      	str	r5, [r4, #20]
 800a81a:	eba5 0509 	sub.w	r5, r5, r9
 800a81e:	60a5      	str	r5, [r4, #8]
 800a820:	42be      	cmp	r6, r7
 800a822:	d900      	bls.n	800a826 <__ssputs_r+0x72>
 800a824:	463e      	mov	r6, r7
 800a826:	4632      	mov	r2, r6
 800a828:	4641      	mov	r1, r8
 800a82a:	6820      	ldr	r0, [r4, #0]
 800a82c:	f000 fd49 	bl	800b2c2 <memmove>
 800a830:	2000      	movs	r0, #0
 800a832:	68a3      	ldr	r3, [r4, #8]
 800a834:	1b9b      	subs	r3, r3, r6
 800a836:	60a3      	str	r3, [r4, #8]
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	4433      	add	r3, r6
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a842:	462a      	mov	r2, r5
 800a844:	f000 fdac 	bl	800b3a0 <_realloc_r>
 800a848:	4606      	mov	r6, r0
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d1e0      	bne.n	800a810 <__ssputs_r+0x5c>
 800a84e:	4650      	mov	r0, sl
 800a850:	6921      	ldr	r1, [r4, #16]
 800a852:	f7ff fb31 	bl	8009eb8 <_free_r>
 800a856:	230c      	movs	r3, #12
 800a858:	f8ca 3000 	str.w	r3, [sl]
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	f04f 30ff 	mov.w	r0, #4294967295
 800a862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a866:	81a3      	strh	r3, [r4, #12]
 800a868:	e7e9      	b.n	800a83e <__ssputs_r+0x8a>
	...

0800a86c <_svfiprintf_r>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	4698      	mov	r8, r3
 800a872:	898b      	ldrh	r3, [r1, #12]
 800a874:	4607      	mov	r7, r0
 800a876:	061b      	lsls	r3, r3, #24
 800a878:	460d      	mov	r5, r1
 800a87a:	4614      	mov	r4, r2
 800a87c:	b09d      	sub	sp, #116	@ 0x74
 800a87e:	d510      	bpl.n	800a8a2 <_svfiprintf_r+0x36>
 800a880:	690b      	ldr	r3, [r1, #16]
 800a882:	b973      	cbnz	r3, 800a8a2 <_svfiprintf_r+0x36>
 800a884:	2140      	movs	r1, #64	@ 0x40
 800a886:	f7ff fb89 	bl	8009f9c <_malloc_r>
 800a88a:	6028      	str	r0, [r5, #0]
 800a88c:	6128      	str	r0, [r5, #16]
 800a88e:	b930      	cbnz	r0, 800a89e <_svfiprintf_r+0x32>
 800a890:	230c      	movs	r3, #12
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	f04f 30ff 	mov.w	r0, #4294967295
 800a898:	b01d      	add	sp, #116	@ 0x74
 800a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89e:	2340      	movs	r3, #64	@ 0x40
 800a8a0:	616b      	str	r3, [r5, #20]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8a6:	2320      	movs	r3, #32
 800a8a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8ac:	2330      	movs	r3, #48	@ 0x30
 800a8ae:	f04f 0901 	mov.w	r9, #1
 800a8b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8b6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800aa50 <_svfiprintf_r+0x1e4>
 800a8ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8be:	4623      	mov	r3, r4
 800a8c0:	469a      	mov	sl, r3
 800a8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c6:	b10a      	cbz	r2, 800a8cc <_svfiprintf_r+0x60>
 800a8c8:	2a25      	cmp	r2, #37	@ 0x25
 800a8ca:	d1f9      	bne.n	800a8c0 <_svfiprintf_r+0x54>
 800a8cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a8d0:	d00b      	beq.n	800a8ea <_svfiprintf_r+0x7e>
 800a8d2:	465b      	mov	r3, fp
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f7ff ff6b 	bl	800a7b4 <__ssputs_r>
 800a8de:	3001      	adds	r0, #1
 800a8e0:	f000 80a7 	beq.w	800aa32 <_svfiprintf_r+0x1c6>
 800a8e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8e6:	445a      	add	r2, fp
 800a8e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 809f 	beq.w	800aa32 <_svfiprintf_r+0x1c6>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8fe:	f10a 0a01 	add.w	sl, sl, #1
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	9307      	str	r3, [sp, #28]
 800a906:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a90a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a90c:	4654      	mov	r4, sl
 800a90e:	2205      	movs	r2, #5
 800a910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a914:	484e      	ldr	r0, [pc, #312]	@ (800aa50 <_svfiprintf_r+0x1e4>)
 800a916:	f7fe fc62 	bl	80091de <memchr>
 800a91a:	9a04      	ldr	r2, [sp, #16]
 800a91c:	b9d8      	cbnz	r0, 800a956 <_svfiprintf_r+0xea>
 800a91e:	06d0      	lsls	r0, r2, #27
 800a920:	bf44      	itt	mi
 800a922:	2320      	movmi	r3, #32
 800a924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a928:	0711      	lsls	r1, r2, #28
 800a92a:	bf44      	itt	mi
 800a92c:	232b      	movmi	r3, #43	@ 0x2b
 800a92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a932:	f89a 3000 	ldrb.w	r3, [sl]
 800a936:	2b2a      	cmp	r3, #42	@ 0x2a
 800a938:	d015      	beq.n	800a966 <_svfiprintf_r+0xfa>
 800a93a:	4654      	mov	r4, sl
 800a93c:	2000      	movs	r0, #0
 800a93e:	f04f 0c0a 	mov.w	ip, #10
 800a942:	9a07      	ldr	r2, [sp, #28]
 800a944:	4621      	mov	r1, r4
 800a946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a94a:	3b30      	subs	r3, #48	@ 0x30
 800a94c:	2b09      	cmp	r3, #9
 800a94e:	d94b      	bls.n	800a9e8 <_svfiprintf_r+0x17c>
 800a950:	b1b0      	cbz	r0, 800a980 <_svfiprintf_r+0x114>
 800a952:	9207      	str	r2, [sp, #28]
 800a954:	e014      	b.n	800a980 <_svfiprintf_r+0x114>
 800a956:	eba0 0308 	sub.w	r3, r0, r8
 800a95a:	fa09 f303 	lsl.w	r3, r9, r3
 800a95e:	4313      	orrs	r3, r2
 800a960:	46a2      	mov	sl, r4
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	e7d2      	b.n	800a90c <_svfiprintf_r+0xa0>
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	1d19      	adds	r1, r3, #4
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	9103      	str	r1, [sp, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bfbb      	ittet	lt
 800a972:	425b      	neglt	r3, r3
 800a974:	f042 0202 	orrlt.w	r2, r2, #2
 800a978:	9307      	strge	r3, [sp, #28]
 800a97a:	9307      	strlt	r3, [sp, #28]
 800a97c:	bfb8      	it	lt
 800a97e:	9204      	strlt	r2, [sp, #16]
 800a980:	7823      	ldrb	r3, [r4, #0]
 800a982:	2b2e      	cmp	r3, #46	@ 0x2e
 800a984:	d10a      	bne.n	800a99c <_svfiprintf_r+0x130>
 800a986:	7863      	ldrb	r3, [r4, #1]
 800a988:	2b2a      	cmp	r3, #42	@ 0x2a
 800a98a:	d132      	bne.n	800a9f2 <_svfiprintf_r+0x186>
 800a98c:	9b03      	ldr	r3, [sp, #12]
 800a98e:	3402      	adds	r4, #2
 800a990:	1d1a      	adds	r2, r3, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	9203      	str	r2, [sp, #12]
 800a996:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a99a:	9305      	str	r3, [sp, #20]
 800a99c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800aa54 <_svfiprintf_r+0x1e8>
 800a9a0:	2203      	movs	r2, #3
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	7821      	ldrb	r1, [r4, #0]
 800a9a6:	f7fe fc1a 	bl	80091de <memchr>
 800a9aa:	b138      	cbz	r0, 800a9bc <_svfiprintf_r+0x150>
 800a9ac:	2240      	movs	r2, #64	@ 0x40
 800a9ae:	9b04      	ldr	r3, [sp, #16]
 800a9b0:	eba0 000a 	sub.w	r0, r0, sl
 800a9b4:	4082      	lsls	r2, r0
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	3401      	adds	r4, #1
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c0:	2206      	movs	r2, #6
 800a9c2:	4825      	ldr	r0, [pc, #148]	@ (800aa58 <_svfiprintf_r+0x1ec>)
 800a9c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9c8:	f7fe fc09 	bl	80091de <memchr>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d036      	beq.n	800aa3e <_svfiprintf_r+0x1d2>
 800a9d0:	4b22      	ldr	r3, [pc, #136]	@ (800aa5c <_svfiprintf_r+0x1f0>)
 800a9d2:	bb1b      	cbnz	r3, 800aa1c <_svfiprintf_r+0x1b0>
 800a9d4:	9b03      	ldr	r3, [sp, #12]
 800a9d6:	3307      	adds	r3, #7
 800a9d8:	f023 0307 	bic.w	r3, r3, #7
 800a9dc:	3308      	adds	r3, #8
 800a9de:	9303      	str	r3, [sp, #12]
 800a9e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e2:	4433      	add	r3, r6
 800a9e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e6:	e76a      	b.n	800a8be <_svfiprintf_r+0x52>
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9f0:	e7a8      	b.n	800a944 <_svfiprintf_r+0xd8>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f04f 0c0a 	mov.w	ip, #10
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	3401      	adds	r4, #1
 800a9fc:	9305      	str	r3, [sp, #20]
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa04:	3a30      	subs	r2, #48	@ 0x30
 800aa06:	2a09      	cmp	r2, #9
 800aa08:	d903      	bls.n	800aa12 <_svfiprintf_r+0x1a6>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0c6      	beq.n	800a99c <_svfiprintf_r+0x130>
 800aa0e:	9105      	str	r1, [sp, #20]
 800aa10:	e7c4      	b.n	800a99c <_svfiprintf_r+0x130>
 800aa12:	4604      	mov	r4, r0
 800aa14:	2301      	movs	r3, #1
 800aa16:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa1a:	e7f0      	b.n	800a9fe <_svfiprintf_r+0x192>
 800aa1c:	ab03      	add	r3, sp, #12
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	462a      	mov	r2, r5
 800aa22:	4638      	mov	r0, r7
 800aa24:	4b0e      	ldr	r3, [pc, #56]	@ (800aa60 <_svfiprintf_r+0x1f4>)
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	f7fd fdf4 	bl	8008614 <_printf_float>
 800aa2c:	1c42      	adds	r2, r0, #1
 800aa2e:	4606      	mov	r6, r0
 800aa30:	d1d6      	bne.n	800a9e0 <_svfiprintf_r+0x174>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	065b      	lsls	r3, r3, #25
 800aa36:	f53f af2d 	bmi.w	800a894 <_svfiprintf_r+0x28>
 800aa3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa3c:	e72c      	b.n	800a898 <_svfiprintf_r+0x2c>
 800aa3e:	ab03      	add	r3, sp, #12
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	462a      	mov	r2, r5
 800aa44:	4638      	mov	r0, r7
 800aa46:	4b06      	ldr	r3, [pc, #24]	@ (800aa60 <_svfiprintf_r+0x1f4>)
 800aa48:	a904      	add	r1, sp, #16
 800aa4a:	f7fe f881 	bl	8008b50 <_printf_i>
 800aa4e:	e7ed      	b.n	800aa2c <_svfiprintf_r+0x1c0>
 800aa50:	0800bf90 	.word	0x0800bf90
 800aa54:	0800bf96 	.word	0x0800bf96
 800aa58:	0800bf9a 	.word	0x0800bf9a
 800aa5c:	08008615 	.word	0x08008615
 800aa60:	0800a7b5 	.word	0x0800a7b5

0800aa64 <_sungetc_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	1c4b      	adds	r3, r1, #1
 800aa68:	4614      	mov	r4, r2
 800aa6a:	d103      	bne.n	800aa74 <_sungetc_r+0x10>
 800aa6c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa70:	4628      	mov	r0, r5
 800aa72:	bd38      	pop	{r3, r4, r5, pc}
 800aa74:	8993      	ldrh	r3, [r2, #12]
 800aa76:	b2cd      	uxtb	r5, r1
 800aa78:	f023 0320 	bic.w	r3, r3, #32
 800aa7c:	8193      	strh	r3, [r2, #12]
 800aa7e:	6853      	ldr	r3, [r2, #4]
 800aa80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800aa82:	b18a      	cbz	r2, 800aaa8 <_sungetc_r+0x44>
 800aa84:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800aa86:	429a      	cmp	r2, r3
 800aa88:	dd08      	ble.n	800aa9c <_sungetc_r+0x38>
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	1e5a      	subs	r2, r3, #1
 800aa8e:	6022      	str	r2, [r4, #0]
 800aa90:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aa94:	6863      	ldr	r3, [r4, #4]
 800aa96:	3301      	adds	r3, #1
 800aa98:	6063      	str	r3, [r4, #4]
 800aa9a:	e7e9      	b.n	800aa70 <_sungetc_r+0xc>
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	f000 fbd8 	bl	800b252 <__submore>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d0f1      	beq.n	800aa8a <_sungetc_r+0x26>
 800aaa6:	e7e1      	b.n	800aa6c <_sungetc_r+0x8>
 800aaa8:	6921      	ldr	r1, [r4, #16]
 800aaaa:	6822      	ldr	r2, [r4, #0]
 800aaac:	b141      	cbz	r1, 800aac0 <_sungetc_r+0x5c>
 800aaae:	4291      	cmp	r1, r2
 800aab0:	d206      	bcs.n	800aac0 <_sungetc_r+0x5c>
 800aab2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800aab6:	42a9      	cmp	r1, r5
 800aab8:	d102      	bne.n	800aac0 <_sungetc_r+0x5c>
 800aaba:	3a01      	subs	r2, #1
 800aabc:	6022      	str	r2, [r4, #0]
 800aabe:	e7ea      	b.n	800aa96 <_sungetc_r+0x32>
 800aac0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800aac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aac8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaca:	2303      	movs	r3, #3
 800aacc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aace:	4623      	mov	r3, r4
 800aad0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	2301      	movs	r3, #1
 800aad8:	e7de      	b.n	800aa98 <_sungetc_r+0x34>

0800aada <__ssrefill_r>:
 800aada:	b510      	push	{r4, lr}
 800aadc:	460c      	mov	r4, r1
 800aade:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800aae0:	b169      	cbz	r1, 800aafe <__ssrefill_r+0x24>
 800aae2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aae6:	4299      	cmp	r1, r3
 800aae8:	d001      	beq.n	800aaee <__ssrefill_r+0x14>
 800aaea:	f7ff f9e5 	bl	8009eb8 <_free_r>
 800aaee:	2000      	movs	r0, #0
 800aaf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aaf2:	6360      	str	r0, [r4, #52]	@ 0x34
 800aaf4:	6063      	str	r3, [r4, #4]
 800aaf6:	b113      	cbz	r3, 800aafe <__ssrefill_r+0x24>
 800aaf8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800aafa:	6023      	str	r3, [r4, #0]
 800aafc:	bd10      	pop	{r4, pc}
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	f04f 30ff 	mov.w	r0, #4294967295
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	2300      	movs	r3, #0
 800ab08:	6063      	str	r3, [r4, #4]
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	f043 0320 	orr.w	r3, r3, #32
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	e7f3      	b.n	800aafc <__ssrefill_r+0x22>

0800ab14 <__ssvfiscanf_r>:
 800ab14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	460c      	mov	r4, r1
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ab22:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ab26:	49aa      	ldr	r1, [pc, #680]	@ (800add0 <__ssvfiscanf_r+0x2bc>)
 800ab28:	f10d 0804 	add.w	r8, sp, #4
 800ab2c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ab2e:	49a9      	ldr	r1, [pc, #676]	@ (800add4 <__ssvfiscanf_r+0x2c0>)
 800ab30:	4fa9      	ldr	r7, [pc, #676]	@ (800add8 <__ssvfiscanf_r+0x2c4>)
 800ab32:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ab36:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	7813      	ldrb	r3, [r2, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8159 	beq.w	800adf4 <__ssvfiscanf_r+0x2e0>
 800ab42:	5cf9      	ldrb	r1, [r7, r3]
 800ab44:	1c55      	adds	r5, r2, #1
 800ab46:	f011 0108 	ands.w	r1, r1, #8
 800ab4a:	d019      	beq.n	800ab80 <__ssvfiscanf_r+0x6c>
 800ab4c:	6863      	ldr	r3, [r4, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	dd0f      	ble.n	800ab72 <__ssvfiscanf_r+0x5e>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	781a      	ldrb	r2, [r3, #0]
 800ab56:	5cba      	ldrb	r2, [r7, r2]
 800ab58:	0712      	lsls	r2, r2, #28
 800ab5a:	d401      	bmi.n	800ab60 <__ssvfiscanf_r+0x4c>
 800ab5c:	462a      	mov	r2, r5
 800ab5e:	e7ec      	b.n	800ab3a <__ssvfiscanf_r+0x26>
 800ab60:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ab62:	3301      	adds	r3, #1
 800ab64:	3201      	adds	r2, #1
 800ab66:	9245      	str	r2, [sp, #276]	@ 0x114
 800ab68:	6862      	ldr	r2, [r4, #4]
 800ab6a:	6023      	str	r3, [r4, #0]
 800ab6c:	3a01      	subs	r2, #1
 800ab6e:	6062      	str	r2, [r4, #4]
 800ab70:	e7ec      	b.n	800ab4c <__ssvfiscanf_r+0x38>
 800ab72:	4621      	mov	r1, r4
 800ab74:	4630      	mov	r0, r6
 800ab76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ab78:	4798      	blx	r3
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d0e9      	beq.n	800ab52 <__ssvfiscanf_r+0x3e>
 800ab7e:	e7ed      	b.n	800ab5c <__ssvfiscanf_r+0x48>
 800ab80:	2b25      	cmp	r3, #37	@ 0x25
 800ab82:	d012      	beq.n	800abaa <__ssvfiscanf_r+0x96>
 800ab84:	4699      	mov	r9, r3
 800ab86:	6863      	ldr	r3, [r4, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f340 8094 	ble.w	800acb6 <__ssvfiscanf_r+0x1a2>
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	7813      	ldrb	r3, [r2, #0]
 800ab92:	454b      	cmp	r3, r9
 800ab94:	f040 812e 	bne.w	800adf4 <__ssvfiscanf_r+0x2e0>
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	3201      	adds	r2, #1
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	6063      	str	r3, [r4, #4]
 800aba0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800aba2:	6022      	str	r2, [r4, #0]
 800aba4:	3301      	adds	r3, #1
 800aba6:	9345      	str	r3, [sp, #276]	@ 0x114
 800aba8:	e7d8      	b.n	800ab5c <__ssvfiscanf_r+0x48>
 800abaa:	9141      	str	r1, [sp, #260]	@ 0x104
 800abac:	9143      	str	r1, [sp, #268]	@ 0x10c
 800abae:	7853      	ldrb	r3, [r2, #1]
 800abb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800abb2:	bf04      	itt	eq
 800abb4:	2310      	moveq	r3, #16
 800abb6:	1c95      	addeq	r5, r2, #2
 800abb8:	f04f 020a 	mov.w	r2, #10
 800abbc:	bf08      	it	eq
 800abbe:	9341      	streq	r3, [sp, #260]	@ 0x104
 800abc0:	46a9      	mov	r9, r5
 800abc2:	f819 1b01 	ldrb.w	r1, [r9], #1
 800abc6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800abca:	2b09      	cmp	r3, #9
 800abcc:	d91e      	bls.n	800ac0c <__ssvfiscanf_r+0xf8>
 800abce:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800addc <__ssvfiscanf_r+0x2c8>
 800abd2:	2203      	movs	r2, #3
 800abd4:	4650      	mov	r0, sl
 800abd6:	f7fe fb02 	bl	80091de <memchr>
 800abda:	b138      	cbz	r0, 800abec <__ssvfiscanf_r+0xd8>
 800abdc:	2301      	movs	r3, #1
 800abde:	464d      	mov	r5, r9
 800abe0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800abe2:	eba0 000a 	sub.w	r0, r0, sl
 800abe6:	4083      	lsls	r3, r0
 800abe8:	4313      	orrs	r3, r2
 800abea:	9341      	str	r3, [sp, #260]	@ 0x104
 800abec:	f815 3b01 	ldrb.w	r3, [r5], #1
 800abf0:	2b78      	cmp	r3, #120	@ 0x78
 800abf2:	d806      	bhi.n	800ac02 <__ssvfiscanf_r+0xee>
 800abf4:	2b57      	cmp	r3, #87	@ 0x57
 800abf6:	d810      	bhi.n	800ac1a <__ssvfiscanf_r+0x106>
 800abf8:	2b25      	cmp	r3, #37	@ 0x25
 800abfa:	d0c3      	beq.n	800ab84 <__ssvfiscanf_r+0x70>
 800abfc:	d856      	bhi.n	800acac <__ssvfiscanf_r+0x198>
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d064      	beq.n	800accc <__ssvfiscanf_r+0x1b8>
 800ac02:	2303      	movs	r3, #3
 800ac04:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ac06:	230a      	movs	r3, #10
 800ac08:	9342      	str	r3, [sp, #264]	@ 0x108
 800ac0a:	e077      	b.n	800acfc <__ssvfiscanf_r+0x1e8>
 800ac0c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ac0e:	464d      	mov	r5, r9
 800ac10:	fb02 1103 	mla	r1, r2, r3, r1
 800ac14:	3930      	subs	r1, #48	@ 0x30
 800ac16:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ac18:	e7d2      	b.n	800abc0 <__ssvfiscanf_r+0xac>
 800ac1a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ac1e:	2a20      	cmp	r2, #32
 800ac20:	d8ef      	bhi.n	800ac02 <__ssvfiscanf_r+0xee>
 800ac22:	a101      	add	r1, pc, #4	@ (adr r1, 800ac28 <__ssvfiscanf_r+0x114>)
 800ac24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac28:	0800acdb 	.word	0x0800acdb
 800ac2c:	0800ac03 	.word	0x0800ac03
 800ac30:	0800ac03 	.word	0x0800ac03
 800ac34:	0800ad35 	.word	0x0800ad35
 800ac38:	0800ac03 	.word	0x0800ac03
 800ac3c:	0800ac03 	.word	0x0800ac03
 800ac40:	0800ac03 	.word	0x0800ac03
 800ac44:	0800ac03 	.word	0x0800ac03
 800ac48:	0800ac03 	.word	0x0800ac03
 800ac4c:	0800ac03 	.word	0x0800ac03
 800ac50:	0800ac03 	.word	0x0800ac03
 800ac54:	0800ad4b 	.word	0x0800ad4b
 800ac58:	0800ad31 	.word	0x0800ad31
 800ac5c:	0800acb3 	.word	0x0800acb3
 800ac60:	0800acb3 	.word	0x0800acb3
 800ac64:	0800acb3 	.word	0x0800acb3
 800ac68:	0800ac03 	.word	0x0800ac03
 800ac6c:	0800aced 	.word	0x0800aced
 800ac70:	0800ac03 	.word	0x0800ac03
 800ac74:	0800ac03 	.word	0x0800ac03
 800ac78:	0800ac03 	.word	0x0800ac03
 800ac7c:	0800ac03 	.word	0x0800ac03
 800ac80:	0800ad5b 	.word	0x0800ad5b
 800ac84:	0800acf5 	.word	0x0800acf5
 800ac88:	0800acd3 	.word	0x0800acd3
 800ac8c:	0800ac03 	.word	0x0800ac03
 800ac90:	0800ac03 	.word	0x0800ac03
 800ac94:	0800ad57 	.word	0x0800ad57
 800ac98:	0800ac03 	.word	0x0800ac03
 800ac9c:	0800ad31 	.word	0x0800ad31
 800aca0:	0800ac03 	.word	0x0800ac03
 800aca4:	0800ac03 	.word	0x0800ac03
 800aca8:	0800acdb 	.word	0x0800acdb
 800acac:	3b45      	subs	r3, #69	@ 0x45
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d8a7      	bhi.n	800ac02 <__ssvfiscanf_r+0xee>
 800acb2:	2305      	movs	r3, #5
 800acb4:	e021      	b.n	800acfa <__ssvfiscanf_r+0x1e6>
 800acb6:	4621      	mov	r1, r4
 800acb8:	4630      	mov	r0, r6
 800acba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800acbc:	4798      	blx	r3
 800acbe:	2800      	cmp	r0, #0
 800acc0:	f43f af65 	beq.w	800ab8e <__ssvfiscanf_r+0x7a>
 800acc4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800acc6:	2800      	cmp	r0, #0
 800acc8:	f040 808c 	bne.w	800ade4 <__ssvfiscanf_r+0x2d0>
 800accc:	f04f 30ff 	mov.w	r0, #4294967295
 800acd0:	e08c      	b.n	800adec <__ssvfiscanf_r+0x2d8>
 800acd2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800acd4:	f042 0220 	orr.w	r2, r2, #32
 800acd8:	9241      	str	r2, [sp, #260]	@ 0x104
 800acda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800acdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ace0:	9241      	str	r2, [sp, #260]	@ 0x104
 800ace2:	2210      	movs	r2, #16
 800ace4:	2b6e      	cmp	r3, #110	@ 0x6e
 800ace6:	9242      	str	r2, [sp, #264]	@ 0x108
 800ace8:	d902      	bls.n	800acf0 <__ssvfiscanf_r+0x1dc>
 800acea:	e005      	b.n	800acf8 <__ssvfiscanf_r+0x1e4>
 800acec:	2300      	movs	r3, #0
 800acee:	9342      	str	r3, [sp, #264]	@ 0x108
 800acf0:	2303      	movs	r3, #3
 800acf2:	e002      	b.n	800acfa <__ssvfiscanf_r+0x1e6>
 800acf4:	2308      	movs	r3, #8
 800acf6:	9342      	str	r3, [sp, #264]	@ 0x108
 800acf8:	2304      	movs	r3, #4
 800acfa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800acfc:	6863      	ldr	r3, [r4, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	dd39      	ble.n	800ad76 <__ssvfiscanf_r+0x262>
 800ad02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ad04:	0659      	lsls	r1, r3, #25
 800ad06:	d404      	bmi.n	800ad12 <__ssvfiscanf_r+0x1fe>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	781a      	ldrb	r2, [r3, #0]
 800ad0c:	5cba      	ldrb	r2, [r7, r2]
 800ad0e:	0712      	lsls	r2, r2, #28
 800ad10:	d438      	bmi.n	800ad84 <__ssvfiscanf_r+0x270>
 800ad12:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	dc47      	bgt.n	800ada8 <__ssvfiscanf_r+0x294>
 800ad18:	466b      	mov	r3, sp
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	a941      	add	r1, sp, #260	@ 0x104
 800ad20:	f000 f86a 	bl	800adf8 <_scanf_chars>
 800ad24:	2801      	cmp	r0, #1
 800ad26:	d065      	beq.n	800adf4 <__ssvfiscanf_r+0x2e0>
 800ad28:	2802      	cmp	r0, #2
 800ad2a:	f47f af17 	bne.w	800ab5c <__ssvfiscanf_r+0x48>
 800ad2e:	e7c9      	b.n	800acc4 <__ssvfiscanf_r+0x1b0>
 800ad30:	220a      	movs	r2, #10
 800ad32:	e7d7      	b.n	800ace4 <__ssvfiscanf_r+0x1d0>
 800ad34:	4629      	mov	r1, r5
 800ad36:	4640      	mov	r0, r8
 800ad38:	f000 fa52 	bl	800b1e0 <__sccl>
 800ad3c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ad3e:	4605      	mov	r5, r0
 800ad40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad44:	9341      	str	r3, [sp, #260]	@ 0x104
 800ad46:	2301      	movs	r3, #1
 800ad48:	e7d7      	b.n	800acfa <__ssvfiscanf_r+0x1e6>
 800ad4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ad4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad50:	9341      	str	r3, [sp, #260]	@ 0x104
 800ad52:	2300      	movs	r3, #0
 800ad54:	e7d1      	b.n	800acfa <__ssvfiscanf_r+0x1e6>
 800ad56:	2302      	movs	r3, #2
 800ad58:	e7cf      	b.n	800acfa <__ssvfiscanf_r+0x1e6>
 800ad5a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ad5c:	06c3      	lsls	r3, r0, #27
 800ad5e:	f53f aefd 	bmi.w	800ab5c <__ssvfiscanf_r+0x48>
 800ad62:	9b00      	ldr	r3, [sp, #0]
 800ad64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ad66:	1d19      	adds	r1, r3, #4
 800ad68:	9100      	str	r1, [sp, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	07c0      	lsls	r0, r0, #31
 800ad6e:	bf4c      	ite	mi
 800ad70:	801a      	strhmi	r2, [r3, #0]
 800ad72:	601a      	strpl	r2, [r3, #0]
 800ad74:	e6f2      	b.n	800ab5c <__ssvfiscanf_r+0x48>
 800ad76:	4621      	mov	r1, r4
 800ad78:	4630      	mov	r0, r6
 800ad7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ad7c:	4798      	blx	r3
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d0bf      	beq.n	800ad02 <__ssvfiscanf_r+0x1ee>
 800ad82:	e79f      	b.n	800acc4 <__ssvfiscanf_r+0x1b0>
 800ad84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ad86:	3201      	adds	r2, #1
 800ad88:	9245      	str	r2, [sp, #276]	@ 0x114
 800ad8a:	6862      	ldr	r2, [r4, #4]
 800ad8c:	3a01      	subs	r2, #1
 800ad8e:	2a00      	cmp	r2, #0
 800ad90:	6062      	str	r2, [r4, #4]
 800ad92:	dd02      	ble.n	800ad9a <__ssvfiscanf_r+0x286>
 800ad94:	3301      	adds	r3, #1
 800ad96:	6023      	str	r3, [r4, #0]
 800ad98:	e7b6      	b.n	800ad08 <__ssvfiscanf_r+0x1f4>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ada0:	4798      	blx	r3
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d0b0      	beq.n	800ad08 <__ssvfiscanf_r+0x1f4>
 800ada6:	e78d      	b.n	800acc4 <__ssvfiscanf_r+0x1b0>
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	dc06      	bgt.n	800adba <__ssvfiscanf_r+0x2a6>
 800adac:	466b      	mov	r3, sp
 800adae:	4622      	mov	r2, r4
 800adb0:	4630      	mov	r0, r6
 800adb2:	a941      	add	r1, sp, #260	@ 0x104
 800adb4:	f000 f87a 	bl	800aeac <_scanf_i>
 800adb8:	e7b4      	b.n	800ad24 <__ssvfiscanf_r+0x210>
 800adba:	4b09      	ldr	r3, [pc, #36]	@ (800ade0 <__ssvfiscanf_r+0x2cc>)
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f43f aecd 	beq.w	800ab5c <__ssvfiscanf_r+0x48>
 800adc2:	466b      	mov	r3, sp
 800adc4:	4622      	mov	r2, r4
 800adc6:	4630      	mov	r0, r6
 800adc8:	a941      	add	r1, sp, #260	@ 0x104
 800adca:	f3af 8000 	nop.w
 800adce:	e7a9      	b.n	800ad24 <__ssvfiscanf_r+0x210>
 800add0:	0800aa65 	.word	0x0800aa65
 800add4:	0800aadb 	.word	0x0800aadb
 800add8:	0800c003 	.word	0x0800c003
 800addc:	0800bf96 	.word	0x0800bf96
 800ade0:	00000000 	.word	0x00000000
 800ade4:	89a3      	ldrh	r3, [r4, #12]
 800ade6:	065b      	lsls	r3, r3, #25
 800ade8:	f53f af70 	bmi.w	800accc <__ssvfiscanf_r+0x1b8>
 800adec:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800adf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800adf6:	e7f9      	b.n	800adec <__ssvfiscanf_r+0x2d8>

0800adf8 <_scanf_chars>:
 800adf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adfc:	4615      	mov	r5, r2
 800adfe:	688a      	ldr	r2, [r1, #8]
 800ae00:	4680      	mov	r8, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	b932      	cbnz	r2, 800ae14 <_scanf_chars+0x1c>
 800ae06:	698a      	ldr	r2, [r1, #24]
 800ae08:	2a00      	cmp	r2, #0
 800ae0a:	bf14      	ite	ne
 800ae0c:	f04f 32ff 	movne.w	r2, #4294967295
 800ae10:	2201      	moveq	r2, #1
 800ae12:	608a      	str	r2, [r1, #8]
 800ae14:	2700      	movs	r7, #0
 800ae16:	6822      	ldr	r2, [r4, #0]
 800ae18:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800aea8 <_scanf_chars+0xb0>
 800ae1c:	06d1      	lsls	r1, r2, #27
 800ae1e:	bf5f      	itttt	pl
 800ae20:	681a      	ldrpl	r2, [r3, #0]
 800ae22:	1d11      	addpl	r1, r2, #4
 800ae24:	6019      	strpl	r1, [r3, #0]
 800ae26:	6816      	ldrpl	r6, [r2, #0]
 800ae28:	69a0      	ldr	r0, [r4, #24]
 800ae2a:	b188      	cbz	r0, 800ae50 <_scanf_chars+0x58>
 800ae2c:	2801      	cmp	r0, #1
 800ae2e:	d107      	bne.n	800ae40 <_scanf_chars+0x48>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	781a      	ldrb	r2, [r3, #0]
 800ae34:	6963      	ldr	r3, [r4, #20]
 800ae36:	5c9b      	ldrb	r3, [r3, r2]
 800ae38:	b953      	cbnz	r3, 800ae50 <_scanf_chars+0x58>
 800ae3a:	2f00      	cmp	r7, #0
 800ae3c:	d031      	beq.n	800aea2 <_scanf_chars+0xaa>
 800ae3e:	e022      	b.n	800ae86 <_scanf_chars+0x8e>
 800ae40:	2802      	cmp	r0, #2
 800ae42:	d120      	bne.n	800ae86 <_scanf_chars+0x8e>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ae4c:	071b      	lsls	r3, r3, #28
 800ae4e:	d41a      	bmi.n	800ae86 <_scanf_chars+0x8e>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	3701      	adds	r7, #1
 800ae54:	06da      	lsls	r2, r3, #27
 800ae56:	bf5e      	ittt	pl
 800ae58:	682b      	ldrpl	r3, [r5, #0]
 800ae5a:	781b      	ldrbpl	r3, [r3, #0]
 800ae5c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ae60:	682a      	ldr	r2, [r5, #0]
 800ae62:	686b      	ldr	r3, [r5, #4]
 800ae64:	3201      	adds	r2, #1
 800ae66:	602a      	str	r2, [r5, #0]
 800ae68:	68a2      	ldr	r2, [r4, #8]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	3a01      	subs	r2, #1
 800ae6e:	606b      	str	r3, [r5, #4]
 800ae70:	60a2      	str	r2, [r4, #8]
 800ae72:	b142      	cbz	r2, 800ae86 <_scanf_chars+0x8e>
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	dcd7      	bgt.n	800ae28 <_scanf_chars+0x30>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ae80:	4798      	blx	r3
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d0d0      	beq.n	800ae28 <_scanf_chars+0x30>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	f013 0310 	ands.w	r3, r3, #16
 800ae8c:	d105      	bne.n	800ae9a <_scanf_chars+0xa2>
 800ae8e:	68e2      	ldr	r2, [r4, #12]
 800ae90:	3201      	adds	r2, #1
 800ae92:	60e2      	str	r2, [r4, #12]
 800ae94:	69a2      	ldr	r2, [r4, #24]
 800ae96:	b102      	cbz	r2, 800ae9a <_scanf_chars+0xa2>
 800ae98:	7033      	strb	r3, [r6, #0]
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	6923      	ldr	r3, [r4, #16]
 800ae9e:	443b      	add	r3, r7
 800aea0:	6123      	str	r3, [r4, #16]
 800aea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea6:	bf00      	nop
 800aea8:	0800c003 	.word	0x0800c003

0800aeac <_scanf_i>:
 800aeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb0:	460c      	mov	r4, r1
 800aeb2:	4698      	mov	r8, r3
 800aeb4:	4b72      	ldr	r3, [pc, #456]	@ (800b080 <_scanf_i+0x1d4>)
 800aeb6:	b087      	sub	sp, #28
 800aeb8:	4682      	mov	sl, r0
 800aeba:	4616      	mov	r6, r2
 800aebc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aec0:	ab03      	add	r3, sp, #12
 800aec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aec6:	4b6f      	ldr	r3, [pc, #444]	@ (800b084 <_scanf_i+0x1d8>)
 800aec8:	69a1      	ldr	r1, [r4, #24]
 800aeca:	4a6f      	ldr	r2, [pc, #444]	@ (800b088 <_scanf_i+0x1dc>)
 800aecc:	4627      	mov	r7, r4
 800aece:	2903      	cmp	r1, #3
 800aed0:	bf08      	it	eq
 800aed2:	461a      	moveq	r2, r3
 800aed4:	68a3      	ldr	r3, [r4, #8]
 800aed6:	9201      	str	r2, [sp, #4]
 800aed8:	1e5a      	subs	r2, r3, #1
 800aeda:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aede:	bf81      	itttt	hi
 800aee0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aee4:	eb03 0905 	addhi.w	r9, r3, r5
 800aee8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aeec:	60a3      	strhi	r3, [r4, #8]
 800aeee:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aef2:	bf98      	it	ls
 800aef4:	f04f 0900 	movls.w	r9, #0
 800aef8:	463d      	mov	r5, r7
 800aefa:	f04f 0b00 	mov.w	fp, #0
 800aefe:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	6831      	ldr	r1, [r6, #0]
 800af06:	ab03      	add	r3, sp, #12
 800af08:	2202      	movs	r2, #2
 800af0a:	7809      	ldrb	r1, [r1, #0]
 800af0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800af10:	f7fe f965 	bl	80091de <memchr>
 800af14:	b328      	cbz	r0, 800af62 <_scanf_i+0xb6>
 800af16:	f1bb 0f01 	cmp.w	fp, #1
 800af1a:	d159      	bne.n	800afd0 <_scanf_i+0x124>
 800af1c:	6862      	ldr	r2, [r4, #4]
 800af1e:	b92a      	cbnz	r2, 800af2c <_scanf_i+0x80>
 800af20:	2108      	movs	r1, #8
 800af22:	6822      	ldr	r2, [r4, #0]
 800af24:	6061      	str	r1, [r4, #4]
 800af26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af2a:	6022      	str	r2, [r4, #0]
 800af2c:	6822      	ldr	r2, [r4, #0]
 800af2e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800af32:	6022      	str	r2, [r4, #0]
 800af34:	68a2      	ldr	r2, [r4, #8]
 800af36:	1e51      	subs	r1, r2, #1
 800af38:	60a1      	str	r1, [r4, #8]
 800af3a:	b192      	cbz	r2, 800af62 <_scanf_i+0xb6>
 800af3c:	6832      	ldr	r2, [r6, #0]
 800af3e:	1c51      	adds	r1, r2, #1
 800af40:	6031      	str	r1, [r6, #0]
 800af42:	7812      	ldrb	r2, [r2, #0]
 800af44:	f805 2b01 	strb.w	r2, [r5], #1
 800af48:	6872      	ldr	r2, [r6, #4]
 800af4a:	3a01      	subs	r2, #1
 800af4c:	2a00      	cmp	r2, #0
 800af4e:	6072      	str	r2, [r6, #4]
 800af50:	dc07      	bgt.n	800af62 <_scanf_i+0xb6>
 800af52:	4631      	mov	r1, r6
 800af54:	4650      	mov	r0, sl
 800af56:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800af5a:	4790      	blx	r2
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f040 8085 	bne.w	800b06c <_scanf_i+0x1c0>
 800af62:	f10b 0b01 	add.w	fp, fp, #1
 800af66:	f1bb 0f03 	cmp.w	fp, #3
 800af6a:	d1cb      	bne.n	800af04 <_scanf_i+0x58>
 800af6c:	6863      	ldr	r3, [r4, #4]
 800af6e:	b90b      	cbnz	r3, 800af74 <_scanf_i+0xc8>
 800af70:	230a      	movs	r3, #10
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	6863      	ldr	r3, [r4, #4]
 800af76:	4945      	ldr	r1, [pc, #276]	@ (800b08c <_scanf_i+0x1e0>)
 800af78:	6960      	ldr	r0, [r4, #20]
 800af7a:	1ac9      	subs	r1, r1, r3
 800af7c:	f000 f930 	bl	800b1e0 <__sccl>
 800af80:	f04f 0b00 	mov.w	fp, #0
 800af84:	68a3      	ldr	r3, [r4, #8]
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d03d      	beq.n	800b008 <_scanf_i+0x15c>
 800af8c:	6831      	ldr	r1, [r6, #0]
 800af8e:	6960      	ldr	r0, [r4, #20]
 800af90:	f891 c000 	ldrb.w	ip, [r1]
 800af94:	f810 000c 	ldrb.w	r0, [r0, ip]
 800af98:	2800      	cmp	r0, #0
 800af9a:	d035      	beq.n	800b008 <_scanf_i+0x15c>
 800af9c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800afa0:	d124      	bne.n	800afec <_scanf_i+0x140>
 800afa2:	0510      	lsls	r0, r2, #20
 800afa4:	d522      	bpl.n	800afec <_scanf_i+0x140>
 800afa6:	f10b 0b01 	add.w	fp, fp, #1
 800afaa:	f1b9 0f00 	cmp.w	r9, #0
 800afae:	d003      	beq.n	800afb8 <_scanf_i+0x10c>
 800afb0:	3301      	adds	r3, #1
 800afb2:	f109 39ff 	add.w	r9, r9, #4294967295
 800afb6:	60a3      	str	r3, [r4, #8]
 800afb8:	6873      	ldr	r3, [r6, #4]
 800afba:	3b01      	subs	r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	6073      	str	r3, [r6, #4]
 800afc0:	dd1b      	ble.n	800affa <_scanf_i+0x14e>
 800afc2:	6833      	ldr	r3, [r6, #0]
 800afc4:	3301      	adds	r3, #1
 800afc6:	6033      	str	r3, [r6, #0]
 800afc8:	68a3      	ldr	r3, [r4, #8]
 800afca:	3b01      	subs	r3, #1
 800afcc:	60a3      	str	r3, [r4, #8]
 800afce:	e7d9      	b.n	800af84 <_scanf_i+0xd8>
 800afd0:	f1bb 0f02 	cmp.w	fp, #2
 800afd4:	d1ae      	bne.n	800af34 <_scanf_i+0x88>
 800afd6:	6822      	ldr	r2, [r4, #0]
 800afd8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800afdc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800afe0:	d1bf      	bne.n	800af62 <_scanf_i+0xb6>
 800afe2:	2110      	movs	r1, #16
 800afe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800afe8:	6061      	str	r1, [r4, #4]
 800afea:	e7a2      	b.n	800af32 <_scanf_i+0x86>
 800afec:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800aff0:	6022      	str	r2, [r4, #0]
 800aff2:	780b      	ldrb	r3, [r1, #0]
 800aff4:	f805 3b01 	strb.w	r3, [r5], #1
 800aff8:	e7de      	b.n	800afb8 <_scanf_i+0x10c>
 800affa:	4631      	mov	r1, r6
 800affc:	4650      	mov	r0, sl
 800affe:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b002:	4798      	blx	r3
 800b004:	2800      	cmp	r0, #0
 800b006:	d0df      	beq.n	800afc8 <_scanf_i+0x11c>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	05d9      	lsls	r1, r3, #23
 800b00c:	d50d      	bpl.n	800b02a <_scanf_i+0x17e>
 800b00e:	42bd      	cmp	r5, r7
 800b010:	d909      	bls.n	800b026 <_scanf_i+0x17a>
 800b012:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b016:	4632      	mov	r2, r6
 800b018:	4650      	mov	r0, sl
 800b01a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b01e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b022:	4798      	blx	r3
 800b024:	464d      	mov	r5, r9
 800b026:	42bd      	cmp	r5, r7
 800b028:	d028      	beq.n	800b07c <_scanf_i+0x1d0>
 800b02a:	6822      	ldr	r2, [r4, #0]
 800b02c:	f012 0210 	ands.w	r2, r2, #16
 800b030:	d113      	bne.n	800b05a <_scanf_i+0x1ae>
 800b032:	702a      	strb	r2, [r5, #0]
 800b034:	4639      	mov	r1, r7
 800b036:	6863      	ldr	r3, [r4, #4]
 800b038:	4650      	mov	r0, sl
 800b03a:	9e01      	ldr	r6, [sp, #4]
 800b03c:	47b0      	blx	r6
 800b03e:	f8d8 3000 	ldr.w	r3, [r8]
 800b042:	6821      	ldr	r1, [r4, #0]
 800b044:	1d1a      	adds	r2, r3, #4
 800b046:	f8c8 2000 	str.w	r2, [r8]
 800b04a:	f011 0f20 	tst.w	r1, #32
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	d00f      	beq.n	800b072 <_scanf_i+0x1c6>
 800b052:	6018      	str	r0, [r3, #0]
 800b054:	68e3      	ldr	r3, [r4, #12]
 800b056:	3301      	adds	r3, #1
 800b058:	60e3      	str	r3, [r4, #12]
 800b05a:	2000      	movs	r0, #0
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	1bed      	subs	r5, r5, r7
 800b060:	445d      	add	r5, fp
 800b062:	442b      	add	r3, r5
 800b064:	6123      	str	r3, [r4, #16]
 800b066:	b007      	add	sp, #28
 800b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06c:	f04f 0b00 	mov.w	fp, #0
 800b070:	e7ca      	b.n	800b008 <_scanf_i+0x15c>
 800b072:	07ca      	lsls	r2, r1, #31
 800b074:	bf4c      	ite	mi
 800b076:	8018      	strhmi	r0, [r3, #0]
 800b078:	6018      	strpl	r0, [r3, #0]
 800b07a:	e7eb      	b.n	800b054 <_scanf_i+0x1a8>
 800b07c:	2001      	movs	r0, #1
 800b07e:	e7f2      	b.n	800b066 <_scanf_i+0x1ba>
 800b080:	0800bd44 	.word	0x0800bd44
 800b084:	0800b4f1 	.word	0x0800b4f1
 800b088:	0800b5d1 	.word	0x0800b5d1
 800b08c:	0800bfb1 	.word	0x0800bfb1

0800b090 <__sflush_r>:
 800b090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	0716      	lsls	r6, r2, #28
 800b098:	4605      	mov	r5, r0
 800b09a:	460c      	mov	r4, r1
 800b09c:	d454      	bmi.n	800b148 <__sflush_r+0xb8>
 800b09e:	684b      	ldr	r3, [r1, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	dc02      	bgt.n	800b0aa <__sflush_r+0x1a>
 800b0a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dd48      	ble.n	800b13c <__sflush_r+0xac>
 800b0aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0ac:	2e00      	cmp	r6, #0
 800b0ae:	d045      	beq.n	800b13c <__sflush_r+0xac>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0b6:	682f      	ldr	r7, [r5, #0]
 800b0b8:	6a21      	ldr	r1, [r4, #32]
 800b0ba:	602b      	str	r3, [r5, #0]
 800b0bc:	d030      	beq.n	800b120 <__sflush_r+0x90>
 800b0be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	0759      	lsls	r1, r3, #29
 800b0c4:	d505      	bpl.n	800b0d2 <__sflush_r+0x42>
 800b0c6:	6863      	ldr	r3, [r4, #4]
 800b0c8:	1ad2      	subs	r2, r2, r3
 800b0ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0cc:	b10b      	cbz	r3, 800b0d2 <__sflush_r+0x42>
 800b0ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0d0:	1ad2      	subs	r2, r2, r3
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0d8:	6a21      	ldr	r1, [r4, #32]
 800b0da:	47b0      	blx	r6
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	d106      	bne.n	800b0f0 <__sflush_r+0x60>
 800b0e2:	6829      	ldr	r1, [r5, #0]
 800b0e4:	291d      	cmp	r1, #29
 800b0e6:	d82b      	bhi.n	800b140 <__sflush_r+0xb0>
 800b0e8:	4a28      	ldr	r2, [pc, #160]	@ (800b18c <__sflush_r+0xfc>)
 800b0ea:	410a      	asrs	r2, r1
 800b0ec:	07d6      	lsls	r6, r2, #31
 800b0ee:	d427      	bmi.n	800b140 <__sflush_r+0xb0>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	6062      	str	r2, [r4, #4]
 800b0f4:	6922      	ldr	r2, [r4, #16]
 800b0f6:	04d9      	lsls	r1, r3, #19
 800b0f8:	6022      	str	r2, [r4, #0]
 800b0fa:	d504      	bpl.n	800b106 <__sflush_r+0x76>
 800b0fc:	1c42      	adds	r2, r0, #1
 800b0fe:	d101      	bne.n	800b104 <__sflush_r+0x74>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	b903      	cbnz	r3, 800b106 <__sflush_r+0x76>
 800b104:	6560      	str	r0, [r4, #84]	@ 0x54
 800b106:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b108:	602f      	str	r7, [r5, #0]
 800b10a:	b1b9      	cbz	r1, 800b13c <__sflush_r+0xac>
 800b10c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b110:	4299      	cmp	r1, r3
 800b112:	d002      	beq.n	800b11a <__sflush_r+0x8a>
 800b114:	4628      	mov	r0, r5
 800b116:	f7fe fecf 	bl	8009eb8 <_free_r>
 800b11a:	2300      	movs	r3, #0
 800b11c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b11e:	e00d      	b.n	800b13c <__sflush_r+0xac>
 800b120:	2301      	movs	r3, #1
 800b122:	4628      	mov	r0, r5
 800b124:	47b0      	blx	r6
 800b126:	4602      	mov	r2, r0
 800b128:	1c50      	adds	r0, r2, #1
 800b12a:	d1c9      	bne.n	800b0c0 <__sflush_r+0x30>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0c6      	beq.n	800b0c0 <__sflush_r+0x30>
 800b132:	2b1d      	cmp	r3, #29
 800b134:	d001      	beq.n	800b13a <__sflush_r+0xaa>
 800b136:	2b16      	cmp	r3, #22
 800b138:	d11d      	bne.n	800b176 <__sflush_r+0xe6>
 800b13a:	602f      	str	r7, [r5, #0]
 800b13c:	2000      	movs	r0, #0
 800b13e:	e021      	b.n	800b184 <__sflush_r+0xf4>
 800b140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b144:	b21b      	sxth	r3, r3
 800b146:	e01a      	b.n	800b17e <__sflush_r+0xee>
 800b148:	690f      	ldr	r7, [r1, #16]
 800b14a:	2f00      	cmp	r7, #0
 800b14c:	d0f6      	beq.n	800b13c <__sflush_r+0xac>
 800b14e:	0793      	lsls	r3, r2, #30
 800b150:	bf18      	it	ne
 800b152:	2300      	movne	r3, #0
 800b154:	680e      	ldr	r6, [r1, #0]
 800b156:	bf08      	it	eq
 800b158:	694b      	ldreq	r3, [r1, #20]
 800b15a:	1bf6      	subs	r6, r6, r7
 800b15c:	600f      	str	r7, [r1, #0]
 800b15e:	608b      	str	r3, [r1, #8]
 800b160:	2e00      	cmp	r6, #0
 800b162:	ddeb      	ble.n	800b13c <__sflush_r+0xac>
 800b164:	4633      	mov	r3, r6
 800b166:	463a      	mov	r2, r7
 800b168:	4628      	mov	r0, r5
 800b16a:	6a21      	ldr	r1, [r4, #32]
 800b16c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b170:	47e0      	blx	ip
 800b172:	2800      	cmp	r0, #0
 800b174:	dc07      	bgt.n	800b186 <__sflush_r+0xf6>
 800b176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b17a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b17e:	f04f 30ff 	mov.w	r0, #4294967295
 800b182:	81a3      	strh	r3, [r4, #12]
 800b184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b186:	4407      	add	r7, r0
 800b188:	1a36      	subs	r6, r6, r0
 800b18a:	e7e9      	b.n	800b160 <__sflush_r+0xd0>
 800b18c:	dfbffffe 	.word	0xdfbffffe

0800b190 <_fflush_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	690b      	ldr	r3, [r1, #16]
 800b194:	4605      	mov	r5, r0
 800b196:	460c      	mov	r4, r1
 800b198:	b913      	cbnz	r3, 800b1a0 <_fflush_r+0x10>
 800b19a:	2500      	movs	r5, #0
 800b19c:	4628      	mov	r0, r5
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	b118      	cbz	r0, 800b1aa <_fflush_r+0x1a>
 800b1a2:	6a03      	ldr	r3, [r0, #32]
 800b1a4:	b90b      	cbnz	r3, 800b1aa <_fflush_r+0x1a>
 800b1a6:	f7fd fe7f 	bl	8008ea8 <__sinit>
 800b1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0f3      	beq.n	800b19a <_fflush_r+0xa>
 800b1b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1b4:	07d0      	lsls	r0, r2, #31
 800b1b6:	d404      	bmi.n	800b1c2 <_fflush_r+0x32>
 800b1b8:	0599      	lsls	r1, r3, #22
 800b1ba:	d402      	bmi.n	800b1c2 <_fflush_r+0x32>
 800b1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1be:	f7fe f80c 	bl	80091da <__retarget_lock_acquire_recursive>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	f7ff ff63 	bl	800b090 <__sflush_r>
 800b1ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	07da      	lsls	r2, r3, #31
 800b1d0:	d4e4      	bmi.n	800b19c <_fflush_r+0xc>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	059b      	lsls	r3, r3, #22
 800b1d6:	d4e1      	bmi.n	800b19c <_fflush_r+0xc>
 800b1d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1da:	f7fd ffff 	bl	80091dc <__retarget_lock_release_recursive>
 800b1de:	e7dd      	b.n	800b19c <_fflush_r+0xc>

0800b1e0 <__sccl>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	780b      	ldrb	r3, [r1, #0]
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	2b5e      	cmp	r3, #94	@ 0x5e
 800b1e8:	bf0b      	itete	eq
 800b1ea:	784b      	ldrbeq	r3, [r1, #1]
 800b1ec:	1c4a      	addne	r2, r1, #1
 800b1ee:	1c8a      	addeq	r2, r1, #2
 800b1f0:	2100      	movne	r1, #0
 800b1f2:	bf08      	it	eq
 800b1f4:	2101      	moveq	r1, #1
 800b1f6:	3801      	subs	r0, #1
 800b1f8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b1fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b200:	42a8      	cmp	r0, r5
 800b202:	d1fb      	bne.n	800b1fc <__sccl+0x1c>
 800b204:	b90b      	cbnz	r3, 800b20a <__sccl+0x2a>
 800b206:	1e50      	subs	r0, r2, #1
 800b208:	bd70      	pop	{r4, r5, r6, pc}
 800b20a:	f081 0101 	eor.w	r1, r1, #1
 800b20e:	4610      	mov	r0, r2
 800b210:	54e1      	strb	r1, [r4, r3]
 800b212:	4602      	mov	r2, r0
 800b214:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b218:	2d2d      	cmp	r5, #45	@ 0x2d
 800b21a:	d005      	beq.n	800b228 <__sccl+0x48>
 800b21c:	2d5d      	cmp	r5, #93	@ 0x5d
 800b21e:	d016      	beq.n	800b24e <__sccl+0x6e>
 800b220:	2d00      	cmp	r5, #0
 800b222:	d0f1      	beq.n	800b208 <__sccl+0x28>
 800b224:	462b      	mov	r3, r5
 800b226:	e7f2      	b.n	800b20e <__sccl+0x2e>
 800b228:	7846      	ldrb	r6, [r0, #1]
 800b22a:	2e5d      	cmp	r6, #93	@ 0x5d
 800b22c:	d0fa      	beq.n	800b224 <__sccl+0x44>
 800b22e:	42b3      	cmp	r3, r6
 800b230:	dcf8      	bgt.n	800b224 <__sccl+0x44>
 800b232:	461a      	mov	r2, r3
 800b234:	3002      	adds	r0, #2
 800b236:	3201      	adds	r2, #1
 800b238:	4296      	cmp	r6, r2
 800b23a:	54a1      	strb	r1, [r4, r2]
 800b23c:	dcfb      	bgt.n	800b236 <__sccl+0x56>
 800b23e:	1af2      	subs	r2, r6, r3
 800b240:	3a01      	subs	r2, #1
 800b242:	42b3      	cmp	r3, r6
 800b244:	bfa8      	it	ge
 800b246:	2200      	movge	r2, #0
 800b248:	1c5d      	adds	r5, r3, #1
 800b24a:	18ab      	adds	r3, r5, r2
 800b24c:	e7e1      	b.n	800b212 <__sccl+0x32>
 800b24e:	4610      	mov	r0, r2
 800b250:	e7da      	b.n	800b208 <__sccl+0x28>

0800b252 <__submore>:
 800b252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b256:	460c      	mov	r4, r1
 800b258:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b25a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b25e:	4299      	cmp	r1, r3
 800b260:	d11b      	bne.n	800b29a <__submore+0x48>
 800b262:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b266:	f7fe fe99 	bl	8009f9c <_malloc_r>
 800b26a:	b918      	cbnz	r0, 800b274 <__submore+0x22>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b278:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b27a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b27e:	6360      	str	r0, [r4, #52]	@ 0x34
 800b280:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b284:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b288:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b28c:	7043      	strb	r3, [r0, #1]
 800b28e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b292:	7003      	strb	r3, [r0, #0]
 800b294:	6020      	str	r0, [r4, #0]
 800b296:	2000      	movs	r0, #0
 800b298:	e7ea      	b.n	800b270 <__submore+0x1e>
 800b29a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b29c:	0077      	lsls	r7, r6, #1
 800b29e:	463a      	mov	r2, r7
 800b2a0:	f000 f87e 	bl	800b3a0 <_realloc_r>
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d0e0      	beq.n	800b26c <__submore+0x1a>
 800b2aa:	eb00 0806 	add.w	r8, r0, r6
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	4632      	mov	r2, r6
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	f7fd ffa1 	bl	80091fa <memcpy>
 800b2b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b2bc:	f8c4 8000 	str.w	r8, [r4]
 800b2c0:	e7e9      	b.n	800b296 <__submore+0x44>

0800b2c2 <memmove>:
 800b2c2:	4288      	cmp	r0, r1
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	eb01 0402 	add.w	r4, r1, r2
 800b2ca:	d902      	bls.n	800b2d2 <memmove+0x10>
 800b2cc:	4284      	cmp	r4, r0
 800b2ce:	4623      	mov	r3, r4
 800b2d0:	d807      	bhi.n	800b2e2 <memmove+0x20>
 800b2d2:	1e43      	subs	r3, r0, #1
 800b2d4:	42a1      	cmp	r1, r4
 800b2d6:	d008      	beq.n	800b2ea <memmove+0x28>
 800b2d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2e0:	e7f8      	b.n	800b2d4 <memmove+0x12>
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	4402      	add	r2, r0
 800b2e6:	428a      	cmp	r2, r1
 800b2e8:	d100      	bne.n	800b2ec <memmove+0x2a>
 800b2ea:	bd10      	pop	{r4, pc}
 800b2ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2f4:	e7f7      	b.n	800b2e6 <memmove+0x24>
	...

0800b2f8 <_sbrk_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	4d05      	ldr	r5, [pc, #20]	@ (800b314 <_sbrk_r+0x1c>)
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	f7f7 fa72 	bl	80027ec <_sbrk>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_sbrk_r+0x1a>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_sbrk_r+0x1a>
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	200048c4 	.word	0x200048c4

0800b318 <__assert_func>:
 800b318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b31a:	4614      	mov	r4, r2
 800b31c:	461a      	mov	r2, r3
 800b31e:	4b09      	ldr	r3, [pc, #36]	@ (800b344 <__assert_func+0x2c>)
 800b320:	4605      	mov	r5, r0
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68d8      	ldr	r0, [r3, #12]
 800b326:	b954      	cbnz	r4, 800b33e <__assert_func+0x26>
 800b328:	4b07      	ldr	r3, [pc, #28]	@ (800b348 <__assert_func+0x30>)
 800b32a:	461c      	mov	r4, r3
 800b32c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b330:	9100      	str	r1, [sp, #0]
 800b332:	462b      	mov	r3, r5
 800b334:	4905      	ldr	r1, [pc, #20]	@ (800b34c <__assert_func+0x34>)
 800b336:	f000 f95b 	bl	800b5f0 <fiprintf>
 800b33a:	f000 f96b 	bl	800b614 <abort>
 800b33e:	4b04      	ldr	r3, [pc, #16]	@ (800b350 <__assert_func+0x38>)
 800b340:	e7f4      	b.n	800b32c <__assert_func+0x14>
 800b342:	bf00      	nop
 800b344:	2000003c 	.word	0x2000003c
 800b348:	0800c001 	.word	0x0800c001
 800b34c:	0800bfd3 	.word	0x0800bfd3
 800b350:	0800bfc6 	.word	0x0800bfc6

0800b354 <_calloc_r>:
 800b354:	b570      	push	{r4, r5, r6, lr}
 800b356:	fba1 5402 	umull	r5, r4, r1, r2
 800b35a:	b93c      	cbnz	r4, 800b36c <_calloc_r+0x18>
 800b35c:	4629      	mov	r1, r5
 800b35e:	f7fe fe1d 	bl	8009f9c <_malloc_r>
 800b362:	4606      	mov	r6, r0
 800b364:	b928      	cbnz	r0, 800b372 <_calloc_r+0x1e>
 800b366:	2600      	movs	r6, #0
 800b368:	4630      	mov	r0, r6
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
 800b36c:	220c      	movs	r2, #12
 800b36e:	6002      	str	r2, [r0, #0]
 800b370:	e7f9      	b.n	800b366 <_calloc_r+0x12>
 800b372:	462a      	mov	r2, r5
 800b374:	4621      	mov	r1, r4
 800b376:	f7fd fe5c 	bl	8009032 <memset>
 800b37a:	e7f5      	b.n	800b368 <_calloc_r+0x14>

0800b37c <__ascii_mbtowc>:
 800b37c:	b082      	sub	sp, #8
 800b37e:	b901      	cbnz	r1, 800b382 <__ascii_mbtowc+0x6>
 800b380:	a901      	add	r1, sp, #4
 800b382:	b142      	cbz	r2, 800b396 <__ascii_mbtowc+0x1a>
 800b384:	b14b      	cbz	r3, 800b39a <__ascii_mbtowc+0x1e>
 800b386:	7813      	ldrb	r3, [r2, #0]
 800b388:	600b      	str	r3, [r1, #0]
 800b38a:	7812      	ldrb	r2, [r2, #0]
 800b38c:	1e10      	subs	r0, r2, #0
 800b38e:	bf18      	it	ne
 800b390:	2001      	movne	r0, #1
 800b392:	b002      	add	sp, #8
 800b394:	4770      	bx	lr
 800b396:	4610      	mov	r0, r2
 800b398:	e7fb      	b.n	800b392 <__ascii_mbtowc+0x16>
 800b39a:	f06f 0001 	mvn.w	r0, #1
 800b39e:	e7f8      	b.n	800b392 <__ascii_mbtowc+0x16>

0800b3a0 <_realloc_r>:
 800b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	4615      	mov	r5, r2
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	b921      	cbnz	r1, 800b3b6 <_realloc_r+0x16>
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b2:	f7fe bdf3 	b.w	8009f9c <_malloc_r>
 800b3b6:	b92a      	cbnz	r2, 800b3c4 <_realloc_r+0x24>
 800b3b8:	f7fe fd7e 	bl	8009eb8 <_free_r>
 800b3bc:	2400      	movs	r4, #0
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c4:	f000 f92d 	bl	800b622 <_malloc_usable_size_r>
 800b3c8:	4285      	cmp	r5, r0
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	d802      	bhi.n	800b3d4 <_realloc_r+0x34>
 800b3ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b3d2:	d8f4      	bhi.n	800b3be <_realloc_r+0x1e>
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	f7fe fde0 	bl	8009f9c <_malloc_r>
 800b3dc:	4607      	mov	r7, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d0ec      	beq.n	800b3bc <_realloc_r+0x1c>
 800b3e2:	42b5      	cmp	r5, r6
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	bf28      	it	cs
 800b3ea:	4632      	movcs	r2, r6
 800b3ec:	f7fd ff05 	bl	80091fa <memcpy>
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	f7fe fd60 	bl	8009eb8 <_free_r>
 800b3f8:	463c      	mov	r4, r7
 800b3fa:	e7e0      	b.n	800b3be <_realloc_r+0x1e>

0800b3fc <_strtol_l.constprop.0>:
 800b3fc:	2b24      	cmp	r3, #36	@ 0x24
 800b3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b402:	4686      	mov	lr, r0
 800b404:	4690      	mov	r8, r2
 800b406:	d801      	bhi.n	800b40c <_strtol_l.constprop.0+0x10>
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d106      	bne.n	800b41a <_strtol_l.constprop.0+0x1e>
 800b40c:	f7fd feba 	bl	8009184 <__errno>
 800b410:	2316      	movs	r3, #22
 800b412:	6003      	str	r3, [r0, #0]
 800b414:	2000      	movs	r0, #0
 800b416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41a:	460d      	mov	r5, r1
 800b41c:	4833      	ldr	r0, [pc, #204]	@ (800b4ec <_strtol_l.constprop.0+0xf0>)
 800b41e:	462a      	mov	r2, r5
 800b420:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b424:	5d06      	ldrb	r6, [r0, r4]
 800b426:	f016 0608 	ands.w	r6, r6, #8
 800b42a:	d1f8      	bne.n	800b41e <_strtol_l.constprop.0+0x22>
 800b42c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b42e:	d12d      	bne.n	800b48c <_strtol_l.constprop.0+0x90>
 800b430:	2601      	movs	r6, #1
 800b432:	782c      	ldrb	r4, [r5, #0]
 800b434:	1c95      	adds	r5, r2, #2
 800b436:	f033 0210 	bics.w	r2, r3, #16
 800b43a:	d109      	bne.n	800b450 <_strtol_l.constprop.0+0x54>
 800b43c:	2c30      	cmp	r4, #48	@ 0x30
 800b43e:	d12a      	bne.n	800b496 <_strtol_l.constprop.0+0x9a>
 800b440:	782a      	ldrb	r2, [r5, #0]
 800b442:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b446:	2a58      	cmp	r2, #88	@ 0x58
 800b448:	d125      	bne.n	800b496 <_strtol_l.constprop.0+0x9a>
 800b44a:	2310      	movs	r3, #16
 800b44c:	786c      	ldrb	r4, [r5, #1]
 800b44e:	3502      	adds	r5, #2
 800b450:	2200      	movs	r2, #0
 800b452:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b456:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b45a:	fbbc f9f3 	udiv	r9, ip, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	fb03 ca19 	mls	sl, r3, r9, ip
 800b464:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b468:	2f09      	cmp	r7, #9
 800b46a:	d81b      	bhi.n	800b4a4 <_strtol_l.constprop.0+0xa8>
 800b46c:	463c      	mov	r4, r7
 800b46e:	42a3      	cmp	r3, r4
 800b470:	dd27      	ble.n	800b4c2 <_strtol_l.constprop.0+0xc6>
 800b472:	1c57      	adds	r7, r2, #1
 800b474:	d007      	beq.n	800b486 <_strtol_l.constprop.0+0x8a>
 800b476:	4581      	cmp	r9, r0
 800b478:	d320      	bcc.n	800b4bc <_strtol_l.constprop.0+0xc0>
 800b47a:	d101      	bne.n	800b480 <_strtol_l.constprop.0+0x84>
 800b47c:	45a2      	cmp	sl, r4
 800b47e:	db1d      	blt.n	800b4bc <_strtol_l.constprop.0+0xc0>
 800b480:	2201      	movs	r2, #1
 800b482:	fb00 4003 	mla	r0, r0, r3, r4
 800b486:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b48a:	e7eb      	b.n	800b464 <_strtol_l.constprop.0+0x68>
 800b48c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b48e:	bf04      	itt	eq
 800b490:	782c      	ldrbeq	r4, [r5, #0]
 800b492:	1c95      	addeq	r5, r2, #2
 800b494:	e7cf      	b.n	800b436 <_strtol_l.constprop.0+0x3a>
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1da      	bne.n	800b450 <_strtol_l.constprop.0+0x54>
 800b49a:	2c30      	cmp	r4, #48	@ 0x30
 800b49c:	bf0c      	ite	eq
 800b49e:	2308      	moveq	r3, #8
 800b4a0:	230a      	movne	r3, #10
 800b4a2:	e7d5      	b.n	800b450 <_strtol_l.constprop.0+0x54>
 800b4a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b4a8:	2f19      	cmp	r7, #25
 800b4aa:	d801      	bhi.n	800b4b0 <_strtol_l.constprop.0+0xb4>
 800b4ac:	3c37      	subs	r4, #55	@ 0x37
 800b4ae:	e7de      	b.n	800b46e <_strtol_l.constprop.0+0x72>
 800b4b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b4b4:	2f19      	cmp	r7, #25
 800b4b6:	d804      	bhi.n	800b4c2 <_strtol_l.constprop.0+0xc6>
 800b4b8:	3c57      	subs	r4, #87	@ 0x57
 800b4ba:	e7d8      	b.n	800b46e <_strtol_l.constprop.0+0x72>
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	e7e1      	b.n	800b486 <_strtol_l.constprop.0+0x8a>
 800b4c2:	1c53      	adds	r3, r2, #1
 800b4c4:	d108      	bne.n	800b4d8 <_strtol_l.constprop.0+0xdc>
 800b4c6:	2322      	movs	r3, #34	@ 0x22
 800b4c8:	4660      	mov	r0, ip
 800b4ca:	f8ce 3000 	str.w	r3, [lr]
 800b4ce:	f1b8 0f00 	cmp.w	r8, #0
 800b4d2:	d0a0      	beq.n	800b416 <_strtol_l.constprop.0+0x1a>
 800b4d4:	1e69      	subs	r1, r5, #1
 800b4d6:	e006      	b.n	800b4e6 <_strtol_l.constprop.0+0xea>
 800b4d8:	b106      	cbz	r6, 800b4dc <_strtol_l.constprop.0+0xe0>
 800b4da:	4240      	negs	r0, r0
 800b4dc:	f1b8 0f00 	cmp.w	r8, #0
 800b4e0:	d099      	beq.n	800b416 <_strtol_l.constprop.0+0x1a>
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	d1f6      	bne.n	800b4d4 <_strtol_l.constprop.0+0xd8>
 800b4e6:	f8c8 1000 	str.w	r1, [r8]
 800b4ea:	e794      	b.n	800b416 <_strtol_l.constprop.0+0x1a>
 800b4ec:	0800c003 	.word	0x0800c003

0800b4f0 <_strtol_r>:
 800b4f0:	f7ff bf84 	b.w	800b3fc <_strtol_l.constprop.0>

0800b4f4 <_strtoul_l.constprop.0>:
 800b4f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	4686      	mov	lr, r0
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	4e33      	ldr	r6, [pc, #204]	@ (800b5cc <_strtoul_l.constprop.0+0xd8>)
 800b4fe:	4628      	mov	r0, r5
 800b500:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b504:	5d37      	ldrb	r7, [r6, r4]
 800b506:	f017 0708 	ands.w	r7, r7, #8
 800b50a:	d1f8      	bne.n	800b4fe <_strtoul_l.constprop.0+0xa>
 800b50c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b50e:	d12f      	bne.n	800b570 <_strtoul_l.constprop.0+0x7c>
 800b510:	2701      	movs	r7, #1
 800b512:	782c      	ldrb	r4, [r5, #0]
 800b514:	1c85      	adds	r5, r0, #2
 800b516:	f033 0010 	bics.w	r0, r3, #16
 800b51a:	d109      	bne.n	800b530 <_strtoul_l.constprop.0+0x3c>
 800b51c:	2c30      	cmp	r4, #48	@ 0x30
 800b51e:	d12c      	bne.n	800b57a <_strtoul_l.constprop.0+0x86>
 800b520:	7828      	ldrb	r0, [r5, #0]
 800b522:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b526:	2858      	cmp	r0, #88	@ 0x58
 800b528:	d127      	bne.n	800b57a <_strtoul_l.constprop.0+0x86>
 800b52a:	2310      	movs	r3, #16
 800b52c:	786c      	ldrb	r4, [r5, #1]
 800b52e:	3502      	adds	r5, #2
 800b530:	f04f 38ff 	mov.w	r8, #4294967295
 800b534:	fbb8 f8f3 	udiv	r8, r8, r3
 800b538:	2600      	movs	r6, #0
 800b53a:	fb03 f908 	mul.w	r9, r3, r8
 800b53e:	4630      	mov	r0, r6
 800b540:	ea6f 0909 	mvn.w	r9, r9
 800b544:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b548:	f1bc 0f09 	cmp.w	ip, #9
 800b54c:	d81c      	bhi.n	800b588 <_strtoul_l.constprop.0+0x94>
 800b54e:	4664      	mov	r4, ip
 800b550:	42a3      	cmp	r3, r4
 800b552:	dd2a      	ble.n	800b5aa <_strtoul_l.constprop.0+0xb6>
 800b554:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b558:	d007      	beq.n	800b56a <_strtoul_l.constprop.0+0x76>
 800b55a:	4580      	cmp	r8, r0
 800b55c:	d322      	bcc.n	800b5a4 <_strtoul_l.constprop.0+0xb0>
 800b55e:	d101      	bne.n	800b564 <_strtoul_l.constprop.0+0x70>
 800b560:	45a1      	cmp	r9, r4
 800b562:	db1f      	blt.n	800b5a4 <_strtoul_l.constprop.0+0xb0>
 800b564:	2601      	movs	r6, #1
 800b566:	fb00 4003 	mla	r0, r0, r3, r4
 800b56a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b56e:	e7e9      	b.n	800b544 <_strtoul_l.constprop.0+0x50>
 800b570:	2c2b      	cmp	r4, #43	@ 0x2b
 800b572:	bf04      	itt	eq
 800b574:	782c      	ldrbeq	r4, [r5, #0]
 800b576:	1c85      	addeq	r5, r0, #2
 800b578:	e7cd      	b.n	800b516 <_strtoul_l.constprop.0+0x22>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1d8      	bne.n	800b530 <_strtoul_l.constprop.0+0x3c>
 800b57e:	2c30      	cmp	r4, #48	@ 0x30
 800b580:	bf0c      	ite	eq
 800b582:	2308      	moveq	r3, #8
 800b584:	230a      	movne	r3, #10
 800b586:	e7d3      	b.n	800b530 <_strtoul_l.constprop.0+0x3c>
 800b588:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b58c:	f1bc 0f19 	cmp.w	ip, #25
 800b590:	d801      	bhi.n	800b596 <_strtoul_l.constprop.0+0xa2>
 800b592:	3c37      	subs	r4, #55	@ 0x37
 800b594:	e7dc      	b.n	800b550 <_strtoul_l.constprop.0+0x5c>
 800b596:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b59a:	f1bc 0f19 	cmp.w	ip, #25
 800b59e:	d804      	bhi.n	800b5aa <_strtoul_l.constprop.0+0xb6>
 800b5a0:	3c57      	subs	r4, #87	@ 0x57
 800b5a2:	e7d5      	b.n	800b550 <_strtoul_l.constprop.0+0x5c>
 800b5a4:	f04f 36ff 	mov.w	r6, #4294967295
 800b5a8:	e7df      	b.n	800b56a <_strtoul_l.constprop.0+0x76>
 800b5aa:	1c73      	adds	r3, r6, #1
 800b5ac:	d106      	bne.n	800b5bc <_strtoul_l.constprop.0+0xc8>
 800b5ae:	2322      	movs	r3, #34	@ 0x22
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f8ce 3000 	str.w	r3, [lr]
 800b5b6:	b932      	cbnz	r2, 800b5c6 <_strtoul_l.constprop.0+0xd2>
 800b5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5bc:	b107      	cbz	r7, 800b5c0 <_strtoul_l.constprop.0+0xcc>
 800b5be:	4240      	negs	r0, r0
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	d0f9      	beq.n	800b5b8 <_strtoul_l.constprop.0+0xc4>
 800b5c4:	b106      	cbz	r6, 800b5c8 <_strtoul_l.constprop.0+0xd4>
 800b5c6:	1e69      	subs	r1, r5, #1
 800b5c8:	6011      	str	r1, [r2, #0]
 800b5ca:	e7f5      	b.n	800b5b8 <_strtoul_l.constprop.0+0xc4>
 800b5cc:	0800c003 	.word	0x0800c003

0800b5d0 <_strtoul_r>:
 800b5d0:	f7ff bf90 	b.w	800b4f4 <_strtoul_l.constprop.0>

0800b5d4 <__ascii_wctomb>:
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	4608      	mov	r0, r1
 800b5d8:	b141      	cbz	r1, 800b5ec <__ascii_wctomb+0x18>
 800b5da:	2aff      	cmp	r2, #255	@ 0xff
 800b5dc:	d904      	bls.n	800b5e8 <__ascii_wctomb+0x14>
 800b5de:	228a      	movs	r2, #138	@ 0x8a
 800b5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	4770      	bx	lr
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	700a      	strb	r2, [r1, #0]
 800b5ec:	4770      	bx	lr
	...

0800b5f0 <fiprintf>:
 800b5f0:	b40e      	push	{r1, r2, r3}
 800b5f2:	b503      	push	{r0, r1, lr}
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	4805      	ldr	r0, [pc, #20]	@ (800b610 <fiprintf+0x20>)
 800b5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fe:	6800      	ldr	r0, [r0, #0]
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	f000 f83d 	bl	800b680 <_vfiprintf_r>
 800b606:	b002      	add	sp, #8
 800b608:	f85d eb04 	ldr.w	lr, [sp], #4
 800b60c:	b003      	add	sp, #12
 800b60e:	4770      	bx	lr
 800b610:	2000003c 	.word	0x2000003c

0800b614 <abort>:
 800b614:	2006      	movs	r0, #6
 800b616:	b508      	push	{r3, lr}
 800b618:	f000 fa06 	bl	800ba28 <raise>
 800b61c:	2001      	movs	r0, #1
 800b61e:	f7f7 f870 	bl	8002702 <_exit>

0800b622 <_malloc_usable_size_r>:
 800b622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b626:	1f18      	subs	r0, r3, #4
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bfbc      	itt	lt
 800b62c:	580b      	ldrlt	r3, [r1, r0]
 800b62e:	18c0      	addlt	r0, r0, r3
 800b630:	4770      	bx	lr

0800b632 <__sfputc_r>:
 800b632:	6893      	ldr	r3, [r2, #8]
 800b634:	b410      	push	{r4}
 800b636:	3b01      	subs	r3, #1
 800b638:	2b00      	cmp	r3, #0
 800b63a:	6093      	str	r3, [r2, #8]
 800b63c:	da07      	bge.n	800b64e <__sfputc_r+0x1c>
 800b63e:	6994      	ldr	r4, [r2, #24]
 800b640:	42a3      	cmp	r3, r4
 800b642:	db01      	blt.n	800b648 <__sfputc_r+0x16>
 800b644:	290a      	cmp	r1, #10
 800b646:	d102      	bne.n	800b64e <__sfputc_r+0x1c>
 800b648:	bc10      	pop	{r4}
 800b64a:	f000 b931 	b.w	800b8b0 <__swbuf_r>
 800b64e:	6813      	ldr	r3, [r2, #0]
 800b650:	1c58      	adds	r0, r3, #1
 800b652:	6010      	str	r0, [r2, #0]
 800b654:	7019      	strb	r1, [r3, #0]
 800b656:	4608      	mov	r0, r1
 800b658:	bc10      	pop	{r4}
 800b65a:	4770      	bx	lr

0800b65c <__sfputs_r>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	4606      	mov	r6, r0
 800b660:	460f      	mov	r7, r1
 800b662:	4614      	mov	r4, r2
 800b664:	18d5      	adds	r5, r2, r3
 800b666:	42ac      	cmp	r4, r5
 800b668:	d101      	bne.n	800b66e <__sfputs_r+0x12>
 800b66a:	2000      	movs	r0, #0
 800b66c:	e007      	b.n	800b67e <__sfputs_r+0x22>
 800b66e:	463a      	mov	r2, r7
 800b670:	4630      	mov	r0, r6
 800b672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b676:	f7ff ffdc 	bl	800b632 <__sfputc_r>
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	d1f3      	bne.n	800b666 <__sfputs_r+0xa>
 800b67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b680 <_vfiprintf_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	460d      	mov	r5, r1
 800b686:	4614      	mov	r4, r2
 800b688:	4698      	mov	r8, r3
 800b68a:	4606      	mov	r6, r0
 800b68c:	b09d      	sub	sp, #116	@ 0x74
 800b68e:	b118      	cbz	r0, 800b698 <_vfiprintf_r+0x18>
 800b690:	6a03      	ldr	r3, [r0, #32]
 800b692:	b90b      	cbnz	r3, 800b698 <_vfiprintf_r+0x18>
 800b694:	f7fd fc08 	bl	8008ea8 <__sinit>
 800b698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b69a:	07d9      	lsls	r1, r3, #31
 800b69c:	d405      	bmi.n	800b6aa <_vfiprintf_r+0x2a>
 800b69e:	89ab      	ldrh	r3, [r5, #12]
 800b6a0:	059a      	lsls	r2, r3, #22
 800b6a2:	d402      	bmi.n	800b6aa <_vfiprintf_r+0x2a>
 800b6a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6a6:	f7fd fd98 	bl	80091da <__retarget_lock_acquire_recursive>
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	071b      	lsls	r3, r3, #28
 800b6ae:	d501      	bpl.n	800b6b4 <_vfiprintf_r+0x34>
 800b6b0:	692b      	ldr	r3, [r5, #16]
 800b6b2:	b99b      	cbnz	r3, 800b6dc <_vfiprintf_r+0x5c>
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f000 f938 	bl	800b92c <__swsetup_r>
 800b6bc:	b170      	cbz	r0, 800b6dc <_vfiprintf_r+0x5c>
 800b6be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6c0:	07dc      	lsls	r4, r3, #31
 800b6c2:	d504      	bpl.n	800b6ce <_vfiprintf_r+0x4e>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	b01d      	add	sp, #116	@ 0x74
 800b6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	0598      	lsls	r0, r3, #22
 800b6d2:	d4f7      	bmi.n	800b6c4 <_vfiprintf_r+0x44>
 800b6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6d6:	f7fd fd81 	bl	80091dc <__retarget_lock_release_recursive>
 800b6da:	e7f3      	b.n	800b6c4 <_vfiprintf_r+0x44>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6e0:	2320      	movs	r3, #32
 800b6e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6e6:	2330      	movs	r3, #48	@ 0x30
 800b6e8:	f04f 0901 	mov.w	r9, #1
 800b6ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b89c <_vfiprintf_r+0x21c>
 800b6f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6f8:	4623      	mov	r3, r4
 800b6fa:	469a      	mov	sl, r3
 800b6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b700:	b10a      	cbz	r2, 800b706 <_vfiprintf_r+0x86>
 800b702:	2a25      	cmp	r2, #37	@ 0x25
 800b704:	d1f9      	bne.n	800b6fa <_vfiprintf_r+0x7a>
 800b706:	ebba 0b04 	subs.w	fp, sl, r4
 800b70a:	d00b      	beq.n	800b724 <_vfiprintf_r+0xa4>
 800b70c:	465b      	mov	r3, fp
 800b70e:	4622      	mov	r2, r4
 800b710:	4629      	mov	r1, r5
 800b712:	4630      	mov	r0, r6
 800b714:	f7ff ffa2 	bl	800b65c <__sfputs_r>
 800b718:	3001      	adds	r0, #1
 800b71a:	f000 80a7 	beq.w	800b86c <_vfiprintf_r+0x1ec>
 800b71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b720:	445a      	add	r2, fp
 800b722:	9209      	str	r2, [sp, #36]	@ 0x24
 800b724:	f89a 3000 	ldrb.w	r3, [sl]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 809f 	beq.w	800b86c <_vfiprintf_r+0x1ec>
 800b72e:	2300      	movs	r3, #0
 800b730:	f04f 32ff 	mov.w	r2, #4294967295
 800b734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b738:	f10a 0a01 	add.w	sl, sl, #1
 800b73c:	9304      	str	r3, [sp, #16]
 800b73e:	9307      	str	r3, [sp, #28]
 800b740:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b744:	931a      	str	r3, [sp, #104]	@ 0x68
 800b746:	4654      	mov	r4, sl
 800b748:	2205      	movs	r2, #5
 800b74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74e:	4853      	ldr	r0, [pc, #332]	@ (800b89c <_vfiprintf_r+0x21c>)
 800b750:	f7fd fd45 	bl	80091de <memchr>
 800b754:	9a04      	ldr	r2, [sp, #16]
 800b756:	b9d8      	cbnz	r0, 800b790 <_vfiprintf_r+0x110>
 800b758:	06d1      	lsls	r1, r2, #27
 800b75a:	bf44      	itt	mi
 800b75c:	2320      	movmi	r3, #32
 800b75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b762:	0713      	lsls	r3, r2, #28
 800b764:	bf44      	itt	mi
 800b766:	232b      	movmi	r3, #43	@ 0x2b
 800b768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b76c:	f89a 3000 	ldrb.w	r3, [sl]
 800b770:	2b2a      	cmp	r3, #42	@ 0x2a
 800b772:	d015      	beq.n	800b7a0 <_vfiprintf_r+0x120>
 800b774:	4654      	mov	r4, sl
 800b776:	2000      	movs	r0, #0
 800b778:	f04f 0c0a 	mov.w	ip, #10
 800b77c:	9a07      	ldr	r2, [sp, #28]
 800b77e:	4621      	mov	r1, r4
 800b780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b784:	3b30      	subs	r3, #48	@ 0x30
 800b786:	2b09      	cmp	r3, #9
 800b788:	d94b      	bls.n	800b822 <_vfiprintf_r+0x1a2>
 800b78a:	b1b0      	cbz	r0, 800b7ba <_vfiprintf_r+0x13a>
 800b78c:	9207      	str	r2, [sp, #28]
 800b78e:	e014      	b.n	800b7ba <_vfiprintf_r+0x13a>
 800b790:	eba0 0308 	sub.w	r3, r0, r8
 800b794:	fa09 f303 	lsl.w	r3, r9, r3
 800b798:	4313      	orrs	r3, r2
 800b79a:	46a2      	mov	sl, r4
 800b79c:	9304      	str	r3, [sp, #16]
 800b79e:	e7d2      	b.n	800b746 <_vfiprintf_r+0xc6>
 800b7a0:	9b03      	ldr	r3, [sp, #12]
 800b7a2:	1d19      	adds	r1, r3, #4
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	9103      	str	r1, [sp, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	bfbb      	ittet	lt
 800b7ac:	425b      	neglt	r3, r3
 800b7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b7b2:	9307      	strge	r3, [sp, #28]
 800b7b4:	9307      	strlt	r3, [sp, #28]
 800b7b6:	bfb8      	it	lt
 800b7b8:	9204      	strlt	r2, [sp, #16]
 800b7ba:	7823      	ldrb	r3, [r4, #0]
 800b7bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7be:	d10a      	bne.n	800b7d6 <_vfiprintf_r+0x156>
 800b7c0:	7863      	ldrb	r3, [r4, #1]
 800b7c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7c4:	d132      	bne.n	800b82c <_vfiprintf_r+0x1ac>
 800b7c6:	9b03      	ldr	r3, [sp, #12]
 800b7c8:	3402      	adds	r4, #2
 800b7ca:	1d1a      	adds	r2, r3, #4
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	9203      	str	r2, [sp, #12]
 800b7d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7d4:	9305      	str	r3, [sp, #20]
 800b7d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b8a0 <_vfiprintf_r+0x220>
 800b7da:	2203      	movs	r2, #3
 800b7dc:	4650      	mov	r0, sl
 800b7de:	7821      	ldrb	r1, [r4, #0]
 800b7e0:	f7fd fcfd 	bl	80091de <memchr>
 800b7e4:	b138      	cbz	r0, 800b7f6 <_vfiprintf_r+0x176>
 800b7e6:	2240      	movs	r2, #64	@ 0x40
 800b7e8:	9b04      	ldr	r3, [sp, #16]
 800b7ea:	eba0 000a 	sub.w	r0, r0, sl
 800b7ee:	4082      	lsls	r2, r0
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	3401      	adds	r4, #1
 800b7f4:	9304      	str	r3, [sp, #16]
 800b7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fa:	2206      	movs	r2, #6
 800b7fc:	4829      	ldr	r0, [pc, #164]	@ (800b8a4 <_vfiprintf_r+0x224>)
 800b7fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b802:	f7fd fcec 	bl	80091de <memchr>
 800b806:	2800      	cmp	r0, #0
 800b808:	d03f      	beq.n	800b88a <_vfiprintf_r+0x20a>
 800b80a:	4b27      	ldr	r3, [pc, #156]	@ (800b8a8 <_vfiprintf_r+0x228>)
 800b80c:	bb1b      	cbnz	r3, 800b856 <_vfiprintf_r+0x1d6>
 800b80e:	9b03      	ldr	r3, [sp, #12]
 800b810:	3307      	adds	r3, #7
 800b812:	f023 0307 	bic.w	r3, r3, #7
 800b816:	3308      	adds	r3, #8
 800b818:	9303      	str	r3, [sp, #12]
 800b81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b81c:	443b      	add	r3, r7
 800b81e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b820:	e76a      	b.n	800b6f8 <_vfiprintf_r+0x78>
 800b822:	460c      	mov	r4, r1
 800b824:	2001      	movs	r0, #1
 800b826:	fb0c 3202 	mla	r2, ip, r2, r3
 800b82a:	e7a8      	b.n	800b77e <_vfiprintf_r+0xfe>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f04f 0c0a 	mov.w	ip, #10
 800b832:	4619      	mov	r1, r3
 800b834:	3401      	adds	r4, #1
 800b836:	9305      	str	r3, [sp, #20]
 800b838:	4620      	mov	r0, r4
 800b83a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b83e:	3a30      	subs	r2, #48	@ 0x30
 800b840:	2a09      	cmp	r2, #9
 800b842:	d903      	bls.n	800b84c <_vfiprintf_r+0x1cc>
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0c6      	beq.n	800b7d6 <_vfiprintf_r+0x156>
 800b848:	9105      	str	r1, [sp, #20]
 800b84a:	e7c4      	b.n	800b7d6 <_vfiprintf_r+0x156>
 800b84c:	4604      	mov	r4, r0
 800b84e:	2301      	movs	r3, #1
 800b850:	fb0c 2101 	mla	r1, ip, r1, r2
 800b854:	e7f0      	b.n	800b838 <_vfiprintf_r+0x1b8>
 800b856:	ab03      	add	r3, sp, #12
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	462a      	mov	r2, r5
 800b85c:	4630      	mov	r0, r6
 800b85e:	4b13      	ldr	r3, [pc, #76]	@ (800b8ac <_vfiprintf_r+0x22c>)
 800b860:	a904      	add	r1, sp, #16
 800b862:	f7fc fed7 	bl	8008614 <_printf_float>
 800b866:	4607      	mov	r7, r0
 800b868:	1c78      	adds	r0, r7, #1
 800b86a:	d1d6      	bne.n	800b81a <_vfiprintf_r+0x19a>
 800b86c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b86e:	07d9      	lsls	r1, r3, #31
 800b870:	d405      	bmi.n	800b87e <_vfiprintf_r+0x1fe>
 800b872:	89ab      	ldrh	r3, [r5, #12]
 800b874:	059a      	lsls	r2, r3, #22
 800b876:	d402      	bmi.n	800b87e <_vfiprintf_r+0x1fe>
 800b878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b87a:	f7fd fcaf 	bl	80091dc <__retarget_lock_release_recursive>
 800b87e:	89ab      	ldrh	r3, [r5, #12]
 800b880:	065b      	lsls	r3, r3, #25
 800b882:	f53f af1f 	bmi.w	800b6c4 <_vfiprintf_r+0x44>
 800b886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b888:	e71e      	b.n	800b6c8 <_vfiprintf_r+0x48>
 800b88a:	ab03      	add	r3, sp, #12
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	462a      	mov	r2, r5
 800b890:	4630      	mov	r0, r6
 800b892:	4b06      	ldr	r3, [pc, #24]	@ (800b8ac <_vfiprintf_r+0x22c>)
 800b894:	a904      	add	r1, sp, #16
 800b896:	f7fd f95b 	bl	8008b50 <_printf_i>
 800b89a:	e7e4      	b.n	800b866 <_vfiprintf_r+0x1e6>
 800b89c:	0800bf90 	.word	0x0800bf90
 800b8a0:	0800bf96 	.word	0x0800bf96
 800b8a4:	0800bf9a 	.word	0x0800bf9a
 800b8a8:	08008615 	.word	0x08008615
 800b8ac:	0800b65d 	.word	0x0800b65d

0800b8b0 <__swbuf_r>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	460e      	mov	r6, r1
 800b8b4:	4614      	mov	r4, r2
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	b118      	cbz	r0, 800b8c2 <__swbuf_r+0x12>
 800b8ba:	6a03      	ldr	r3, [r0, #32]
 800b8bc:	b90b      	cbnz	r3, 800b8c2 <__swbuf_r+0x12>
 800b8be:	f7fd faf3 	bl	8008ea8 <__sinit>
 800b8c2:	69a3      	ldr	r3, [r4, #24]
 800b8c4:	60a3      	str	r3, [r4, #8]
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	071a      	lsls	r2, r3, #28
 800b8ca:	d501      	bpl.n	800b8d0 <__swbuf_r+0x20>
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	b943      	cbnz	r3, 800b8e2 <__swbuf_r+0x32>
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f000 f82a 	bl	800b92c <__swsetup_r>
 800b8d8:	b118      	cbz	r0, 800b8e2 <__swbuf_r+0x32>
 800b8da:	f04f 37ff 	mov.w	r7, #4294967295
 800b8de:	4638      	mov	r0, r7
 800b8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	6922      	ldr	r2, [r4, #16]
 800b8e6:	b2f6      	uxtb	r6, r6
 800b8e8:	1a98      	subs	r0, r3, r2
 800b8ea:	6963      	ldr	r3, [r4, #20]
 800b8ec:	4637      	mov	r7, r6
 800b8ee:	4283      	cmp	r3, r0
 800b8f0:	dc05      	bgt.n	800b8fe <__swbuf_r+0x4e>
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f7ff fc4b 	bl	800b190 <_fflush_r>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d1ed      	bne.n	800b8da <__swbuf_r+0x2a>
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	3b01      	subs	r3, #1
 800b902:	60a3      	str	r3, [r4, #8]
 800b904:	6823      	ldr	r3, [r4, #0]
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	6022      	str	r2, [r4, #0]
 800b90a:	701e      	strb	r6, [r3, #0]
 800b90c:	6962      	ldr	r2, [r4, #20]
 800b90e:	1c43      	adds	r3, r0, #1
 800b910:	429a      	cmp	r2, r3
 800b912:	d004      	beq.n	800b91e <__swbuf_r+0x6e>
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	07db      	lsls	r3, r3, #31
 800b918:	d5e1      	bpl.n	800b8de <__swbuf_r+0x2e>
 800b91a:	2e0a      	cmp	r6, #10
 800b91c:	d1df      	bne.n	800b8de <__swbuf_r+0x2e>
 800b91e:	4621      	mov	r1, r4
 800b920:	4628      	mov	r0, r5
 800b922:	f7ff fc35 	bl	800b190 <_fflush_r>
 800b926:	2800      	cmp	r0, #0
 800b928:	d0d9      	beq.n	800b8de <__swbuf_r+0x2e>
 800b92a:	e7d6      	b.n	800b8da <__swbuf_r+0x2a>

0800b92c <__swsetup_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4b29      	ldr	r3, [pc, #164]	@ (800b9d4 <__swsetup_r+0xa8>)
 800b930:	4605      	mov	r5, r0
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	460c      	mov	r4, r1
 800b936:	b118      	cbz	r0, 800b940 <__swsetup_r+0x14>
 800b938:	6a03      	ldr	r3, [r0, #32]
 800b93a:	b90b      	cbnz	r3, 800b940 <__swsetup_r+0x14>
 800b93c:	f7fd fab4 	bl	8008ea8 <__sinit>
 800b940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b944:	0719      	lsls	r1, r3, #28
 800b946:	d422      	bmi.n	800b98e <__swsetup_r+0x62>
 800b948:	06da      	lsls	r2, r3, #27
 800b94a:	d407      	bmi.n	800b95c <__swsetup_r+0x30>
 800b94c:	2209      	movs	r2, #9
 800b94e:	602a      	str	r2, [r5, #0]
 800b950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	81a3      	strh	r3, [r4, #12]
 800b95a:	e033      	b.n	800b9c4 <__swsetup_r+0x98>
 800b95c:	0758      	lsls	r0, r3, #29
 800b95e:	d512      	bpl.n	800b986 <__swsetup_r+0x5a>
 800b960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b962:	b141      	cbz	r1, 800b976 <__swsetup_r+0x4a>
 800b964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b968:	4299      	cmp	r1, r3
 800b96a:	d002      	beq.n	800b972 <__swsetup_r+0x46>
 800b96c:	4628      	mov	r0, r5
 800b96e:	f7fe faa3 	bl	8009eb8 <_free_r>
 800b972:	2300      	movs	r3, #0
 800b974:	6363      	str	r3, [r4, #52]	@ 0x34
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b97c:	81a3      	strh	r3, [r4, #12]
 800b97e:	2300      	movs	r3, #0
 800b980:	6063      	str	r3, [r4, #4]
 800b982:	6923      	ldr	r3, [r4, #16]
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	89a3      	ldrh	r3, [r4, #12]
 800b988:	f043 0308 	orr.w	r3, r3, #8
 800b98c:	81a3      	strh	r3, [r4, #12]
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	b94b      	cbnz	r3, 800b9a6 <__swsetup_r+0x7a>
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b99c:	d003      	beq.n	800b9a6 <__swsetup_r+0x7a>
 800b99e:	4621      	mov	r1, r4
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f000 f882 	bl	800baaa <__smakebuf_r>
 800b9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9aa:	f013 0201 	ands.w	r2, r3, #1
 800b9ae:	d00a      	beq.n	800b9c6 <__swsetup_r+0x9a>
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	60a2      	str	r2, [r4, #8]
 800b9b4:	6962      	ldr	r2, [r4, #20]
 800b9b6:	4252      	negs	r2, r2
 800b9b8:	61a2      	str	r2, [r4, #24]
 800b9ba:	6922      	ldr	r2, [r4, #16]
 800b9bc:	b942      	cbnz	r2, 800b9d0 <__swsetup_r+0xa4>
 800b9be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b9c2:	d1c5      	bne.n	800b950 <__swsetup_r+0x24>
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	0799      	lsls	r1, r3, #30
 800b9c8:	bf58      	it	pl
 800b9ca:	6962      	ldrpl	r2, [r4, #20]
 800b9cc:	60a2      	str	r2, [r4, #8]
 800b9ce:	e7f4      	b.n	800b9ba <__swsetup_r+0x8e>
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	e7f7      	b.n	800b9c4 <__swsetup_r+0x98>
 800b9d4:	2000003c 	.word	0x2000003c

0800b9d8 <_raise_r>:
 800b9d8:	291f      	cmp	r1, #31
 800b9da:	b538      	push	{r3, r4, r5, lr}
 800b9dc:	4605      	mov	r5, r0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	d904      	bls.n	800b9ec <_raise_r+0x14>
 800b9e2:	2316      	movs	r3, #22
 800b9e4:	6003      	str	r3, [r0, #0]
 800b9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9ee:	b112      	cbz	r2, 800b9f6 <_raise_r+0x1e>
 800b9f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9f4:	b94b      	cbnz	r3, 800ba0a <_raise_r+0x32>
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f830 	bl	800ba5c <_getpid_r>
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4601      	mov	r1, r0
 800ba00:	4628      	mov	r0, r5
 800ba02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba06:	f000 b817 	b.w	800ba38 <_kill_r>
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d00a      	beq.n	800ba24 <_raise_r+0x4c>
 800ba0e:	1c59      	adds	r1, r3, #1
 800ba10:	d103      	bne.n	800ba1a <_raise_r+0x42>
 800ba12:	2316      	movs	r3, #22
 800ba14:	6003      	str	r3, [r0, #0]
 800ba16:	2001      	movs	r0, #1
 800ba18:	e7e7      	b.n	800b9ea <_raise_r+0x12>
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba22:	4798      	blx	r3
 800ba24:	2000      	movs	r0, #0
 800ba26:	e7e0      	b.n	800b9ea <_raise_r+0x12>

0800ba28 <raise>:
 800ba28:	4b02      	ldr	r3, [pc, #8]	@ (800ba34 <raise+0xc>)
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	f7ff bfd3 	b.w	800b9d8 <_raise_r>
 800ba32:	bf00      	nop
 800ba34:	2000003c 	.word	0x2000003c

0800ba38 <_kill_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4d06      	ldr	r5, [pc, #24]	@ (800ba58 <_kill_r+0x20>)
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	4611      	mov	r1, r2
 800ba44:	602b      	str	r3, [r5, #0]
 800ba46:	f7f6 fe4c 	bl	80026e2 <_kill>
 800ba4a:	1c43      	adds	r3, r0, #1
 800ba4c:	d102      	bne.n	800ba54 <_kill_r+0x1c>
 800ba4e:	682b      	ldr	r3, [r5, #0]
 800ba50:	b103      	cbz	r3, 800ba54 <_kill_r+0x1c>
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
 800ba56:	bf00      	nop
 800ba58:	200048c4 	.word	0x200048c4

0800ba5c <_getpid_r>:
 800ba5c:	f7f6 be3a 	b.w	80026d4 <_getpid>

0800ba60 <__swhatbuf_r>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	460c      	mov	r4, r1
 800ba64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba68:	4615      	mov	r5, r2
 800ba6a:	2900      	cmp	r1, #0
 800ba6c:	461e      	mov	r6, r3
 800ba6e:	b096      	sub	sp, #88	@ 0x58
 800ba70:	da0c      	bge.n	800ba8c <__swhatbuf_r+0x2c>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	2100      	movs	r1, #0
 800ba76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba7a:	bf14      	ite	ne
 800ba7c:	2340      	movne	r3, #64	@ 0x40
 800ba7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba82:	2000      	movs	r0, #0
 800ba84:	6031      	str	r1, [r6, #0]
 800ba86:	602b      	str	r3, [r5, #0]
 800ba88:	b016      	add	sp, #88	@ 0x58
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
 800ba8c:	466a      	mov	r2, sp
 800ba8e:	f000 f849 	bl	800bb24 <_fstat_r>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	dbed      	blt.n	800ba72 <__swhatbuf_r+0x12>
 800ba96:	9901      	ldr	r1, [sp, #4]
 800ba98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800baa0:	4259      	negs	r1, r3
 800baa2:	4159      	adcs	r1, r3
 800baa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800baa8:	e7eb      	b.n	800ba82 <__swhatbuf_r+0x22>

0800baaa <__smakebuf_r>:
 800baaa:	898b      	ldrh	r3, [r1, #12]
 800baac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baae:	079d      	lsls	r5, r3, #30
 800bab0:	4606      	mov	r6, r0
 800bab2:	460c      	mov	r4, r1
 800bab4:	d507      	bpl.n	800bac6 <__smakebuf_r+0x1c>
 800bab6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	6123      	str	r3, [r4, #16]
 800babe:	2301      	movs	r3, #1
 800bac0:	6163      	str	r3, [r4, #20]
 800bac2:	b003      	add	sp, #12
 800bac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac6:	466a      	mov	r2, sp
 800bac8:	ab01      	add	r3, sp, #4
 800baca:	f7ff ffc9 	bl	800ba60 <__swhatbuf_r>
 800bace:	9f00      	ldr	r7, [sp, #0]
 800bad0:	4605      	mov	r5, r0
 800bad2:	4639      	mov	r1, r7
 800bad4:	4630      	mov	r0, r6
 800bad6:	f7fe fa61 	bl	8009f9c <_malloc_r>
 800bada:	b948      	cbnz	r0, 800baf0 <__smakebuf_r+0x46>
 800badc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae0:	059a      	lsls	r2, r3, #22
 800bae2:	d4ee      	bmi.n	800bac2 <__smakebuf_r+0x18>
 800bae4:	f023 0303 	bic.w	r3, r3, #3
 800bae8:	f043 0302 	orr.w	r3, r3, #2
 800baec:	81a3      	strh	r3, [r4, #12]
 800baee:	e7e2      	b.n	800bab6 <__smakebuf_r+0xc>
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800baf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bafa:	81a3      	strh	r3, [r4, #12]
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	6020      	str	r0, [r4, #0]
 800bb00:	b15b      	cbz	r3, 800bb1a <__smakebuf_r+0x70>
 800bb02:	4630      	mov	r0, r6
 800bb04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb08:	f000 f81e 	bl	800bb48 <_isatty_r>
 800bb0c:	b128      	cbz	r0, 800bb1a <__smakebuf_r+0x70>
 800bb0e:	89a3      	ldrh	r3, [r4, #12]
 800bb10:	f023 0303 	bic.w	r3, r3, #3
 800bb14:	f043 0301 	orr.w	r3, r3, #1
 800bb18:	81a3      	strh	r3, [r4, #12]
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	431d      	orrs	r5, r3
 800bb1e:	81a5      	strh	r5, [r4, #12]
 800bb20:	e7cf      	b.n	800bac2 <__smakebuf_r+0x18>
	...

0800bb24 <_fstat_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	2300      	movs	r3, #0
 800bb28:	4d06      	ldr	r5, [pc, #24]	@ (800bb44 <_fstat_r+0x20>)
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	4611      	mov	r1, r2
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	f7f6 fe35 	bl	80027a0 <_fstat>
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	d102      	bne.n	800bb40 <_fstat_r+0x1c>
 800bb3a:	682b      	ldr	r3, [r5, #0]
 800bb3c:	b103      	cbz	r3, 800bb40 <_fstat_r+0x1c>
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	bd38      	pop	{r3, r4, r5, pc}
 800bb42:	bf00      	nop
 800bb44:	200048c4 	.word	0x200048c4

0800bb48 <_isatty_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4d05      	ldr	r5, [pc, #20]	@ (800bb64 <_isatty_r+0x1c>)
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4608      	mov	r0, r1
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	f7f6 fe33 	bl	80027be <_isatty>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_isatty_r+0x1a>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_isatty_r+0x1a>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	200048c4 	.word	0x200048c4

0800bb68 <_init>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	bf00      	nop
 800bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6e:	bc08      	pop	{r3}
 800bb70:	469e      	mov	lr, r3
 800bb72:	4770      	bx	lr

0800bb74 <_fini>:
 800bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb76:	bf00      	nop
 800bb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb7a:	bc08      	pop	{r3}
 800bb7c:	469e      	mov	lr, r3
 800bb7e:	4770      	bx	lr
